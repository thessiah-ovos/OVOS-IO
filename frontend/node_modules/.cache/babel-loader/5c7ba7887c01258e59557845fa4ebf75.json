{"ast":null,"code":"\"use strict\";\n\nvar xnv = require(\"xml-name-validator\");\n\nvar DOMException = require(\"domexception\");\n\nvar _require = require(\"../helpers/namespaces\"),\n    XML_NS = _require.XML_NS,\n    XMLNS_NS = _require.XMLNS_NS; // https://dom.spec.whatwg.org/#validate\n\n\nexports.name = function (name) {\n  var result = xnv.name(name);\n\n  if (!result.success) {\n    throw new DOMException(\"\\\"\" + name + \"\\\" did not match the Name production: \" + result.error, \"InvalidCharacterError\");\n  }\n};\n\nexports.qname = function (qname) {\n  exports.name(qname);\n  var result = xnv.qname(qname);\n\n  if (!result.success) {\n    throw new DOMException(\"\\\"\" + qname + \"\\\" did not match the QName production: \" + result.error, \"InvalidCharacterError\");\n  }\n};\n\nexports.validateAndExtract = function (namespace, qualifiedName) {\n  if (namespace === \"\") {\n    namespace = null;\n  }\n\n  exports.qname(qualifiedName);\n  var prefix = null;\n  var localName = qualifiedName;\n  var colonIndex = qualifiedName.indexOf(\":\");\n\n  if (colonIndex !== -1) {\n    prefix = qualifiedName.substring(0, colonIndex);\n    localName = qualifiedName.substring(colonIndex + 1);\n  }\n\n  if (prefix !== null && namespace === null) {\n    throw new DOMException(\"A namespace was given but a prefix was also extracted from the qualifiedName\", \"NamespaceError\");\n  }\n\n  if (prefix === \"xml\" && namespace !== XML_NS) {\n    throw new DOMException(\"A prefix of \\\"xml\\\" was given but the namespace was not the XML namespace\", \"NamespaceError\");\n  }\n\n  if ((qualifiedName === \"xmlns\" || prefix === \"xmlns\") && namespace !== XMLNS_NS) {\n    throw new DOMException(\"A prefix or qualifiedName of \\\"xmlns\\\" was given but the namespace was not the XMLNS \" + \"namespace\", \"NamespaceError\");\n  }\n\n  if (namespace === XMLNS_NS && qualifiedName !== \"xmlns\" && prefix !== \"xmlns\") {\n    throw new DOMException(\"The XMLNS namespace was given but neither the prefix nor qualifiedName was \\\"xmlns\\\"\", \"NamespaceError\");\n  }\n\n  return {\n    namespace: namespace,\n    prefix: prefix,\n    localName: localName\n  };\n};","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/helpers/validate-names.js"],"names":["xnv","require","DOMException","XML_NS","XMLNS_NS","exports","name","result","success","error","qname","validateAndExtract","namespace","qualifiedName","prefix","localName","colonIndex","indexOf","substring"],"mappings":"AAAA;;AACA,IAAMA,GAAG,GAAGC,OAAO,CAAC,oBAAD,CAAnB;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,cAAD,CAA5B;;eAC6BA,OAAO,CAAC,uBAAD,C;IAA5BE,M,YAAAA,M;IAAQC,Q,YAAAA,Q,EAEhB;;;AAEAC,OAAO,CAACC,IAAR,GAAe,UAAUA,IAAV,EAAgB;AAC7B,MAAMC,MAAM,GAAGP,GAAG,CAACM,IAAJ,CAASA,IAAT,CAAf;;AACA,MAAI,CAACC,MAAM,CAACC,OAAZ,EAAqB;AACnB,UAAM,IAAIN,YAAJ,CACJ,OAAOI,IAAP,GAAc,wCAAd,GAAyDC,MAAM,CAACE,KAD5D,EAEJ,uBAFI,CAAN;AAID;AACF,CARD;;AAUAJ,OAAO,CAACK,KAAR,GAAgB,UAAUA,KAAV,EAAiB;AAC/BL,EAAAA,OAAO,CAACC,IAAR,CAAaI,KAAb;AAEA,MAAMH,MAAM,GAAGP,GAAG,CAACU,KAAJ,CAAUA,KAAV,CAAf;;AACA,MAAI,CAACH,MAAM,CAACC,OAAZ,EAAqB;AACnB,UAAM,IAAIN,YAAJ,CACJ,OAAOQ,KAAP,GAAe,yCAAf,GAA2DH,MAAM,CAACE,KAD9D,EAEJ,uBAFI,CAAN;AAID;AACF,CAVD;;AAYAJ,OAAO,CAACM,kBAAR,GAA6B,UAAUC,SAAV,EAAqBC,aAArB,EAAoC;AAC/D,MAAID,SAAS,KAAK,EAAlB,EAAsB;AACpBA,IAAAA,SAAS,GAAG,IAAZ;AACD;;AAEDP,EAAAA,OAAO,CAACK,KAAR,CAAcG,aAAd;AAEA,MAAIC,MAAM,GAAG,IAAb;AACA,MAAIC,SAAS,GAAGF,aAAhB;AAEA,MAAMG,UAAU,GAAGH,aAAa,CAACI,OAAd,CAAsB,GAAtB,CAAnB;;AACA,MAAID,UAAU,KAAK,CAAC,CAApB,EAAuB;AACrBF,IAAAA,MAAM,GAAGD,aAAa,CAACK,SAAd,CAAwB,CAAxB,EAA2BF,UAA3B,CAAT;AACAD,IAAAA,SAAS,GAAGF,aAAa,CAACK,SAAd,CAAwBF,UAAU,GAAG,CAArC,CAAZ;AACD;;AAED,MAAIF,MAAM,KAAK,IAAX,IAAmBF,SAAS,KAAK,IAArC,EAA2C;AACzC,UAAM,IAAIV,YAAJ,CACJ,8EADI,EAEJ,gBAFI,CAAN;AAID;;AAED,MAAIY,MAAM,KAAK,KAAX,IAAoBF,SAAS,KAAKT,MAAtC,EAA8C;AAC5C,UAAM,IAAID,YAAJ,CACJ,2EADI,EAEJ,gBAFI,CAAN;AAID;;AAED,MAAI,CAACW,aAAa,KAAK,OAAlB,IAA6BC,MAAM,KAAK,OAAzC,KAAqDF,SAAS,KAAKR,QAAvE,EAAiF;AAC/E,UAAM,IAAIF,YAAJ,CAAiB,0FACrB,WADI,EACS,gBADT,CAAN;AAED;;AAED,MAAIU,SAAS,KAAKR,QAAd,IAA0BS,aAAa,KAAK,OAA5C,IAAuDC,MAAM,KAAK,OAAtE,EAA+E;AAC7E,UAAM,IAAIZ,YAAJ,CACJ,sFADI,EAEJ,gBAFI,CAAN;AAID;;AAED,SAAO;AAAEU,IAAAA,SAAS,EAATA,SAAF;AAAaE,IAAAA,MAAM,EAANA,MAAb;AAAqBC,IAAAA,SAAS,EAATA;AAArB,GAAP;AACD,CA3CD","sourcesContent":["\"use strict\";\nconst xnv = require(\"xml-name-validator\");\nconst DOMException = require(\"domexception\");\nconst { XML_NS, XMLNS_NS } = require(\"../helpers/namespaces\");\n\n// https://dom.spec.whatwg.org/#validate\n\nexports.name = function (name) {\n  const result = xnv.name(name);\n  if (!result.success) {\n    throw new DOMException(\n      \"\\\"\" + name + \"\\\" did not match the Name production: \" + result.error,\n      \"InvalidCharacterError\"\n    );\n  }\n};\n\nexports.qname = function (qname) {\n  exports.name(qname);\n\n  const result = xnv.qname(qname);\n  if (!result.success) {\n    throw new DOMException(\n      \"\\\"\" + qname + \"\\\" did not match the QName production: \" + result.error,\n      \"InvalidCharacterError\"\n    );\n  }\n};\n\nexports.validateAndExtract = function (namespace, qualifiedName) {\n  if (namespace === \"\") {\n    namespace = null;\n  }\n\n  exports.qname(qualifiedName);\n\n  let prefix = null;\n  let localName = qualifiedName;\n\n  const colonIndex = qualifiedName.indexOf(\":\");\n  if (colonIndex !== -1) {\n    prefix = qualifiedName.substring(0, colonIndex);\n    localName = qualifiedName.substring(colonIndex + 1);\n  }\n\n  if (prefix !== null && namespace === null) {\n    throw new DOMException(\n      \"A namespace was given but a prefix was also extracted from the qualifiedName\",\n      \"NamespaceError\"\n    );\n  }\n\n  if (prefix === \"xml\" && namespace !== XML_NS) {\n    throw new DOMException(\n      \"A prefix of \\\"xml\\\" was given but the namespace was not the XML namespace\",\n      \"NamespaceError\"\n    );\n  }\n\n  if ((qualifiedName === \"xmlns\" || prefix === \"xmlns\") && namespace !== XMLNS_NS) {\n    throw new DOMException(\"A prefix or qualifiedName of \\\"xmlns\\\" was given but the namespace was not the XMLNS \" +\n      \"namespace\", \"NamespaceError\");\n  }\n\n  if (namespace === XMLNS_NS && qualifiedName !== \"xmlns\" && prefix !== \"xmlns\") {\n    throw new DOMException(\n      \"The XMLNS namespace was given but neither the prefix nor qualifiedName was \\\"xmlns\\\"\",\n      \"NamespaceError\"\n    );\n  }\n\n  return { namespace, prefix, localName };\n};\n"]},"metadata":{},"sourceType":"script"}