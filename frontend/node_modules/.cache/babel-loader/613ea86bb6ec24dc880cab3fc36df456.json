{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"../helpers/create-event-accessor\"),\n    appendHandler = _require.appendHandler,\n    createEventAccessor = _require.createEventAccessor;\n\nvar events = new Set([\"abort\", \"autocomplete\", \"autocompleteerror\", \"blur\", \"cancel\", \"canplay\", \"canplaythrough\", \"change\", \"click\", \"close\", \"contextmenu\", \"cuechange\", \"dblclick\", \"drag\", \"dragend\", \"dragenter\", \"dragexit\", \"dragleave\", \"dragover\", \"dragstart\", \"drop\", \"durationchange\", \"emptied\", \"ended\", \"error\", \"focus\", \"input\", \"invalid\", \"keydown\", \"keypress\", \"keyup\", \"load\", \"loadeddata\", \"loadedmetadata\", \"loadstart\", \"mousedown\", \"mouseenter\", \"mouseleave\", \"mousemove\", \"mouseout\", \"mouseover\", \"mouseup\", \"wheel\", \"pause\", \"play\", \"playing\", \"progress\", \"ratechange\", \"reset\", \"resize\", \"scroll\", \"securitypolicyviolation\", \"seeked\", \"seeking\", \"select\", \"sort\", \"stalled\", \"submit\", \"suspend\", \"timeupdate\", \"toggle\", \"volumechange\", \"waiting\"]);\n\nvar GlobalEventHandlersImpl = /*#__PURE__*/function () {\n  function GlobalEventHandlersImpl() {\n    _classCallCheck(this, GlobalEventHandlersImpl);\n  }\n\n  _createClass(GlobalEventHandlersImpl, [{\n    key: \"_initGlobalEvents\",\n    value: function _initGlobalEvents() {\n      this._registeredHandlers = new Set();\n      this._eventHandlers = Object.create(null);\n    }\n  }, {\n    key: \"_getEventHandlerTarget\",\n    value: function _getEventHandlerTarget() {\n      return this;\n    }\n  }, {\n    key: \"_getEventHandlerFor\",\n    value: function _getEventHandlerFor(event) {\n      var target = this._getEventHandlerTarget(event);\n\n      if (!target) {\n        return null;\n      }\n\n      return target._eventHandlers[event];\n    }\n  }, {\n    key: \"_setEventHandlerFor\",\n    value: function _setEventHandlerFor(event, handler) {\n      var target = this._getEventHandlerTarget(event);\n\n      if (!target) {\n        return;\n      }\n\n      if (!target._registeredHandlers.has(event) && handler !== null) {\n        target._registeredHandlers.add(event);\n\n        appendHandler(target, event);\n      }\n\n      target._eventHandlers[event] = handler;\n    }\n  }, {\n    key: \"_globalEventChanged\",\n    value: function _globalEventChanged(event) {\n      var propName = \"on\" + event;\n\n      if (!(propName in this)) {\n        return;\n      } // Only translate attribute changes into properties when runScripts: \"dangerously\" is set.\n      // Documents without a browsing context (i.e. without a _defaultView) never run scripts.\n\n\n      var runScripts = \"_runScripts\" in this ? this._runScripts : (this._ownerDocument._defaultView || {})._runScripts;\n\n      if (runScripts !== \"dangerously\") {\n        return;\n      }\n\n      var val = this.getAttribute(propName);\n      var handler = val === null ? null : {\n        body: val\n      };\n\n      this._setEventHandlerFor(event, handler);\n    }\n  }]);\n\n  return GlobalEventHandlersImpl;\n}();\n\nvar _iterator = _createForOfIteratorHelper(events),\n    _step;\n\ntry {\n  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n    var event = _step.value;\n    createEventAccessor(GlobalEventHandlersImpl.prototype, event);\n  }\n} catch (err) {\n  _iterator.e(err);\n} finally {\n  _iterator.f();\n}\n\nmodule.exports = {\n  implementation: GlobalEventHandlersImpl\n};","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/nodes/GlobalEventHandlers-impl.js"],"names":["require","appendHandler","createEventAccessor","events","Set","GlobalEventHandlersImpl","_registeredHandlers","_eventHandlers","Object","create","event","target","_getEventHandlerTarget","handler","has","add","propName","runScripts","_runScripts","_ownerDocument","_defaultView","val","getAttribute","body","_setEventHandlerFor","prototype","module","exports","implementation"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst { appendHandler, createEventAccessor } = require(\"../helpers/create-event-accessor\");\n\nconst events = new Set([\n  \"abort\", \"autocomplete\",\n  \"autocompleteerror\", \"blur\",\n  \"cancel\", \"canplay\", \"canplaythrough\",\n  \"change\", \"click\",\n  \"close\", \"contextmenu\",\n  \"cuechange\", \"dblclick\",\n  \"drag\", \"dragend\",\n  \"dragenter\", \"dragexit\",\n  \"dragleave\", \"dragover\",\n  \"dragstart\", \"drop\",\n  \"durationchange\", \"emptied\",\n  \"ended\", \"error\", \"focus\",\n  \"input\", \"invalid\",\n  \"keydown\", \"keypress\",\n  \"keyup\", \"load\", \"loadeddata\",\n  \"loadedmetadata\", \"loadstart\",\n  \"mousedown\", \"mouseenter\",\n  \"mouseleave\", \"mousemove\",\n  \"mouseout\", \"mouseover\",\n  \"mouseup\", \"wheel\",\n  \"pause\", \"play\",\n  \"playing\", \"progress\",\n  \"ratechange\", \"reset\",\n  \"resize\", \"scroll\",\n  \"securitypolicyviolation\",\n  \"seeked\", \"seeking\",\n  \"select\", \"sort\", \"stalled\",\n  \"submit\", \"suspend\",\n  \"timeupdate\", \"toggle\",\n  \"volumechange\", \"waiting\"\n]);\n\nclass GlobalEventHandlersImpl {\n  _initGlobalEvents() {\n    this._registeredHandlers = new Set();\n    this._eventHandlers = Object.create(null);\n  }\n\n  _getEventHandlerTarget() {\n    return this;\n  }\n\n  _getEventHandlerFor(event) {\n    const target = this._getEventHandlerTarget(event);\n    if (!target) {\n      return null;\n    }\n\n    return target._eventHandlers[event];\n  }\n\n  _setEventHandlerFor(event, handler) {\n    const target = this._getEventHandlerTarget(event);\n    if (!target) {\n      return;\n    }\n\n    if (!target._registeredHandlers.has(event) && handler !== null) {\n      target._registeredHandlers.add(event);\n      appendHandler(target, event);\n    }\n    target._eventHandlers[event] = handler;\n  }\n\n  _globalEventChanged(event) {\n    const propName = \"on\" + event;\n    if (!(propName in this)) {\n      return;\n    }\n\n    // Only translate attribute changes into properties when runScripts: \"dangerously\" is set.\n    // Documents without a browsing context (i.e. without a _defaultView) never run scripts.\n    const runScripts = \"_runScripts\" in this ? this._runScripts : (this._ownerDocument._defaultView || {})._runScripts;\n    if (runScripts !== \"dangerously\") {\n      return;\n    }\n\n    const val = this.getAttribute(propName);\n    const handler = val === null ? null : { body: val };\n    this._setEventHandlerFor(event, handler);\n  }\n}\n\nfor (const event of events) {\n  createEventAccessor(GlobalEventHandlersImpl.prototype, event);\n}\n\nmodule.exports = {\n  implementation: GlobalEventHandlersImpl\n};\n"]},"metadata":{},"sourceType":"script"}