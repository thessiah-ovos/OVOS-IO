{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar convertSupportedType = require(\"./SupportedType.js\").convert;\n\nvar impl = utils.implSymbol;\n\nfunction DOMParser() {\n  if ((this instanceof DOMParser ? this.constructor : void 0) === undefined) {\n    throw new TypeError(\"Failed to construct 'DOMParser'. Please use the 'new' operator; this constructor \" + \"cannot be called as a function.\");\n  }\n\n  iface.setup(this);\n}\n\nObject.defineProperty(DOMParser, \"prototype\", {\n  value: DOMParser.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nDOMParser.prototype.parseFromString = function parseFromString(str, type) {\n  var _this$impl;\n\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'parseFromString' on 'DOMParser': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'parseFromString' on 'DOMParser': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    var _curArg = arguments[1];\n    _curArg = convertSupportedType(_curArg, {\n      context: \"Failed to execute 'parseFromString' on 'DOMParser': parameter 2\"\n    });\n    args.push(_curArg);\n  }\n  return utils.tryWrapperForImpl((_this$impl = this[impl]).parseFromString.apply(_this$impl, args));\n};\n\nObject.defineProperty(DOMParser.prototype, Symbol.toStringTag, {\n  value: \"DOMParser\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nvar iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is: function is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      var _iterator = _createForOfIteratorHelper(module.exports._mixedIntoPredicates),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var isMixedInto = _step.value;\n\n          if (isMixedInto(obj)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    return false;\n  },\n  isImpl: function isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      var wrapper = utils.wrapperForImpl(obj);\n\n      var _iterator2 = _createForOfIteratorHelper(module.exports._mixedIntoPredicates),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var isMixedInto = _step2.value;\n\n          if (isMixedInto(wrapper)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n\n    return false;\n  },\n  convert: function convert(obj) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'DOMParser'.\"));\n  },\n  create: function create(constructorArgs, privateData) {\n    var obj = Object.create(DOMParser.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl: function createImpl(constructorArgs, privateData) {\n    var obj = Object.create(DOMParser.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup: function _internalSetup(obj) {},\n  setup: function setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n  interface: DOMParser,\n  expose: {\n    Window: {\n      DOMParser: DOMParser\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nvar Impl = require(\"../domparsing/DOMParser-impl.js\");","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/generated/DOMParser.js"],"names":["conversions","require","utils","convertSupportedType","convert","impl","implSymbol","DOMParser","undefined","TypeError","iface","setup","Object","defineProperty","value","prototype","writable","enumerable","configurable","parseFromString","str","type","module","exports","is","arguments","length","args","curArg","context","push","tryWrapperForImpl","Symbol","toStringTag","_mixedIntoPredicates","obj","hasOwn","Impl","implementation","isMixedInto","isImpl","wrapper","wrapperForImpl","implForWrapper","create","constructorArgs","privateData","createImpl","_internalSetup","wrapperSymbol","init","interface","expose","Window"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst convertSupportedType = require(\"./SupportedType.js\").convert;\nconst impl = utils.implSymbol;\n\nfunction DOMParser() {\n  if (new.target === undefined) {\n    throw new TypeError(\n      \"Failed to construct 'DOMParser'. Please use the 'new' operator; this constructor \" +\n        \"cannot be called as a function.\"\n    );\n  }\n\n  iface.setup(this);\n}\n\nObject.defineProperty(DOMParser, \"prototype\", {\n  value: DOMParser.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nDOMParser.prototype.parseFromString = function parseFromString(str, type) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\n      \"Failed to execute 'parseFromString' on 'DOMParser': 2 arguments required, but only \" +\n        arguments.length +\n        \" present.\"\n    );\n  }\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'parseFromString' on 'DOMParser': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n    curArg = convertSupportedType(curArg, {\n      context: \"Failed to execute 'parseFromString' on 'DOMParser': parameter 2\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].parseFromString(...args));\n};\n\nObject.defineProperty(DOMParser.prototype, Symbol.toStringTag, {\n  value: \"DOMParser\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\n\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  convert(obj, { context = \"The provided value\" } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n    throw new TypeError(`${context} is not of type 'DOMParser'.`);\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(DOMParser.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(DOMParser.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup(obj) {},\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n\n    obj[impl][utils.wrapperSymbol] = obj;\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n    return obj;\n  },\n  interface: DOMParser,\n  expose: {\n    Window: { DOMParser }\n  }\n}; // iface\nmodule.exports = iface;\n\nconst Impl = require(\"../domparsing/DOMParser-impl.js\");\n"]},"metadata":{},"sourceType":"script"}