{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar parse5 = require(\"parse5\");\n\nvar treeAdapter = require(\"./parse5-adapter-serialization\");\n\nvar NODE_TYPE = require(\"../living/node-type\");\n\nexports.domToHtml = function (iterable) {\n  var ret = \"\";\n\n  var _iterator = _createForOfIteratorHelper(iterable),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var node = _step.value;\n\n      if (node.nodeType === NODE_TYPE.DOCUMENT_NODE) {\n        ret += parse5.serialize(node, {\n          treeAdapter: treeAdapter\n        });\n      } else {\n        // TODO: maybe parse5 can give us a hook where it serializes the node itself too:\n        // https://github.com/inikulin/parse5/issues/230\n        ret += parse5.serialize({\n          childNodesForSerializing: [node]\n        }, {\n          treeAdapter: treeAdapter\n        });\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return ret;\n};","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/browser/domtohtml.js"],"names":["parse5","require","treeAdapter","NODE_TYPE","exports","domToHtml","iterable","ret","node","nodeType","DOCUMENT_NODE","serialize","childNodesForSerializing"],"mappings":"AAAA;;;;AACA,IAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMC,WAAW,GAAGD,OAAO,CAAC,gCAAD,CAA3B;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,qBAAD,CAAzB;;AAEAG,OAAO,CAACC,SAAR,GAAoB,UAAAC,QAAQ,EAAI;AAC9B,MAAIC,GAAG,GAAG,EAAV;;AAD8B,6CAEXD,QAFW;AAAA;;AAAA;AAE9B,wDAA6B;AAAA,UAAlBE,IAAkB;;AAC3B,UAAIA,IAAI,CAACC,QAAL,KAAkBN,SAAS,CAACO,aAAhC,EAA+C;AAC7CH,QAAAA,GAAG,IAAIP,MAAM,CAACW,SAAP,CAAiBH,IAAjB,EAAuB;AAAEN,UAAAA,WAAW,EAAXA;AAAF,SAAvB,CAAP;AACD,OAFD,MAEO;AACL;AACA;AACAK,QAAAA,GAAG,IAAIP,MAAM,CAACW,SAAP,CAAiB;AAAEC,UAAAA,wBAAwB,EAAE,CAACJ,IAAD;AAA5B,SAAjB,EAAuD;AAAEN,UAAAA,WAAW,EAAXA;AAAF,SAAvD,CAAP;AACD;AACF;AAV6B;AAAA;AAAA;AAAA;AAAA;;AAW9B,SAAOK,GAAP;AACD,CAZD","sourcesContent":["\"use strict\";\nconst parse5 = require(\"parse5\");\nconst treeAdapter = require(\"./parse5-adapter-serialization\");\nconst NODE_TYPE = require(\"../living/node-type\");\n\nexports.domToHtml = iterable => {\n  let ret = \"\";\n  for (const node of iterable) {\n    if (node.nodeType === NODE_TYPE.DOCUMENT_NODE) {\n      ret += parse5.serialize(node, { treeAdapter });\n    } else {\n      // TODO: maybe parse5 can give us a hook where it serializes the node itself too:\n      // https://github.com/inikulin/parse5/issues/230\n      ret += parse5.serialize({ childNodesForSerializing: [node] }, { treeAdapter });\n    }\n  }\n  return ret;\n};\n"]},"metadata":{},"sourceType":"script"}