{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _require = require(\"./infra\"),\n    isASCIIHex = _require.isASCIIHex;\n\nfunction strictlySplitByteSequence(buf, cp) {\n  var list = [];\n  var last = 0;\n  var i = buf.indexOf(cp);\n\n  while (i >= 0) {\n    list.push(buf.slice(last, i));\n    last = i + 1;\n    i = buf.indexOf(cp, last);\n  }\n\n  if (last !== buf.length) {\n    list.push(buf.slice(last));\n  }\n\n  return list;\n}\n\nfunction replaceByteInByteSequence(buf, from, to) {\n  var i = buf.indexOf(from);\n\n  while (i >= 0) {\n    buf[i] = to;\n    i = buf.indexOf(from, i + 1);\n  }\n\n  return buf;\n}\n\nfunction percentEncode(c) {\n  var hex = c.toString(16).toUpperCase();\n\n  if (hex.length === 1) {\n    hex = \"0\" + hex;\n  }\n\n  return \"%\" + hex;\n}\n\nfunction percentDecode(input) {\n  var output = Buffer.alloc(input.byteLength);\n  var ptr = 0;\n\n  for (var i = 0; i < input.length; ++i) {\n    if (input[i] !== 37 || !isASCIIHex(input[i + 1]) || !isASCIIHex(input[i + 2])) {\n      output[ptr++] = input[i];\n    } else {\n      output[ptr++] = parseInt(input.slice(i + 1, i + 3).toString(), 16);\n      i += 2;\n    }\n  }\n\n  return output.slice(0, ptr);\n}\n\nfunction _parseUrlencoded(input) {\n  var sequences = strictlySplitByteSequence(input, 38);\n  var output = [];\n\n  var _iterator = _createForOfIteratorHelper(sequences),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var bytes = _step.value;\n\n      if (bytes.length === 0) {\n        continue;\n      }\n\n      var name = void 0;\n      var value = void 0;\n      var indexOfEqual = bytes.indexOf(61);\n\n      if (indexOfEqual >= 0) {\n        name = bytes.slice(0, indexOfEqual);\n        value = bytes.slice(indexOfEqual + 1);\n      } else {\n        name = bytes;\n        value = Buffer.alloc(0);\n      }\n\n      name = replaceByteInByteSequence(Buffer.from(name), 43, 32);\n      value = replaceByteInByteSequence(Buffer.from(value), 43, 32);\n      output.push([percentDecode(name).toString(), percentDecode(value).toString()]);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return output;\n}\n\nfunction serializeUrlencodedByte(input) {\n  var output = \"\";\n\n  var _iterator2 = _createForOfIteratorHelper(input),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var byte = _step2.value;\n\n      if (byte === 32) {\n        output += \"+\";\n      } else if (byte === 42 || byte === 45 || byte === 46 || byte >= 48 && byte <= 57 || byte >= 65 && byte <= 90 || byte === 95 || byte >= 97 && byte <= 122) {\n        output += String.fromCodePoint(byte);\n      } else {\n        output += percentEncode(byte);\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return output;\n}\n\nfunction serializeUrlencoded(tuples) {\n  var encodingOverride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  var encoding = \"utf-8\";\n\n  if (encodingOverride !== undefined) {\n    encoding = encodingOverride;\n  }\n\n  var output = \"\";\n\n  var _iterator3 = _createForOfIteratorHelper(tuples.entries()),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _step3$value = _slicedToArray(_step3.value, 2),\n          i = _step3$value[0],\n          tuple = _step3$value[1];\n\n      // TODO: handle encoding override\n      var name = serializeUrlencodedByte(Buffer.from(tuple[0]));\n      var value = tuple[1];\n\n      if (tuple.length > 2 && tuple[2] !== undefined) {\n        if (tuple[2] === \"hidden\" && name === \"_charset_\") {\n          value = encoding;\n        } else if (tuple[2] === \"file\") {\n          // value is a File object\n          value = value.name;\n        }\n      }\n\n      value = serializeUrlencodedByte(Buffer.from(value));\n\n      if (i !== 0) {\n        output += \"&\";\n      }\n\n      output += \"\".concat(name, \"=\").concat(value);\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return output;\n}\n\nmodule.exports = {\n  percentEncode: percentEncode,\n  percentDecode: percentDecode,\n  // application/x-www-form-urlencoded string parser\n  parseUrlencoded: function parseUrlencoded(input) {\n    return _parseUrlencoded(Buffer.from(input));\n  },\n  // application/x-www-form-urlencoded serializer\n  serializeUrlencoded: serializeUrlencoded\n};","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/whatwg-url/lib/urlencoded.js"],"names":["require","isASCIIHex","strictlySplitByteSequence","buf","cp","list","last","i","indexOf","push","slice","length","replaceByteInByteSequence","from","to","percentEncode","c","hex","toString","toUpperCase","percentDecode","input","output","Buffer","alloc","byteLength","ptr","parseInt","parseUrlencoded","sequences","bytes","name","value","indexOfEqual","serializeUrlencodedByte","byte","String","fromCodePoint","serializeUrlencoded","tuples","encodingOverride","undefined","encoding","entries","tuple","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nconst { isASCIIHex } = require(\"./infra\");\n\nfunction strictlySplitByteSequence(buf, cp) {\n  const list = [];\n  let last = 0;\n  let i = buf.indexOf(cp);\n  while (i >= 0) {\n    list.push(buf.slice(last, i));\n    last = i + 1;\n    i = buf.indexOf(cp, last);\n  }\n  if (last !== buf.length) {\n    list.push(buf.slice(last));\n  }\n  return list;\n}\n\nfunction replaceByteInByteSequence(buf, from, to) {\n  let i = buf.indexOf(from);\n  while (i >= 0) {\n    buf[i] = to;\n    i = buf.indexOf(from, i + 1);\n  }\n  return buf;\n}\n\nfunction percentEncode(c) {\n  let hex = c.toString(16).toUpperCase();\n  if (hex.length === 1) {\n    hex = \"0\" + hex;\n  }\n\n  return \"%\" + hex;\n}\n\nfunction percentDecode(input) {\n  const output = Buffer.alloc(input.byteLength);\n  let ptr = 0;\n  for (let i = 0; i < input.length; ++i) {\n    if (input[i] !== 37 || !isASCIIHex(input[i + 1]) || !isASCIIHex(input[i + 2])) {\n      output[ptr++] = input[i];\n    } else {\n      output[ptr++] = parseInt(input.slice(i + 1, i + 3).toString(), 16);\n      i += 2;\n    }\n  }\n  return output.slice(0, ptr);\n}\n\nfunction parseUrlencoded(input) {\n  const sequences = strictlySplitByteSequence(input, 38);\n  const output = [];\n  for (const bytes of sequences) {\n    if (bytes.length === 0) {\n      continue;\n    }\n\n    let name;\n    let value;\n    const indexOfEqual = bytes.indexOf(61);\n\n    if (indexOfEqual >= 0) {\n      name = bytes.slice(0, indexOfEqual);\n      value = bytes.slice(indexOfEqual + 1);\n    } else {\n      name = bytes;\n      value = Buffer.alloc(0);\n    }\n\n    name = replaceByteInByteSequence(Buffer.from(name), 43, 32);\n    value = replaceByteInByteSequence(Buffer.from(value), 43, 32);\n\n    output.push([percentDecode(name).toString(), percentDecode(value).toString()]);\n  }\n  return output;\n}\n\nfunction serializeUrlencodedByte(input) {\n  let output = \"\";\n  for (const byte of input) {\n    if (byte === 32) {\n      output += \"+\";\n    } else if (byte === 42 ||\n               byte === 45 ||\n               byte === 46 ||\n               (byte >= 48 && byte <= 57) ||\n               (byte >= 65 && byte <= 90) ||\n               byte === 95 ||\n               (byte >= 97 && byte <= 122)) {\n      output += String.fromCodePoint(byte);\n    } else {\n      output += percentEncode(byte);\n    }\n  }\n  return output;\n}\n\nfunction serializeUrlencoded(tuples, encodingOverride = undefined) {\n  let encoding = \"utf-8\";\n  if (encodingOverride !== undefined) {\n    encoding = encodingOverride;\n  }\n\n  let output = \"\";\n  for (const [i, tuple] of tuples.entries()) {\n    // TODO: handle encoding override\n    const name = serializeUrlencodedByte(Buffer.from(tuple[0]));\n    let value = tuple[1];\n    if (tuple.length > 2 && tuple[2] !== undefined) {\n      if (tuple[2] === \"hidden\" && name === \"_charset_\") {\n        value = encoding;\n      } else if (tuple[2] === \"file\") {\n        // value is a File object\n        value = value.name;\n      }\n    }\n    value = serializeUrlencodedByte(Buffer.from(value));\n    if (i !== 0) {\n      output += \"&\";\n    }\n    output += `${name}=${value}`;\n  }\n  return output;\n}\n\nmodule.exports = {\n  percentEncode,\n  percentDecode,\n\n  // application/x-www-form-urlencoded string parser\n  parseUrlencoded(input) {\n    return parseUrlencoded(Buffer.from(input));\n  },\n\n  // application/x-www-form-urlencoded serializer\n  serializeUrlencoded\n};\n"]},"metadata":{},"sourceType":"script"}