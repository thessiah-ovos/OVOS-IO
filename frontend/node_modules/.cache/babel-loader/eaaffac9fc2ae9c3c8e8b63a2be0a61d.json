{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar DOMException = require(\"domexception\");\n\nvar _require = require(\"../helpers/document-base-url.js\"),\n    documentBaseURLSerialized = _require.documentBaseURLSerialized,\n    parseURLToResultingURLRecord = _require.parseURLToResultingURLRecord; // https://html.spec.whatwg.org/#history-3\n\n\nexports.implementation = /*#__PURE__*/function () {\n  function HistoryImpl(args, privateData) {\n    _classCallCheck(this, HistoryImpl);\n\n    this._window = privateData.window;\n    this._document = privateData.document;\n    this._actAsIfLocationReloadCalled = privateData.actAsIfLocationReloadCalled;\n    this._state = null;\n  }\n\n  _createClass(HistoryImpl, [{\n    key: \"_guardAgainstInactiveDocuments\",\n    value: function _guardAgainstInactiveDocuments() {\n      if (!this._window) {\n        throw new DOMException(\"History object is associated with a document that is not fully active.\", \"SecurityError\");\n      }\n    }\n  }, {\n    key: \"go\",\n    value: function go(delta) {\n      this._guardAgainstInactiveDocuments();\n\n      if (delta === 0) {\n        // When the go(delta) method is invoked, if delta is zero, the user agent must act as\n        // if the location.reload() method was called instead.\n        this._actAsIfLocationReloadCalled();\n      } else {\n        // Otherwise, the user agent must traverse the history by a delta whose value is delta\n        this._window._sessionHistory.traverseByDelta(delta);\n      }\n    }\n  }, {\n    key: \"back\",\n    value: function back() {\n      this.go(-1);\n    }\n  }, {\n    key: \"forward\",\n    value: function forward() {\n      this.go(+1);\n    }\n  }, {\n    key: \"pushState\",\n    value: function pushState(data, title, url) {\n      this._sharedPushAndReplaceState(data, title, url, \"pushState\");\n    }\n  }, {\n    key: \"replaceState\",\n    value: function replaceState(data, title, url) {\n      this._sharedPushAndReplaceState(data, title, url, \"replaceState\");\n    } // https://html.spec.whatwg.org/#dom-history-pushstate\n\n  }, {\n    key: \"_sharedPushAndReplaceState\",\n    value: function _sharedPushAndReplaceState(data, title, url, methodName) {\n      this._guardAgainstInactiveDocuments(); // TODO structured clone data\n\n\n      var newURL;\n\n      if (url !== null) {\n        // Not implemented: use of entry settings object's API base URL. Instead we just use the document base URL. The\n        // difference matters in the case of cross-frame calls.\n        newURL = parseURLToResultingURLRecord(url, this._document);\n\n        if (newURL === null) {\n          throw new DOMException(\"Could not parse url argument \\\"\".concat(url, \"\\\" to \").concat(methodName, \" \") + \"against base URL \\\"\".concat(documentBaseURLSerialized(this._document), \"\\\".\"), \"SecurityError\");\n        }\n\n        if (newURL.scheme !== this._document._URL.scheme || newURL.username !== this._document._URL.username || newURL.password !== this._document._URL.password || newURL.host !== this._document._URL.host || newURL.port !== this._document._URL.port || newURL.cannotBeABaseURL !== this._document._URL.cannotBeABaseURL) {\n          throw new DOMException(\"\".concat(methodName, \" cannot update history to a URL which \") + \"differs in components other than in path, query, or fragment.\", \"SecurityError\");\n        } // Not implemented: origin check (seems to only apply to documents with weird origins, e.g. sandboxed ones)\n\n      } else {\n        newURL = this._window._sessionHistory.currentEntry.url;\n      }\n\n      if (methodName === \"pushState\") {\n        this._window._sessionHistory.removeAllEntriesAfterCurrentEntry();\n\n        this._window._sessionHistory.clearHistoryTraversalTasks();\n\n        var newEntry = {\n          document: this._document,\n          stateObject: data,\n          title: title,\n          url: newURL\n        };\n\n        this._window._sessionHistory.addEntryAfterCurrentEntry(newEntry);\n\n        this._window._sessionHistory.updateCurrentEntry(newEntry);\n      } else {\n        var currentEntry = this._window._sessionHistory.currentEntry;\n        currentEntry.stateObject = data;\n        currentEntry.title = title;\n        currentEntry.url = newURL;\n      } // TODO: If the current entry in the session history represents a non-GET request\n      // (e.g. it was the result of a POST submission) then update it to instead represent\n      // a GET request.\n\n\n      this._document._URL = newURL; // arguably it's a bit odd that the state and latestEntry do not belong to the SessionHistory\n      // but the spec gives them to \"History\" and \"Document\" respecively.\n\n      this._state = data; // TODO clone again!! O_o\n\n      this._document._latestEntry = this._window._sessionHistory.currentEntry;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      this._guardAgainstInactiveDocuments();\n\n      return this._window._sessionHistory.length;\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      this._guardAgainstInactiveDocuments();\n\n      return this._state;\n    }\n  }]);\n\n  return HistoryImpl;\n}();","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/window/History-impl.js"],"names":["DOMException","require","documentBaseURLSerialized","parseURLToResultingURLRecord","exports","implementation","args","privateData","_window","window","_document","document","_actAsIfLocationReloadCalled","actAsIfLocationReloadCalled","_state","delta","_guardAgainstInactiveDocuments","_sessionHistory","traverseByDelta","go","data","title","url","_sharedPushAndReplaceState","methodName","newURL","scheme","_URL","username","password","host","port","cannotBeABaseURL","currentEntry","removeAllEntriesAfterCurrentEntry","clearHistoryTraversalTasks","newEntry","stateObject","addEntryAfterCurrentEntry","updateCurrentEntry","_latestEntry","length"],"mappings":"AAAA;;;;;;AACA,IAAMA,YAAY,GAAGC,OAAO,CAAC,cAAD,CAA5B;;eACoEA,OAAO,CAAC,iCAAD,C;IAAnEC,yB,YAAAA,yB;IAA2BC,4B,YAAAA,4B,EAEnC;;;AACAC,OAAO,CAACC,cAAR;AACE,uBAAYC,IAAZ,EAAkBC,WAAlB,EAA+B;AAAA;;AAC7B,SAAKC,OAAL,GAAeD,WAAW,CAACE,MAA3B;AACA,SAAKC,SAAL,GAAiBH,WAAW,CAACI,QAA7B;AACA,SAAKC,4BAAL,GAAoCL,WAAW,CAACM,2BAAhD;AACA,SAAKC,MAAL,GAAc,IAAd;AACD;;AANH;AAAA;AAAA,qDAQmC;AAC/B,UAAI,CAAC,KAAKN,OAAV,EAAmB;AACjB,cAAM,IAAIR,YAAJ,CAAiB,wEAAjB,EAA2F,eAA3F,CAAN;AACD;AACF;AAZH;AAAA;AAAA,uBA0BKe,KA1BL,EA0BY;AACR,WAAKC,8BAAL;;AAEA,UAAID,KAAK,KAAK,CAAd,EAAiB;AACf;AACA;AACA,aAAKH,4BAAL;AACD,OAJD,MAIO;AACL;AACA,aAAKJ,OAAL,CAAaS,eAAb,CAA6BC,eAA7B,CAA6CH,KAA7C;AACD;AACF;AArCH;AAAA;AAAA,2BAuCS;AACL,WAAKI,EAAL,CAAQ,CAAC,CAAT;AACD;AAzCH;AAAA;AAAA,8BA2CY;AACR,WAAKA,EAAL,CAAQ,CAAC,CAAT;AACD;AA7CH;AAAA;AAAA,8BA+CYC,IA/CZ,EA+CkBC,KA/ClB,EA+CyBC,GA/CzB,EA+C8B;AAC1B,WAAKC,0BAAL,CAAgCH,IAAhC,EAAsCC,KAAtC,EAA6CC,GAA7C,EAAkD,WAAlD;AACD;AAjDH;AAAA;AAAA,iCAkDeF,IAlDf,EAkDqBC,KAlDrB,EAkD4BC,GAlD5B,EAkDiC;AAC7B,WAAKC,0BAAL,CAAgCH,IAAhC,EAAsCC,KAAtC,EAA6CC,GAA7C,EAAkD,cAAlD;AACD,KApDH,CAsDE;;AAtDF;AAAA;AAAA,+CAuD6BF,IAvD7B,EAuDmCC,KAvDnC,EAuD0CC,GAvD1C,EAuD+CE,UAvD/C,EAuD2D;AACvD,WAAKR,8BAAL,GADuD,CAGvD;;;AAEA,UAAIS,MAAJ;;AACA,UAAIH,GAAG,KAAK,IAAZ,EAAkB;AAChB;AACA;AACAG,QAAAA,MAAM,GAAGtB,4BAA4B,CAACmB,GAAD,EAAM,KAAKZ,SAAX,CAArC;;AAEA,YAAIe,MAAM,KAAK,IAAf,EAAqB;AACnB,gBAAM,IAAIzB,YAAJ,CAAiB,yCAAiCsB,GAAjC,mBAA4CE,UAA5C,sCACAtB,yBAAyB,CAAC,KAAKQ,SAAN,CADzB,QAAjB,EACgE,eADhE,CAAN;AAED;;AAED,YAAIe,MAAM,CAACC,MAAP,KAAkB,KAAKhB,SAAL,CAAeiB,IAAf,CAAoBD,MAAtC,IACAD,MAAM,CAACG,QAAP,KAAoB,KAAKlB,SAAL,CAAeiB,IAAf,CAAoBC,QADxC,IAEAH,MAAM,CAACI,QAAP,KAAoB,KAAKnB,SAAL,CAAeiB,IAAf,CAAoBE,QAFxC,IAGAJ,MAAM,CAACK,IAAP,KAAgB,KAAKpB,SAAL,CAAeiB,IAAf,CAAoBG,IAHpC,IAIAL,MAAM,CAACM,IAAP,KAAgB,KAAKrB,SAAL,CAAeiB,IAAf,CAAoBI,IAJpC,IAKAN,MAAM,CAACO,gBAAP,KAA4B,KAAKtB,SAAL,CAAeiB,IAAf,CAAoBK,gBALpD,EAKsE;AACpE,gBAAM,IAAIhC,YAAJ,CAAiB,UAAGwB,UAAH,6GAAjB,EAC6D,eAD7D,CAAN;AAED,SAlBe,CAoBhB;;AACD,OArBD,MAqBO;AACLC,QAAAA,MAAM,GAAG,KAAKjB,OAAL,CAAaS,eAAb,CAA6BgB,YAA7B,CAA0CX,GAAnD;AACD;;AAED,UAAIE,UAAU,KAAK,WAAnB,EAAgC;AAC9B,aAAKhB,OAAL,CAAaS,eAAb,CAA6BiB,iCAA7B;;AAEA,aAAK1B,OAAL,CAAaS,eAAb,CAA6BkB,0BAA7B;;AAEA,YAAMC,QAAQ,GAAG;AACfzB,UAAAA,QAAQ,EAAE,KAAKD,SADA;AAEf2B,UAAAA,WAAW,EAAEjB,IAFE;AAGfC,UAAAA,KAAK,EAALA,KAHe;AAIfC,UAAAA,GAAG,EAAEG;AAJU,SAAjB;;AAMA,aAAKjB,OAAL,CAAaS,eAAb,CAA6BqB,yBAA7B,CAAuDF,QAAvD;;AACA,aAAK5B,OAAL,CAAaS,eAAb,CAA6BsB,kBAA7B,CAAgDH,QAAhD;AACD,OAbD,MAaO;AAAA,YACGH,YADH,GACoB,KAAKzB,OAAL,CAAaS,eADjC,CACGgB,YADH;AAELA,QAAAA,YAAY,CAACI,WAAb,GAA2BjB,IAA3B;AACAa,QAAAA,YAAY,CAACZ,KAAb,GAAqBA,KAArB;AACAY,QAAAA,YAAY,CAACX,GAAb,GAAmBG,MAAnB;AACD,OAjDsD,CAmDvD;AACA;AACA;;;AAEA,WAAKf,SAAL,CAAeiB,IAAf,GAAsBF,MAAtB,CAvDuD,CAyDvD;AACA;;AACA,WAAKX,MAAL,GAAcM,IAAd,CA3DuD,CA2DnC;;AACpB,WAAKV,SAAL,CAAe8B,YAAf,GAA8B,KAAKhC,OAAL,CAAaS,eAAb,CAA6BgB,YAA3D;AACD;AApHH;AAAA;AAAA,wBAce;AACX,WAAKjB,8BAAL;;AAEA,aAAO,KAAKR,OAAL,CAAaS,eAAb,CAA6BwB,MAApC;AACD;AAlBH;AAAA;AAAA,wBAoBc;AACV,WAAKzB,8BAAL;;AAEA,aAAO,KAAKF,MAAZ;AACD;AAxBH;;AAAA;AAAA","sourcesContent":["\"use strict\";\nconst DOMException = require(\"domexception\");\nconst { documentBaseURLSerialized, parseURLToResultingURLRecord } = require(\"../helpers/document-base-url.js\");\n\n// https://html.spec.whatwg.org/#history-3\nexports.implementation = class HistoryImpl {\n  constructor(args, privateData) {\n    this._window = privateData.window;\n    this._document = privateData.document;\n    this._actAsIfLocationReloadCalled = privateData.actAsIfLocationReloadCalled;\n    this._state = null;\n  }\n\n  _guardAgainstInactiveDocuments() {\n    if (!this._window) {\n      throw new DOMException(\"History object is associated with a document that is not fully active.\", \"SecurityError\");\n    }\n  }\n\n  get length() {\n    this._guardAgainstInactiveDocuments();\n\n    return this._window._sessionHistory.length;\n  }\n\n  get state() {\n    this._guardAgainstInactiveDocuments();\n\n    return this._state;\n  }\n\n  go(delta) {\n    this._guardAgainstInactiveDocuments();\n\n    if (delta === 0) {\n      // When the go(delta) method is invoked, if delta is zero, the user agent must act as\n      // if the location.reload() method was called instead.\n      this._actAsIfLocationReloadCalled();\n    } else {\n      // Otherwise, the user agent must traverse the history by a delta whose value is delta\n      this._window._sessionHistory.traverseByDelta(delta);\n    }\n  }\n\n  back() {\n    this.go(-1);\n  }\n\n  forward() {\n    this.go(+1);\n  }\n\n  pushState(data, title, url) {\n    this._sharedPushAndReplaceState(data, title, url, \"pushState\");\n  }\n  replaceState(data, title, url) {\n    this._sharedPushAndReplaceState(data, title, url, \"replaceState\");\n  }\n\n  // https://html.spec.whatwg.org/#dom-history-pushstate\n  _sharedPushAndReplaceState(data, title, url, methodName) {\n    this._guardAgainstInactiveDocuments();\n\n    // TODO structured clone data\n\n    let newURL;\n    if (url !== null) {\n      // Not implemented: use of entry settings object's API base URL. Instead we just use the document base URL. The\n      // difference matters in the case of cross-frame calls.\n      newURL = parseURLToResultingURLRecord(url, this._document);\n\n      if (newURL === null) {\n        throw new DOMException(`Could not parse url argument \"${url}\" to ${methodName} ` +\n          `against base URL \"${documentBaseURLSerialized(this._document)}\".`, \"SecurityError\");\n      }\n\n      if (newURL.scheme !== this._document._URL.scheme ||\n          newURL.username !== this._document._URL.username ||\n          newURL.password !== this._document._URL.password ||\n          newURL.host !== this._document._URL.host ||\n          newURL.port !== this._document._URL.port ||\n          newURL.cannotBeABaseURL !== this._document._URL.cannotBeABaseURL) {\n        throw new DOMException(`${methodName} cannot update history to a URL which ` +\n          `differs in components other than in path, query, or fragment.`, \"SecurityError\");\n      }\n\n      // Not implemented: origin check (seems to only apply to documents with weird origins, e.g. sandboxed ones)\n    } else {\n      newURL = this._window._sessionHistory.currentEntry.url;\n    }\n\n    if (methodName === \"pushState\") {\n      this._window._sessionHistory.removeAllEntriesAfterCurrentEntry();\n\n      this._window._sessionHistory.clearHistoryTraversalTasks();\n\n      const newEntry = {\n        document: this._document,\n        stateObject: data,\n        title,\n        url: newURL\n      };\n      this._window._sessionHistory.addEntryAfterCurrentEntry(newEntry);\n      this._window._sessionHistory.updateCurrentEntry(newEntry);\n    } else {\n      const { currentEntry } = this._window._sessionHistory;\n      currentEntry.stateObject = data;\n      currentEntry.title = title;\n      currentEntry.url = newURL;\n    }\n\n    // TODO: If the current entry in the session history represents a non-GET request\n    // (e.g. it was the result of a POST submission) then update it to instead represent\n    // a GET request.\n\n    this._document._URL = newURL;\n\n    // arguably it's a bit odd that the state and latestEntry do not belong to the SessionHistory\n    // but the spec gives them to \"History\" and \"Document\" respecively.\n    this._state = data; // TODO clone again!! O_o\n    this._document._latestEntry = this._window._sessionHistory.currentEntry;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}