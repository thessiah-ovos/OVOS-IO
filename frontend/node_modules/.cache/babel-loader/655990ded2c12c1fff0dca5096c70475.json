{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar DOMException = require(\"domexception\");\n\nvar idlUtils = require(\"../generated/utils\");\n\nvar _require = require(\"../helpers/svg/basic-types\"),\n    attach = _require.attach,\n    detach = _require.detach; // https://svgwg.org/svg2-draft/types.html#ListInterfaces\n// Child classes must implement _reserialize()\n\n\nvar List = /*#__PURE__*/function () {\n  function List() {\n    _classCallCheck(this, List);\n  }\n\n  _createClass(List, [{\n    key: \"_initList\",\n    value: function _initList(_ref) {\n      var element = _ref.element,\n          attribute = _ref.attribute,\n          _ref$readOnly = _ref.readOnly,\n          readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly;\n      this._element = element;\n      this._attribute = attribute;\n      this._attributeRegistryEntry = element.constructor.attributeRegistry.get(attribute);\n      this._readOnly = readOnly;\n      this._list = [];\n      this._version = -1;\n    }\n  }, {\n    key: \"_synchronize\",\n    value: function _synchronize() {\n      if (!this._needsResync) {\n        return;\n      }\n\n      var value = [];\n\n      if (this._element.hasAttribute(this._attribute)) {\n        value = this._attributeRegistryEntry.getValue(this._element.getAttribute(this._attribute));\n      }\n\n      if (value.length === 0 && this._attributeRegistryEntry.initialValue !== undefined) {\n        value = this._attributeRegistryEntry.getValue(this._attributeRegistryEntry.initialValue);\n      } // TODO: support non-DOMString lists.\n\n\n      this._list = value;\n      this._version = this._element._version;\n    }\n  }, {\n    key: \"_reserialize\",\n    value: function _reserialize() {\n      var elements = this._list;\n\n      this._element.setAttribute(this._attribute, this._attributeRegistryEntry.serialize(elements)); // Prevent ping-ponging back and forth between _reserialize() and _synchronize().\n\n\n      this._version = this._element._version;\n    }\n  }, {\n    key: idlUtils.supportsPropertyIndex,\n    value: function value(index) {\n      this._synchronize();\n\n      return index >= 0 && index < this.length;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._synchronize();\n\n      if (this._readOnly) {\n        throw new DOMException(\"Attempting to modify a read-only list\", \"NoModificationAllowedError\");\n      }\n\n      var _iterator = _createForOfIteratorHelper(this._list),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n          detach(item);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this._list.length = 0;\n\n      this._reserialize();\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize(newItem) {\n      this._synchronize();\n\n      if (this._readOnly) {\n        throw new DOMException(\"Attempting to modify a read-only list\", \"NoModificationAllowedError\");\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(this._list),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          detach(item);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      this._list.length = 0; // TODO: clone non-DOMString list elements.\n\n      attach(newItem, this);\n\n      this._list.push(newItem);\n\n      this._reserialize();\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(index) {\n      this._synchronize();\n\n      if (index >= this._list.length) {\n        throw new DOMException(\"The index provided (\".concat(index, \") is greater than or equal to the maximum bound (\").concat(this._list.length, \").\"), \"IndexSizeError\");\n      }\n\n      return this._list[index];\n    }\n  }, {\n    key: \"insertItemBefore\",\n    value: function insertItemBefore(newItem, index) {\n      this._synchronize();\n\n      if (this._readOnly) {\n        throw new DOMException(\"Attempting to modify a read-only list\", \"NoModificationAllowedError\");\n      } // TODO: clone non-DOMString list elements.\n\n\n      if (index > this._list.length) {\n        index = this._list.length;\n      }\n\n      this._list.splice(index, 0, newItem);\n\n      attach(newItem, this);\n\n      this._reserialize();\n\n      return newItem;\n    }\n  }, {\n    key: \"replaceItem\",\n    value: function replaceItem(newItem, index) {\n      this._synchronize();\n\n      if (this._readOnly) {\n        throw new DOMException(\"Attempting to modify a read-only list\", \"NoModificationAllowedError\");\n      }\n\n      if (index >= this._list.length) {\n        throw new DOMException(\"The index provided (\".concat(index, \") is greater than or equal to the maximum bound (\").concat(this._list.length, \").\"), \"IndexSizeError\");\n      } // TODO: clone non-DOMString list elements.\n\n\n      detach(this._list[index]);\n      this._list[index] = newItem;\n      attach(newItem, this);\n\n      this._reserialize();\n\n      return newItem;\n    }\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(index) {\n      this._synchronize();\n\n      if (this._readOnly) {\n        throw new DOMException(\"Attempting to modify a read-only list\", \"NoModificationAllowedError\");\n      }\n\n      if (index >= this._list.length) {\n        throw new DOMException(\"The index provided (\".concat(index, \") is greater than or equal to the maximum bound (\").concat(this._list.length, \").\"), \"IndexSizeError\");\n      }\n\n      var item = this._list[index];\n      detach(item);\n\n      this._list.splice(index, 1);\n\n      this._reserialize();\n\n      return item;\n    }\n  }, {\n    key: \"appendItem\",\n    value: function appendItem(newItem) {\n      this._synchronize(); // TODO: clone non-DOMString list elements.\n\n\n      this._list.push(newItem);\n\n      attach(newItem, this);\n\n      this._reserialize();\n\n      return newItem;\n    }\n  }, {\n    key: idlUtils.indexedSetNew,\n    value: function value(index, _value) {\n      // Note: this will always throw a IndexSizeError.\n      this.replaceItem(_value, index);\n    }\n  }, {\n    key: idlUtils.indexedSetExisting,\n    value: function value(index, _value2) {\n      this.replaceItem(_value2, index);\n    }\n  }, {\n    key: \"_needsResync\",\n    get: function get() {\n      return this._version < this._element._version;\n    }\n  }, {\n    key: idlUtils.supportedPropertyIndices,\n    get: function get() {\n      this._synchronize();\n\n      return this._list.keys();\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      this._synchronize();\n\n      return this._list.length;\n    }\n  }, {\n    key: \"numberOfItems\",\n    get: function get() {\n      this._synchronize();\n\n      return this._list.length;\n    }\n  }]);\n\n  return List;\n}();\n\nmodule.exports = List;","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/svg/SVGListBase.js"],"names":["DOMException","require","idlUtils","attach","detach","List","element","attribute","readOnly","_element","_attribute","_attributeRegistryEntry","constructor","attributeRegistry","get","_readOnly","_list","_version","_needsResync","value","hasAttribute","getValue","getAttribute","length","initialValue","undefined","elements","setAttribute","serialize","supportsPropertyIndex","index","_synchronize","item","_reserialize","newItem","push","splice","indexedSetNew","replaceItem","indexedSetExisting","supportedPropertyIndices","keys","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst DOMException = require(\"domexception\");\nconst idlUtils = require(\"../generated/utils\");\nconst { attach, detach } = require(\"../helpers/svg/basic-types\");\n\n// https://svgwg.org/svg2-draft/types.html#ListInterfaces\n\n// Child classes must implement _reserialize()\nclass List {\n  _initList({\n    element,\n    attribute,\n    readOnly = false\n  }) {\n    this._element = element;\n    this._attribute = attribute;\n    this._attributeRegistryEntry = element.constructor.attributeRegistry.get(attribute);\n    this._readOnly = readOnly;\n    this._list = [];\n    this._version = -1;\n  }\n\n  get _needsResync() {\n    return this._version < this._element._version;\n  }\n\n  _synchronize() {\n    if (!this._needsResync) {\n      return;\n    }\n    let value = [];\n    if (this._element.hasAttribute(this._attribute)) {\n      value = this._attributeRegistryEntry.getValue(this._element.getAttribute(this._attribute));\n    }\n    if (value.length === 0 && this._attributeRegistryEntry.initialValue !== undefined) {\n      value = this._attributeRegistryEntry.getValue(this._attributeRegistryEntry.initialValue);\n    }\n    // TODO: support non-DOMString lists.\n    this._list = value;\n    this._version = this._element._version;\n  }\n\n  _reserialize() {\n    const elements = this._list;\n    this._element.setAttribute(this._attribute, this._attributeRegistryEntry.serialize(elements));\n    // Prevent ping-ponging back and forth between _reserialize() and _synchronize().\n    this._version = this._element._version;\n  }\n\n  [idlUtils.supportsPropertyIndex](index) {\n    this._synchronize();\n    return index >= 0 && index < this.length;\n  }\n\n  get [idlUtils.supportedPropertyIndices]() {\n    this._synchronize();\n    return this._list.keys();\n  }\n\n  get length() {\n    this._synchronize();\n    return this._list.length;\n  }\n\n  get numberOfItems() {\n    this._synchronize();\n    return this._list.length;\n  }\n\n  clear() {\n    this._synchronize();\n    if (this._readOnly) {\n      throw new DOMException(\"Attempting to modify a read-only list\", \"NoModificationAllowedError\");\n    }\n    for (const item of this._list) {\n      detach(item);\n    }\n    this._list.length = 0;\n    this._reserialize();\n  }\n\n  initialize(newItem) {\n    this._synchronize();\n    if (this._readOnly) {\n      throw new DOMException(\"Attempting to modify a read-only list\", \"NoModificationAllowedError\");\n    }\n    for (const item of this._list) {\n      detach(item);\n    }\n    this._list.length = 0;\n    // TODO: clone non-DOMString list elements.\n    attach(newItem, this);\n    this._list.push(newItem);\n    this._reserialize();\n  }\n\n  getItem(index) {\n    this._synchronize();\n    if (index >= this._list.length) {\n      throw new DOMException(\n        `The index provided (${index}) is greater than or equal to the maximum bound (${this._list.length}).`,\n        \"IndexSizeError\"\n      );\n    }\n    return this._list[index];\n  }\n\n  insertItemBefore(newItem, index) {\n    this._synchronize();\n    if (this._readOnly) {\n      throw new DOMException(\"Attempting to modify a read-only list\", \"NoModificationAllowedError\");\n    }\n    // TODO: clone non-DOMString list elements.\n    if (index > this._list.length) {\n      index = this._list.length;\n    }\n    this._list.splice(index, 0, newItem);\n    attach(newItem, this);\n    this._reserialize();\n    return newItem;\n  }\n\n  replaceItem(newItem, index) {\n    this._synchronize();\n    if (this._readOnly) {\n      throw new DOMException(\"Attempting to modify a read-only list\", \"NoModificationAllowedError\");\n    }\n    if (index >= this._list.length) {\n      throw new DOMException(\n        `The index provided (${index}) is greater than or equal to the maximum bound (${this._list.length}).`,\n        \"IndexSizeError\"\n      );\n    }\n    // TODO: clone non-DOMString list elements.\n    detach(this._list[index]);\n    this._list[index] = newItem;\n    attach(newItem, this);\n    this._reserialize();\n    return newItem;\n  }\n\n  removeItem(index) {\n    this._synchronize();\n    if (this._readOnly) {\n      throw new DOMException(\"Attempting to modify a read-only list\", \"NoModificationAllowedError\");\n    }\n    if (index >= this._list.length) {\n      throw new DOMException(\n        `The index provided (${index}) is greater than or equal to the maximum bound (${this._list.length}).`,\n        \"IndexSizeError\"\n      );\n    }\n    const item = this._list[index];\n    detach(item);\n    this._list.splice(index, 1);\n    this._reserialize();\n    return item;\n  }\n\n  appendItem(newItem) {\n    this._synchronize();\n    // TODO: clone non-DOMString list elements.\n    this._list.push(newItem);\n    attach(newItem, this);\n    this._reserialize();\n    return newItem;\n  }\n\n  [idlUtils.indexedSetNew](index, value) {\n    // Note: this will always throw a IndexSizeError.\n    this.replaceItem(value, index);\n  }\n\n  [idlUtils.indexedSetExisting](index, value) {\n    this.replaceItem(value, index);\n  }\n}\n\nmodule.exports = List;\n"]},"metadata":{},"sourceType":"script"}