{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar DocumentType = require(\"../living/generated/DocumentType\");\n\nvar DocumentFragment = require(\"../living/generated/DocumentFragment\");\n\nvar Text = require(\"../living/generated/Text\");\n\nvar Comment = require(\"../living/generated/Comment\");\n\nvar attributes = require(\"../living/attributes\");\n\nvar nodeTypes = require(\"../living/node-type\");\n\nvar serializationAdapter = require(\"./parse5-adapter-serialization\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function JSDOMParse5Adapter(documentImpl) {\n    _classCallCheck(this, JSDOMParse5Adapter);\n\n    this._documentImpl = documentImpl;\n  }\n\n  _createClass(JSDOMParse5Adapter, [{\n    key: \"createDocument\",\n    value: function createDocument() {\n      // parse5's model assumes that parse(html) will call into here to create the new Document, then return it. However,\n      // jsdom's model assumes we can create a Window (and through that create an empty Document), do some other setup\n      // stuff, and then parse, stuffing nodes into that Document as we go. So to adapt between these two models, we just\n      // return the already-created Document when asked by parse5 to \"create\" a Document.\n      return this._documentImpl;\n    }\n  }, {\n    key: \"createDocumentFragment\",\n    value: function createDocumentFragment() {\n      return DocumentFragment.createImpl([], {\n        ownerDocument: this._documentImpl\n      });\n    }\n  }, {\n    key: \"createElement\",\n    value: function createElement(localName, namespace, attrs) {\n      var element = this._documentImpl._createElementWithCorrectElementInterface(localName, namespace);\n\n      element._namespaceURI = namespace;\n      this.adoptAttributes(element, attrs);\n\n      if (\"_parserInserted\" in element) {\n        element._parserInserted = true;\n      }\n\n      return element;\n    }\n  }, {\n    key: \"createCommentNode\",\n    value: function createCommentNode(data) {\n      return Comment.createImpl([], {\n        data: data,\n        ownerDocument: this._documentImpl\n      });\n    }\n  }, {\n    key: \"appendChild\",\n    value: function appendChild(parentNode, newNode) {\n      parentNode.appendChild(newNode);\n    }\n  }, {\n    key: \"insertBefore\",\n    value: function insertBefore(parentNode, newNode, referenceNode) {\n      parentNode.insertBefore(newNode, referenceNode);\n    }\n  }, {\n    key: \"setTemplateContent\",\n    value: function setTemplateContent(templateElement, contentFragment) {\n      templateElement._templateContents = contentFragment;\n    }\n  }, {\n    key: \"setDocumentType\",\n    value: function setDocumentType(document, name, publicId, systemId) {\n      // parse5 sometimes gives us these as null.\n      if (name === null) {\n        name = \"\";\n      }\n\n      if (publicId === null) {\n        publicId = \"\";\n      }\n\n      if (systemId === null) {\n        systemId = \"\";\n      }\n\n      var documentType = DocumentType.createImpl([], {\n        name: name,\n        publicId: publicId,\n        systemId: systemId,\n        ownerDocument: this._documentImpl\n      });\n      document.appendChild(documentType);\n    }\n  }, {\n    key: \"setDocumentMode\",\n    value: function setDocumentMode(document, mode) {\n      // TODO: the rest of jsdom ignores this\n      document._mode = mode;\n    }\n  }, {\n    key: \"detachNode\",\n    value: function detachNode(node) {\n      node.remove();\n    }\n  }, {\n    key: \"insertText\",\n    value: function insertText(parentNode, text) {\n      var lastChild = parentNode.lastChild;\n\n      if (lastChild && lastChild.nodeType === nodeTypes.TEXT_NODE) {\n        lastChild.data += text;\n      } else {\n        var textNode = Text.createImpl([], {\n          data: text,\n          ownerDocument: this._documentImpl\n        });\n        parentNode.appendChild(textNode);\n      }\n    }\n  }, {\n    key: \"insertTextBefore\",\n    value: function insertTextBefore(parentNode, text, referenceNode) {\n      var previousSibling = referenceNode.previousSibling;\n\n      if (previousSibling && previousSibling.nodeType === nodeTypes.TEXT_NODE) {\n        previousSibling.data += text;\n      } else {\n        var textNode = Text.createImpl([], {\n          data: text,\n          ownerDocument: this._documentImpl\n        });\n        parentNode.insertBefore(textNode, referenceNode);\n      }\n    }\n  }, {\n    key: \"adoptAttributes\",\n    value: function adoptAttributes(element, attrs) {\n      var _iterator = _createForOfIteratorHelper(attrs),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var attr = _step.value;\n          var prefix = attr.prefix === \"\" ? null : attr.prefix;\n          attributes.setAttributeValue(element, attr.name, attr.value, prefix, attr.namespace);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }]);\n\n  return JSDOMParse5Adapter;\n}();\n\nObject.assign(module.exports.prototype, serializationAdapter);","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/browser/parse5-adapter-parsing.js"],"names":["DocumentType","require","DocumentFragment","Text","Comment","attributes","nodeTypes","serializationAdapter","module","exports","documentImpl","_documentImpl","createImpl","ownerDocument","localName","namespace","attrs","element","_createElementWithCorrectElementInterface","_namespaceURI","adoptAttributes","_parserInserted","data","parentNode","newNode","appendChild","referenceNode","insertBefore","templateElement","contentFragment","_templateContents","document","name","publicId","systemId","documentType","mode","_mode","node","remove","text","lastChild","nodeType","TEXT_NODE","textNode","previousSibling","attr","prefix","setAttributeValue","value","Object","assign","prototype"],"mappings":"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","sourcesContent":["\"use strict\";\nconst DocumentType = require(\"../living/generated/DocumentType\");\nconst DocumentFragment = require(\"../living/generated/DocumentFragment\");\nconst Text = require(\"../living/generated/Text\");\nconst Comment = require(\"../living/generated/Comment\");\nconst attributes = require(\"../living/attributes\");\nconst nodeTypes = require(\"../living/node-type\");\nconst serializationAdapter = require(\"./parse5-adapter-serialization\");\n\nmodule.exports = class JSDOMParse5Adapter {\n  constructor(documentImpl) {\n    this._documentImpl = documentImpl;\n  }\n\n  createDocument() {\n    // parse5's model assumes that parse(html) will call into here to create the new Document, then return it. However,\n    // jsdom's model assumes we can create a Window (and through that create an empty Document), do some other setup\n    // stuff, and then parse, stuffing nodes into that Document as we go. So to adapt between these two models, we just\n    // return the already-created Document when asked by parse5 to \"create\" a Document.\n    return this._documentImpl;\n  }\n\n  createDocumentFragment() {\n    return DocumentFragment.createImpl([], { ownerDocument: this._documentImpl });\n  }\n\n  createElement(localName, namespace, attrs) {\n    const element = this._documentImpl._createElementWithCorrectElementInterface(localName, namespace);\n    element._namespaceURI = namespace;\n    this.adoptAttributes(element, attrs);\n\n    if (\"_parserInserted\" in element) {\n      element._parserInserted = true;\n    }\n\n    return element;\n  }\n\n  createCommentNode(data) {\n    return Comment.createImpl([], { data, ownerDocument: this._documentImpl });\n  }\n\n  appendChild(parentNode, newNode) {\n    parentNode.appendChild(newNode);\n  }\n\n  insertBefore(parentNode, newNode, referenceNode) {\n    parentNode.insertBefore(newNode, referenceNode);\n  }\n\n  setTemplateContent(templateElement, contentFragment) {\n    templateElement._templateContents = contentFragment;\n  }\n\n  setDocumentType(document, name, publicId, systemId) {\n    // parse5 sometimes gives us these as null.\n    if (name === null) {\n      name = \"\";\n    }\n    if (publicId === null) {\n      publicId = \"\";\n    }\n    if (systemId === null) {\n      systemId = \"\";\n    }\n\n    const documentType = DocumentType.createImpl([], { name, publicId, systemId, ownerDocument: this._documentImpl });\n    document.appendChild(documentType);\n  }\n\n  setDocumentMode(document, mode) {\n    // TODO: the rest of jsdom ignores this\n    document._mode = mode;\n  }\n\n  detachNode(node) {\n    node.remove();\n  }\n\n  insertText(parentNode, text) {\n    const { lastChild } = parentNode;\n    if (lastChild && lastChild.nodeType === nodeTypes.TEXT_NODE) {\n      lastChild.data += text;\n    } else {\n      const textNode = Text.createImpl([], { data: text, ownerDocument: this._documentImpl });\n\n      parentNode.appendChild(textNode);\n    }\n  }\n\n  insertTextBefore(parentNode, text, referenceNode) {\n    const { previousSibling } = referenceNode;\n    if (previousSibling && previousSibling.nodeType === nodeTypes.TEXT_NODE) {\n      previousSibling.data += text;\n    } else {\n      const textNode = Text.createImpl([], { data: text, ownerDocument: this._documentImpl });\n\n      parentNode.insertBefore(textNode, referenceNode);\n    }\n  }\n\n  adoptAttributes(element, attrs) {\n    for (const attr of attrs) {\n      const prefix = attr.prefix === \"\" ? null : attr.prefix;\n      attributes.setAttributeValue(element, attr.name, attr.value, prefix, attr.namespace);\n    }\n  }\n};\n\nObject.assign(module.exports.prototype, serializationAdapter);\n"]},"metadata":{},"sourceType":"script"}