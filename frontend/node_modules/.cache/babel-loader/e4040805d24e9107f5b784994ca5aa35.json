{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar TREE = Symbol();\nvar ROOT = Symbol();\nvar NEXT = Symbol();\nvar ITERATE_FUNC = Symbol();\n\nvar TreeIterator = /*#__PURE__*/function () {\n  function TreeIterator(tree, root, firstResult, iterateFunction) {\n    _classCallCheck(this, TreeIterator);\n\n    this[TREE] = tree;\n    this[ROOT] = root;\n    this[NEXT] = firstResult;\n    this[ITERATE_FUNC] = iterateFunction;\n  }\n\n  _createClass(TreeIterator, [{\n    key: \"next\",\n    value: function next() {\n      var tree = this[TREE];\n      var iterateFunc = this[ITERATE_FUNC];\n      var root = this[ROOT];\n\n      if (!this[NEXT]) {\n        return {\n          done: true,\n          value: root\n        };\n      }\n\n      var value = this[NEXT];\n\n      if (iterateFunc === 1) {\n        this[NEXT] = tree._node(value).previousSibling;\n      } else if (iterateFunc === 2) {\n        this[NEXT] = tree._node(value).nextSibling;\n      } else if (iterateFunc === 3) {\n        this[NEXT] = tree._node(value).parent;\n      } else if (iterateFunc === 4) {\n        this[NEXT] = tree.preceding(value, {\n          root: root\n        });\n      } else\n        /* if (iterateFunc === 5)*/\n        {\n          this[NEXT] = tree.following(value, {\n            root: root\n          });\n        }\n\n      return {\n        done: false,\n        value: value\n      };\n    }\n  }]);\n\n  return TreeIterator;\n}();\n\nObject.defineProperty(TreeIterator.prototype, Symbol.iterator, {\n  value: function value() {\n    return this;\n  },\n  writable: false\n});\nTreeIterator.PREV = 1;\nTreeIterator.NEXT = 2;\nTreeIterator.PARENT = 3;\nTreeIterator.PRECEDING = 4;\nTreeIterator.FOLLOWING = 5;\nObject.freeze(TreeIterator);\nObject.freeze(TreeIterator.prototype);\nmodule.exports = TreeIterator;","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/symbol-tree/lib/TreeIterator.js"],"names":["TREE","Symbol","ROOT","NEXT","ITERATE_FUNC","TreeIterator","tree","root","firstResult","iterateFunction","iterateFunc","done","value","_node","previousSibling","nextSibling","parent","preceding","following","Object","defineProperty","prototype","iterator","writable","PREV","PARENT","PRECEDING","FOLLOWING","freeze","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAMA,IAAI,GAAGC,MAAM,EAAnB;AACA,IAAMC,IAAI,GAAGD,MAAM,EAAnB;AACA,IAAME,IAAI,GAAGF,MAAM,EAAnB;AACA,IAAMG,YAAY,GAAGH,MAAM,EAA3B;;IAEMI,Y;AACE,wBAAYC,IAAZ,EAAkBC,IAAlB,EAAwBC,WAAxB,EAAqCC,eAArC,EAAsD;AAAA;;AAC9C,SAAKT,IAAL,IAAaM,IAAb;AACA,SAAKJ,IAAL,IAAaK,IAAb;AACA,SAAKJ,IAAL,IAAaK,WAAb;AACA,SAAKJ,YAAL,IAAqBK,eAArB;AACP;;;;2BAEM;AACC,UAAMH,IAAI,GAAG,KAAKN,IAAL,CAAb;AACA,UAAMU,WAAW,GAAG,KAAKN,YAAL,CAApB;AACA,UAAMG,IAAI,GAAG,KAAKL,IAAL,CAAb;;AAEA,UAAI,CAAC,KAAKC,IAAL,CAAL,EAAiB;AACT,eAAO;AACCQ,UAAAA,IAAI,EAAE,IADP;AAECC,UAAAA,KAAK,EAAEL;AAFR,SAAP;AAIP;;AAED,UAAMK,KAAK,GAAG,KAAKT,IAAL,CAAd;;AAEA,UAAIO,WAAW,KAAK,CAApB,EAAuB;AACf,aAAKP,IAAL,IAAaG,IAAI,CAACO,KAAL,CAAWD,KAAX,EAAkBE,eAA/B;AACP,OAFD,MAGK,IAAIJ,WAAW,KAAK,CAApB,EAAuB;AACpB,aAAKP,IAAL,IAAaG,IAAI,CAACO,KAAL,CAAWD,KAAX,EAAkBG,WAA/B;AACP,OAFI,MAGA,IAAIL,WAAW,KAAK,CAApB,EAAuB;AACpB,aAAKP,IAAL,IAAaG,IAAI,CAACO,KAAL,CAAWD,KAAX,EAAkBI,MAA/B;AACP,OAFI,MAGA,IAAIN,WAAW,KAAK,CAApB,EAAuB;AACpB,aAAKP,IAAL,IAAaG,IAAI,CAACW,SAAL,CAAeL,KAAf,EAAsB;AAACL,UAAAA,IAAI,EAAEA;AAAP,SAAtB,CAAb;AACP,OAFI;AAGA;AAA4B;AACzB,eAAKJ,IAAL,IAAaG,IAAI,CAACY,SAAL,CAAeN,KAAf,EAAsB;AAACL,YAAAA,IAAI,EAAEA;AAAP,WAAtB,CAAb;AACP;;AAED,aAAO;AACCI,QAAAA,IAAI,EAAE,KADP;AAECC,QAAAA,KAAK,EAAEA;AAFR,OAAP;AAIP;;;;;;AAGTO,MAAM,CAACC,cAAP,CAAsBf,YAAY,CAACgB,SAAnC,EAA8CpB,MAAM,CAACqB,QAArD,EAA+D;AACvDV,EAAAA,KAAK,EAAE,iBAAW;AACV,WAAO,IAAP;AACP,GAHsD;AAIvDW,EAAAA,QAAQ,EAAE;AAJ6C,CAA/D;AAOAlB,YAAY,CAACmB,IAAb,GAAoB,CAApB;AACAnB,YAAY,CAACF,IAAb,GAAoB,CAApB;AACAE,YAAY,CAACoB,MAAb,GAAsB,CAAtB;AACApB,YAAY,CAACqB,SAAb,GAAyB,CAAzB;AACArB,YAAY,CAACsB,SAAb,GAAyB,CAAzB;AAEAR,MAAM,CAACS,MAAP,CAAcvB,YAAd;AACAc,MAAM,CAACS,MAAP,CAAcvB,YAAY,CAACgB,SAA3B;AAEAQ,MAAM,CAACC,OAAP,GAAiBzB,YAAjB","sourcesContent":["'use strict';\n\nconst TREE = Symbol();\nconst ROOT = Symbol();\nconst NEXT = Symbol();\nconst ITERATE_FUNC = Symbol();\n\nclass TreeIterator {\n        constructor(tree, root, firstResult, iterateFunction) {\n                this[TREE] = tree;\n                this[ROOT] = root;\n                this[NEXT] = firstResult;\n                this[ITERATE_FUNC] = iterateFunction;\n        }\n\n        next() {\n                const tree = this[TREE];\n                const iterateFunc = this[ITERATE_FUNC];\n                const root = this[ROOT];\n\n                if (!this[NEXT]) {\n                        return {\n                                done: true,\n                                value: root,\n                        };\n                }\n\n                const value = this[NEXT];\n\n                if (iterateFunc === 1) {\n                        this[NEXT] = tree._node(value).previousSibling;\n                }\n                else if (iterateFunc === 2) {\n                        this[NEXT] = tree._node(value).nextSibling;\n                }\n                else if (iterateFunc === 3) {\n                        this[NEXT] = tree._node(value).parent;\n                }\n                else if (iterateFunc === 4) {\n                        this[NEXT] = tree.preceding(value, {root: root});\n                }\n                else /* if (iterateFunc === 5)*/ {\n                        this[NEXT] = tree.following(value, {root: root});\n                }\n\n                return {\n                        done: false,\n                        value: value,\n                };\n        }\n}\n\nObject.defineProperty(TreeIterator.prototype, Symbol.iterator, {\n        value: function() {\n                return this;\n        },\n        writable: false,\n});\n\nTreeIterator.PREV = 1;\nTreeIterator.NEXT = 2;\nTreeIterator.PARENT = 3;\nTreeIterator.PRECEDING = 4;\nTreeIterator.FOLLOWING = 5;\n\nObject.freeze(TreeIterator);\nObject.freeze(TreeIterator.prototype);\n\nmodule.exports = TreeIterator;\n"]},"metadata":{},"sourceType":"script"}