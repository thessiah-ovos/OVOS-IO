{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _require = require(\"../../utils\"),\n    mixin = _require.mixin;\n\nvar NodeImpl = require(\"./Node-impl\").implementation;\n\nvar ChildNodeImpl = require(\"./ChildNode-impl\").implementation;\n\nvar NonDocumentTypeChildNodeImpl = require(\"./NonDocumentTypeChildNode-impl\").implementation;\n\nvar DOMException = require(\"domexception\");\n\nvar _require2 = require(\"../node-type\"),\n    TEXT_NODE = _require2.TEXT_NODE;\n\nvar CharacterDataImpl = /*#__PURE__*/function (_NodeImpl) {\n  _inherits(CharacterDataImpl, _NodeImpl);\n\n  var _super = _createSuper(CharacterDataImpl);\n\n  function CharacterDataImpl(args, privateData) {\n    var _this;\n\n    _classCallCheck(this, CharacterDataImpl);\n\n    _this = _super.call(this, args, privateData);\n    _this._data = privateData.data;\n    return _this;\n  }\n\n  _createClass(CharacterDataImpl, [{\n    key: \"substringData\",\n    value: function substringData(offset, count) {\n      var length = this.length;\n\n      if (offset > length) {\n        throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n      }\n\n      if (offset + count > length) {\n        return this._data.substring(offset);\n      }\n\n      return this._data.substring(offset, offset + count);\n    }\n  }, {\n    key: \"appendData\",\n    value: function appendData(data) {\n      this.replaceData(this.length, 0, data);\n    }\n  }, {\n    key: \"insertData\",\n    value: function insertData(offset, data) {\n      this.replaceData(offset, 0, data);\n    }\n  }, {\n    key: \"deleteData\",\n    value: function deleteData(offset, count) {\n      this.replaceData(offset, count, \"\");\n    }\n  }, {\n    key: \"replaceData\",\n    value: function replaceData(offset, count, data) {\n      var length = this.length;\n\n      if (offset > length) {\n        throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n      }\n\n      if (offset + count > length) {\n        count = length - offset;\n      }\n\n      var start = this._data.substring(0, offset);\n\n      var end = this._data.substring(offset + count);\n\n      this._data = start + data + end; // TODO: range stuff\n\n      if (this.nodeType === TEXT_NODE && this.parentNode) {\n        this.parentNode._childTextContentChangeSteps();\n      }\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._data;\n    },\n    set: function set(data) {\n      this.replaceData(0, this.length, data);\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._data.length;\n    }\n  }]);\n\n  return CharacterDataImpl;\n}(NodeImpl);\n\nmixin(CharacterDataImpl.prototype, NonDocumentTypeChildNodeImpl.prototype);\nmixin(CharacterDataImpl.prototype, ChildNodeImpl.prototype);\nmodule.exports = {\n  implementation: CharacterDataImpl\n};","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/nodes/CharacterData-impl.js"],"names":["require","mixin","NodeImpl","implementation","ChildNodeImpl","NonDocumentTypeChildNodeImpl","DOMException","TEXT_NODE","CharacterDataImpl","args","privateData","_data","data","offset","count","length","substring","replaceData","start","end","nodeType","parentNode","_childTextContentChangeSteps","prototype","module","exports"],"mappings":"AAAA;;;;;;;;;;eAEkBA,OAAO,CAAC,aAAD,C;IAAjBC,K,YAAAA,K;;AACR,IAAMC,QAAQ,GAAGF,OAAO,CAAC,aAAD,CAAP,CAAuBG,cAAxC;;AACA,IAAMC,aAAa,GAAGJ,OAAO,CAAC,kBAAD,CAAP,CAA4BG,cAAlD;;AACA,IAAME,4BAA4B,GAAGL,OAAO,CAAC,iCAAD,CAAP,CAA2CG,cAAhF;;AACA,IAAMG,YAAY,GAAGN,OAAO,CAAC,cAAD,CAA5B;;gBACsBA,OAAO,CAAC,cAAD,C;IAArBO,S,aAAAA,S;;IAEFC,iB;;;;;AACJ,6BAAYC,IAAZ,EAAkBC,WAAlB,EAA+B;AAAA;;AAAA;;AAC7B,8BAAMD,IAAN,EAAYC,WAAZ;AAEA,UAAKC,KAAL,GAAaD,WAAW,CAACE,IAAzB;AAH6B;AAI9B;;;;kCAaaC,M,EAAQC,K,EAAO;AAAA,UACnBC,MADmB,GACR,IADQ,CACnBA,MADmB;;AAG3B,UAAIF,MAAM,GAAGE,MAAb,EAAqB;AACnB,cAAM,IAAIT,YAAJ,CAAiB,wCAAjB,EAA2D,gBAA3D,CAAN;AACD;;AAED,UAAIO,MAAM,GAAGC,KAAT,GAAiBC,MAArB,EAA6B;AAC3B,eAAO,KAAKJ,KAAL,CAAWK,SAAX,CAAqBH,MAArB,CAAP;AACD;;AAED,aAAO,KAAKF,KAAL,CAAWK,SAAX,CAAqBH,MAArB,EAA6BA,MAAM,GAAGC,KAAtC,CAAP;AACD;;;+BAEUF,I,EAAM;AACf,WAAKK,WAAL,CAAiB,KAAKF,MAAtB,EAA8B,CAA9B,EAAiCH,IAAjC;AACD;;;+BAEUC,M,EAAQD,I,EAAM;AACvB,WAAKK,WAAL,CAAiBJ,MAAjB,EAAyB,CAAzB,EAA4BD,IAA5B;AACD;;;+BAEUC,M,EAAQC,K,EAAO;AACxB,WAAKG,WAAL,CAAiBJ,MAAjB,EAAyBC,KAAzB,EAAgC,EAAhC;AACD;;;gCAEWD,M,EAAQC,K,EAAOF,I,EAAM;AAAA,UACvBG,MADuB,GACZ,IADY,CACvBA,MADuB;;AAG/B,UAAIF,MAAM,GAAGE,MAAb,EAAqB;AACnB,cAAM,IAAIT,YAAJ,CAAiB,wCAAjB,EAA2D,gBAA3D,CAAN;AACD;;AAED,UAAIO,MAAM,GAAGC,KAAT,GAAiBC,MAArB,EAA6B;AAC3BD,QAAAA,KAAK,GAAGC,MAAM,GAAGF,MAAjB;AACD;;AAED,UAAMK,KAAK,GAAG,KAAKP,KAAL,CAAWK,SAAX,CAAqB,CAArB,EAAwBH,MAAxB,CAAd;;AACA,UAAMM,GAAG,GAAG,KAAKR,KAAL,CAAWK,SAAX,CAAqBH,MAAM,GAAGC,KAA9B,CAAZ;;AAEA,WAAKH,KAAL,GAAaO,KAAK,GAAGN,IAAR,GAAeO,GAA5B,CAd+B,CAgB/B;;AAEA,UAAI,KAAKC,QAAL,KAAkBb,SAAlB,IAA+B,KAAKc,UAAxC,EAAoD;AAClD,aAAKA,UAAL,CAAgBC,4BAAhB;AACD;AACF;;;wBA1DU;AACT,aAAO,KAAKX,KAAZ;AACD,K;sBACQC,I,EAAM;AACb,WAAKK,WAAL,CAAiB,CAAjB,EAAoB,KAAKF,MAAzB,EAAiCH,IAAjC;AACD;;;wBAEY;AACX,aAAO,KAAKD,KAAL,CAAWI,MAAlB;AACD;;;;EAhB6Bb,Q;;AAoEhCD,KAAK,CAACO,iBAAiB,CAACe,SAAnB,EAA8BlB,4BAA4B,CAACkB,SAA3D,CAAL;AACAtB,KAAK,CAACO,iBAAiB,CAACe,SAAnB,EAA8BnB,aAAa,CAACmB,SAA5C,CAAL;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACftB,EAAAA,cAAc,EAAEK;AADD,CAAjB","sourcesContent":["\"use strict\";\n\nconst { mixin } = require(\"../../utils\");\nconst NodeImpl = require(\"./Node-impl\").implementation;\nconst ChildNodeImpl = require(\"./ChildNode-impl\").implementation;\nconst NonDocumentTypeChildNodeImpl = require(\"./NonDocumentTypeChildNode-impl\").implementation;\nconst DOMException = require(\"domexception\");\nconst { TEXT_NODE } = require(\"../node-type\");\n\nclass CharacterDataImpl extends NodeImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n\n    this._data = privateData.data;\n  }\n\n  get data() {\n    return this._data;\n  }\n  set data(data) {\n    this.replaceData(0, this.length, data);\n  }\n\n  get length() {\n    return this._data.length;\n  }\n\n  substringData(offset, count) {\n    const { length } = this;\n\n    if (offset > length) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    if (offset + count > length) {\n      return this._data.substring(offset);\n    }\n\n    return this._data.substring(offset, offset + count);\n  }\n\n  appendData(data) {\n    this.replaceData(this.length, 0, data);\n  }\n\n  insertData(offset, data) {\n    this.replaceData(offset, 0, data);\n  }\n\n  deleteData(offset, count) {\n    this.replaceData(offset, count, \"\");\n  }\n\n  replaceData(offset, count, data) {\n    const { length } = this;\n\n    if (offset > length) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    if (offset + count > length) {\n      count = length - offset;\n    }\n\n    const start = this._data.substring(0, offset);\n    const end = this._data.substring(offset + count);\n\n    this._data = start + data + end;\n\n    // TODO: range stuff\n\n    if (this.nodeType === TEXT_NODE && this.parentNode) {\n      this.parentNode._childTextContentChangeSteps();\n    }\n  }\n}\n\nmixin(CharacterDataImpl.prototype, NonDocumentTypeChildNodeImpl.prototype);\nmixin(CharacterDataImpl.prototype, ChildNodeImpl.prototype);\n\nmodule.exports = {\n  implementation: CharacterDataImpl\n};\n"]},"metadata":{},"sourceType":"script"}