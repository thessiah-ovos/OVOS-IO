{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require.domSymbolTree;\n\nvar _require2 = require(\"./helpers\"),\n    filter = _require2.filter,\n    FILTER_ACCEPT = _require2.FILTER_ACCEPT;\n\nexports.implementation = /*#__PURE__*/function () {\n  function NodeIteratorImpl(constructorArgs, privateData) {\n    _classCallCheck(this, NodeIteratorImpl);\n\n    this._active = false;\n    this.root = privateData.root;\n    this.whatToShow = privateData.whatToShow;\n    this.filter = privateData.filter;\n    this._referenceNode = this.root;\n    this._pointerBeforeReferenceNode = true; // This is used to deactive the NodeIterator if there are too many working in a Document at the same time.\n    // Without weak references, a JS implementation of NodeIterator will leak, since we can't know when to clean it up.\n    // This ensures we force a clean up of those beyond some maximum (specified by the Document).\n\n    this._working = true;\n    this._workingNodeIteratorsMax = privateData.workingNodeIteratorsMax;\n  }\n\n  _createClass(NodeIteratorImpl, [{\n    key: \"nextNode\",\n    value: function nextNode() {\n      this._throwIfNotWorking();\n\n      return this._traverse(\"next\");\n    }\n  }, {\n    key: \"previousNode\",\n    value: function previousNode() {\n      this._throwIfNotWorking();\n\n      return this._traverse(\"previous\");\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {} // Intentionally do nothing, per spec.\n    // Called by Documents.\n\n  }, {\n    key: \"_preRemovingSteps\",\n    value: function _preRemovingSteps(toBeRemovedNode) {\n      // Second clause is https://github.com/whatwg/dom/issues/496\n      if (!toBeRemovedNode.contains(this._referenceNode) || toBeRemovedNode === this.root) {\n        return;\n      }\n\n      if (this._pointerBeforeReferenceNode) {\n        var next = null;\n        var candidateForNext = domSymbolTree.following(toBeRemovedNode, {\n          skipChildren: true\n        });\n\n        while (candidateForNext !== null) {\n          if (this.root.contains(candidateForNext)) {\n            next = candidateForNext;\n            break;\n          }\n\n          candidateForNext = domSymbolTree.following(candidateForNext, {\n            skipChildren: true\n          });\n        }\n\n        if (next !== null) {\n          this._referenceNode = next;\n          return;\n        }\n\n        this._pointerBeforeReferenceNode = false;\n      }\n\n      var previousSibling = toBeRemovedNode.previousSibling;\n      this._referenceNode = previousSibling === null ? toBeRemovedNode.parentNode : domSymbolTree.lastInclusiveDescendant(toBeRemovedNode.previousSibling);\n    } // Only called by getters and methods that are affected by the pre-removing steps\n\n  }, {\n    key: \"_throwIfNotWorking\",\n    value: function _throwIfNotWorking() {\n      if (!this._working) {\n        throw Error(\"This NodeIterator is no longer working. More than \".concat(this._workingNodeIteratorsMax, \" iterators are \") + \"being used concurrently. You can increase the 'concurrentNodeIterators' option to make this error go away.\");\n      }\n    }\n  }, {\n    key: \"_traverse\",\n    value: function _traverse(direction) {\n      var node = this._referenceNode;\n      var beforeNode = this._pointerBeforeReferenceNode;\n\n      while (true) {\n        if (direction === \"next\") {\n          if (!beforeNode) {\n            node = domSymbolTree.following(node, {\n              root: this.root\n            });\n\n            if (!node) {\n              return null;\n            }\n          }\n\n          beforeNode = false;\n        } else if (direction === \"previous\") {\n          if (beforeNode) {\n            node = domSymbolTree.preceding(node, {\n              root: this.root\n            });\n\n            if (!node) {\n              return null;\n            }\n          }\n\n          beforeNode = true;\n        }\n\n        var result = filter(this, node);\n\n        if (result === FILTER_ACCEPT) {\n          break;\n        }\n      }\n\n      this._referenceNode = node;\n      this._pointerBeforeReferenceNode = beforeNode;\n      return node;\n    }\n  }, {\n    key: \"referenceNode\",\n    get: function get() {\n      this._throwIfNotWorking();\n\n      return this._referenceNode;\n    }\n  }, {\n    key: \"pointerBeforeReferenceNode\",\n    get: function get() {\n      this._throwIfNotWorking();\n\n      return this._pointerBeforeReferenceNode;\n    }\n  }]);\n\n  return NodeIteratorImpl;\n}();","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/traversal/NodeIterator-impl.js"],"names":["require","domSymbolTree","filter","FILTER_ACCEPT","exports","implementation","constructorArgs","privateData","_active","root","whatToShow","_referenceNode","_pointerBeforeReferenceNode","_working","_workingNodeIteratorsMax","workingNodeIteratorsMax","_throwIfNotWorking","_traverse","toBeRemovedNode","contains","next","candidateForNext","following","skipChildren","previousSibling","parentNode","lastInclusiveDescendant","Error","direction","node","beforeNode","preceding","result"],"mappings":"AAAA;;;;;;eAC0BA,OAAO,CAAC,+BAAD,C;IAAzBC,a,YAAAA,a;;gBAC0BD,OAAO,CAAC,WAAD,C;IAAjCE,M,aAAAA,M;IAAQC,a,aAAAA,a;;AAEhBC,OAAO,CAACC,cAAR;AACE,4BAAYC,eAAZ,EAA6BC,WAA7B,EAA0C;AAAA;;AACxC,SAAKC,OAAL,GAAe,KAAf;AACA,SAAKC,IAAL,GAAYF,WAAW,CAACE,IAAxB;AACA,SAAKC,UAAL,GAAkBH,WAAW,CAACG,UAA9B;AACA,SAAKR,MAAL,GAAcK,WAAW,CAACL,MAA1B;AAEA,SAAKS,cAAL,GAAsB,KAAKF,IAA3B;AACA,SAAKG,2BAAL,GAAmC,IAAnC,CAPwC,CASxC;AACA;AACA;;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,wBAAL,GAAgCP,WAAW,CAACQ,uBAA5C;AACD;;AAfH;AAAA;AAAA,+BA2Ba;AACT,WAAKC,kBAAL;;AACA,aAAO,KAAKC,SAAL,CAAe,MAAf,CAAP;AACD;AA9BH;AAAA;AAAA,mCAgCiB;AACb,WAAKD,kBAAL;;AACA,aAAO,KAAKC,SAAL,CAAe,UAAf,CAAP;AACD;AAnCH;AAAA;AAAA,6BAqCW,CAER,CAvCH,CAsCI;AAGF;;AAzCF;AAAA;AAAA,sCA0CoBC,eA1CpB,EA0CqC;AACjC;AACA,UAAI,CAACA,eAAe,CAACC,QAAhB,CAAyB,KAAKR,cAA9B,CAAD,IAAkDO,eAAe,KAAK,KAAKT,IAA/E,EAAqF;AACnF;AACD;;AAED,UAAI,KAAKG,2BAAT,EAAsC;AACpC,YAAIQ,IAAI,GAAG,IAAX;AACA,YAAIC,gBAAgB,GAAGpB,aAAa,CAACqB,SAAd,CAAwBJ,eAAxB,EAAyC;AAAEK,UAAAA,YAAY,EAAE;AAAhB,SAAzC,CAAvB;;AACA,eAAOF,gBAAgB,KAAK,IAA5B,EAAkC;AAChC,cAAI,KAAKZ,IAAL,CAAUU,QAAV,CAAmBE,gBAAnB,CAAJ,EAA0C;AACxCD,YAAAA,IAAI,GAAGC,gBAAP;AACA;AACD;;AACDA,UAAAA,gBAAgB,GAAGpB,aAAa,CAACqB,SAAd,CAAwBD,gBAAxB,EAA0C;AAAEE,YAAAA,YAAY,EAAE;AAAhB,WAA1C,CAAnB;AACD;;AAED,YAAIH,IAAI,KAAK,IAAb,EAAmB;AACjB,eAAKT,cAAL,GAAsBS,IAAtB;AACA;AACD;;AAED,aAAKR,2BAAL,GAAmC,KAAnC;AACD;;AAvBgC,UAyBzBY,eAzByB,GAyBLN,eAzBK,CAyBzBM,eAzByB;AA0BjC,WAAKb,cAAL,GAAsBa,eAAe,KAAK,IAApB,GACAN,eAAe,CAACO,UADhB,GAEAxB,aAAa,CAACyB,uBAAd,CAAsCR,eAAe,CAACM,eAAtD,CAFtB;AAGD,KAvEH,CAyEE;;AAzEF;AAAA;AAAA,yCA0EuB;AACnB,UAAI,CAAC,KAAKX,QAAV,EAAoB;AAClB,cAAMc,KAAK,CAAC,4DAAqD,KAAKb,wBAA1D,mIAAD,CAAX;AAED;AACF;AA/EH;AAAA;AAAA,8BAiFYc,SAjFZ,EAiFuB;AACnB,UAAIC,IAAI,GAAG,KAAKlB,cAAhB;AACA,UAAImB,UAAU,GAAG,KAAKlB,2BAAtB;;AAEA,aAAO,IAAP,EAAa;AACX,YAAIgB,SAAS,KAAK,MAAlB,EAA0B;AACxB,cAAI,CAACE,UAAL,EAAiB;AACfD,YAAAA,IAAI,GAAG5B,aAAa,CAACqB,SAAd,CAAwBO,IAAxB,EAA8B;AAAEpB,cAAAA,IAAI,EAAE,KAAKA;AAAb,aAA9B,CAAP;;AAEA,gBAAI,CAACoB,IAAL,EAAW;AACT,qBAAO,IAAP;AACD;AACF;;AAEDC,UAAAA,UAAU,GAAG,KAAb;AACD,SAVD,MAUO,IAAIF,SAAS,KAAK,UAAlB,EAA8B;AACnC,cAAIE,UAAJ,EAAgB;AACdD,YAAAA,IAAI,GAAG5B,aAAa,CAAC8B,SAAd,CAAwBF,IAAxB,EAA8B;AAAEpB,cAAAA,IAAI,EAAE,KAAKA;AAAb,aAA9B,CAAP;;AAEA,gBAAI,CAACoB,IAAL,EAAW;AACT,qBAAO,IAAP;AACD;AACF;;AAEDC,UAAAA,UAAU,GAAG,IAAb;AACD;;AAED,YAAME,MAAM,GAAG9B,MAAM,CAAC,IAAD,EAAO2B,IAAP,CAArB;;AACA,YAAIG,MAAM,KAAK7B,aAAf,EAA8B;AAC5B;AACD;AACF;;AAED,WAAKQ,cAAL,GAAsBkB,IAAtB;AACA,WAAKjB,2BAAL,GAAmCkB,UAAnC;AACA,aAAOD,IAAP;AACD;AArHH;AAAA;AAAA,wBAiBsB;AAClB,WAAKb,kBAAL;;AACA,aAAO,KAAKL,cAAZ;AACD;AApBH;AAAA;AAAA,wBAsBmC;AAC/B,WAAKK,kBAAL;;AACA,aAAO,KAAKJ,2BAAZ;AACD;AAzBH;;AAAA;AAAA","sourcesContent":["\"use strict\";\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst { filter, FILTER_ACCEPT } = require(\"./helpers\");\n\nexports.implementation = class NodeIteratorImpl {\n  constructor(constructorArgs, privateData) {\n    this._active = false;\n    this.root = privateData.root;\n    this.whatToShow = privateData.whatToShow;\n    this.filter = privateData.filter;\n\n    this._referenceNode = this.root;\n    this._pointerBeforeReferenceNode = true;\n\n    // This is used to deactive the NodeIterator if there are too many working in a Document at the same time.\n    // Without weak references, a JS implementation of NodeIterator will leak, since we can't know when to clean it up.\n    // This ensures we force a clean up of those beyond some maximum (specified by the Document).\n    this._working = true;\n    this._workingNodeIteratorsMax = privateData.workingNodeIteratorsMax;\n  }\n\n  get referenceNode() {\n    this._throwIfNotWorking();\n    return this._referenceNode;\n  }\n\n  get pointerBeforeReferenceNode() {\n    this._throwIfNotWorking();\n    return this._pointerBeforeReferenceNode;\n  }\n\n  nextNode() {\n    this._throwIfNotWorking();\n    return this._traverse(\"next\");\n  }\n\n  previousNode() {\n    this._throwIfNotWorking();\n    return this._traverse(\"previous\");\n  }\n\n  detach() {\n    // Intentionally do nothing, per spec.\n  }\n\n  // Called by Documents.\n  _preRemovingSteps(toBeRemovedNode) {\n    // Second clause is https://github.com/whatwg/dom/issues/496\n    if (!toBeRemovedNode.contains(this._referenceNode) || toBeRemovedNode === this.root) {\n      return;\n    }\n\n    if (this._pointerBeforeReferenceNode) {\n      let next = null;\n      let candidateForNext = domSymbolTree.following(toBeRemovedNode, { skipChildren: true });\n      while (candidateForNext !== null) {\n        if (this.root.contains(candidateForNext)) {\n          next = candidateForNext;\n          break;\n        }\n        candidateForNext = domSymbolTree.following(candidateForNext, { skipChildren: true });\n      }\n\n      if (next !== null) {\n        this._referenceNode = next;\n        return;\n      }\n\n      this._pointerBeforeReferenceNode = false;\n    }\n\n    const { previousSibling } = toBeRemovedNode;\n    this._referenceNode = previousSibling === null ?\n                          toBeRemovedNode.parentNode :\n                          domSymbolTree.lastInclusiveDescendant(toBeRemovedNode.previousSibling);\n  }\n\n  // Only called by getters and methods that are affected by the pre-removing steps\n  _throwIfNotWorking() {\n    if (!this._working) {\n      throw Error(`This NodeIterator is no longer working. More than ${this._workingNodeIteratorsMax} iterators are ` +\n        `being used concurrently. You can increase the 'concurrentNodeIterators' option to make this error go away.`);\n    }\n  }\n\n  _traverse(direction) {\n    let node = this._referenceNode;\n    let beforeNode = this._pointerBeforeReferenceNode;\n\n    while (true) {\n      if (direction === \"next\") {\n        if (!beforeNode) {\n          node = domSymbolTree.following(node, { root: this.root });\n\n          if (!node) {\n            return null;\n          }\n        }\n\n        beforeNode = false;\n      } else if (direction === \"previous\") {\n        if (beforeNode) {\n          node = domSymbolTree.preceding(node, { root: this.root });\n\n          if (!node) {\n            return null;\n          }\n        }\n\n        beforeNode = true;\n      }\n\n      const result = filter(this, node);\n      if (result === FILTER_ACCEPT) {\n        break;\n      }\n    }\n\n    this._referenceNode = node;\n    this._pointerBeforeReferenceNode = beforeNode;\n    return node;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}