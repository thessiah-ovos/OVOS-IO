{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _require = require(\"../../utils\"),\n    mixin = _require.mixin;\n\nvar ElementImpl = require(\"./Element-impl\").implementation;\n\nvar MouseEvent = require(\"../generated/MouseEvent\");\n\nvar ElementCSSInlineStyleImpl = require(\"./ElementCSSInlineStyle-impl\").implementation;\n\nvar GlobalEventHandlersImpl = require(\"./GlobalEventHandlers-impl\").implementation;\n\nvar HTMLAndSVGElementSharedImpl = require(\"./HTMLAndSVGElementShared-impl\").implementation;\n\nvar _require2 = require(\"../helpers/form-controls\"),\n    isDisabled = _require2.isDisabled;\n\nvar HTMLElementImpl = /*#__PURE__*/function (_ElementImpl) {\n  _inherits(HTMLElementImpl, _ElementImpl);\n\n  var _super = _createSuper(HTMLElementImpl);\n\n  function HTMLElementImpl(args, privateData) {\n    var _this;\n\n    _classCallCheck(this, HTMLElementImpl);\n\n    _this = _super.call(this, args, privateData);\n\n    _this._initHTMLAndSVGElement();\n\n    _this._initElementCSSInlineStyle();\n\n    _this._initGlobalEvents();\n\n    _this._settingCssText = false;\n    _this._clickInProgress = false;\n    return _this;\n  } // Add default event behavior (click link to navigate, click button to submit\n  // form, etc). We start by wrapping dispatchEvent so we can forward events to\n  // the element's default functions (only events that did not incur\n  // preventDefault).\n\n\n  _createClass(HTMLElementImpl, [{\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(event) {\n      if (event.type === \"click\") {\n        callEventBehaviorHook(event, \"_preClickActivationSteps\", this);\n      }\n\n      var outcome = _get(_getPrototypeOf(HTMLElementImpl.prototype), \"dispatchEvent\", this).call(this, event);\n\n      if (event.type === \"click\") {\n        if (event.defaultPrevented) {\n          callEventBehaviorHook(event, \"_canceledActivationSteps\");\n        } else {\n          callEventBehaviorHook(event, \"_activationBehavior\");\n        }\n      }\n\n      return outcome;\n    }\n  }, {\n    key: \"click\",\n    value: function click() {\n      // https://html.spec.whatwg.org/multipage/interaction.html#dom-click\n      // https://html.spec.whatwg.org/multipage/interaction.html#run-synthetic-click-activation-steps\n      // Not completely spec compliant due to e.g. incomplete implementations of disabled for form controls, or no\n      // implementation at all of isTrusted.\n      if (this._clickInProgress) {\n        return;\n      }\n\n      this._clickInProgress = true;\n\n      if (isDisabled(this)) {\n        return;\n      }\n\n      var event = MouseEvent.createImpl([\"click\", {\n        bubbles: true,\n        cancelable: true,\n        view: this.ownerDocument.defaultView\n      }], {}); // Run synthetic click activation steps. According to the spec,\n      // this should not be calling dispatchEvent, but it matches browser behavior.\n      // See: https://www.w3.org/Bugs/Public/show_bug.cgi?id=12230\n      // See also: https://github.com/whatwg/html/issues/805\n\n      this.dispatchEvent(event);\n      this._clickInProgress = false;\n    }\n  }, {\n    key: \"_attrModified\",\n    value: function _attrModified(name, value, oldValue) {\n      if (name === \"style\" && value !== oldValue && !this._settingCssText) {\n        this._settingCssText = true;\n        this._style.cssText = value;\n        this._settingCssText = false;\n      } else if (name.startsWith(\"on\")) {\n        this._globalEventChanged(name.substring(2));\n      }\n\n      _get(_getPrototypeOf(HTMLElementImpl.prototype), \"_attrModified\", this).apply(this, arguments);\n    }\n  }, {\n    key: \"dir\",\n    get: function get() {\n      var dirValue = this.getAttribute(\"dir\");\n\n      if (dirValue !== null) {\n        dirValue = dirValue.toLowerCase();\n\n        if ([\"ltr\", \"rtl\", \"auto\"].includes(dirValue)) {\n          return dirValue;\n        }\n      }\n\n      return \"\";\n    },\n    set: function set(value) {\n      this.setAttribute(\"dir\", value);\n    }\n  }, {\n    key: \"offsetParent\",\n    get: function get() {\n      return null;\n    }\n  }, {\n    key: \"offsetTop\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"offsetLeft\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"offsetWidth\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"offsetHeight\",\n    get: function get() {\n      return 0;\n    }\n  }]);\n\n  return HTMLElementImpl;\n}(ElementImpl);\n\nfunction callEventBehaviorHook(event, name, targetOverride) {\n  if (event) {\n    var target = targetOverride || event.target;\n\n    if (target && typeof target[name] === \"function\") {\n      target[name]();\n    }\n  }\n}\n\nmixin(HTMLElementImpl.prototype, ElementCSSInlineStyleImpl.prototype);\nmixin(HTMLElementImpl.prototype, GlobalEventHandlersImpl.prototype);\nmixin(HTMLElementImpl.prototype, HTMLAndSVGElementSharedImpl.prototype);\nmodule.exports = {\n  implementation: HTMLElementImpl\n};","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/nodes/HTMLElement-impl.js"],"names":["require","mixin","ElementImpl","implementation","MouseEvent","ElementCSSInlineStyleImpl","GlobalEventHandlersImpl","HTMLAndSVGElementSharedImpl","isDisabled","HTMLElementImpl","args","privateData","_initHTMLAndSVGElement","_initElementCSSInlineStyle","_initGlobalEvents","_settingCssText","_clickInProgress","event","type","callEventBehaviorHook","outcome","defaultPrevented","createImpl","bubbles","cancelable","view","ownerDocument","defaultView","dispatchEvent","name","value","oldValue","_style","cssText","startsWith","_globalEventChanged","substring","apply","arguments","dirValue","getAttribute","toLowerCase","includes","setAttribute","targetOverride","target","prototype","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nconst { mixin } = require(\"../../utils\");\nconst ElementImpl = require(\"./Element-impl\").implementation;\nconst MouseEvent = require(\"../generated/MouseEvent\");\nconst ElementCSSInlineStyleImpl = require(\"./ElementCSSInlineStyle-impl\").implementation;\nconst GlobalEventHandlersImpl = require(\"./GlobalEventHandlers-impl\").implementation;\nconst HTMLAndSVGElementSharedImpl = require(\"./HTMLAndSVGElementShared-impl\").implementation;\nconst { isDisabled } = require(\"../helpers/form-controls\");\n\nclass HTMLElementImpl extends ElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._initHTMLAndSVGElement();\n    this._initElementCSSInlineStyle();\n    this._initGlobalEvents();\n\n    this._settingCssText = false;\n    this._clickInProgress = false;\n  }\n\n  // Add default event behavior (click link to navigate, click button to submit\n  // form, etc). We start by wrapping dispatchEvent so we can forward events to\n  // the element's default functions (only events that did not incur\n  // preventDefault).\n  dispatchEvent(event) {\n    if (event.type === \"click\") {\n      callEventBehaviorHook(event, \"_preClickActivationSteps\", this);\n    }\n\n    const outcome = super.dispatchEvent(event);\n\n    if (event.type === \"click\") {\n      if (event.defaultPrevented) {\n        callEventBehaviorHook(event, \"_canceledActivationSteps\");\n      } else {\n        callEventBehaviorHook(event, \"_activationBehavior\");\n      }\n    }\n\n    return outcome;\n  }\n\n  click() {\n    // https://html.spec.whatwg.org/multipage/interaction.html#dom-click\n    // https://html.spec.whatwg.org/multipage/interaction.html#run-synthetic-click-activation-steps\n    // Not completely spec compliant due to e.g. incomplete implementations of disabled for form controls, or no\n    // implementation at all of isTrusted.\n\n    if (this._clickInProgress) {\n      return;\n    }\n\n    this._clickInProgress = true;\n\n    if (isDisabled(this)) {\n      return;\n    }\n\n    const event = MouseEvent.createImpl([\n      \"click\",\n      {\n        bubbles: true,\n        cancelable: true,\n        view: this.ownerDocument.defaultView\n      }\n    ], {});\n\n    // Run synthetic click activation steps. According to the spec,\n    // this should not be calling dispatchEvent, but it matches browser behavior.\n    // See: https://www.w3.org/Bugs/Public/show_bug.cgi?id=12230\n    // See also: https://github.com/whatwg/html/issues/805\n    this.dispatchEvent(event);\n\n\n    this._clickInProgress = false;\n  }\n\n  get dir() {\n    let dirValue = this.getAttribute(\"dir\");\n    if (dirValue !== null) {\n      dirValue = dirValue.toLowerCase();\n\n      if ([\"ltr\", \"rtl\", \"auto\"].includes(dirValue)) {\n        return dirValue;\n      }\n    }\n    return \"\";\n  }\n  set dir(value) {\n    this.setAttribute(\"dir\", value);\n  }\n\n  _attrModified(name, value, oldValue) {\n    if (name === \"style\" && value !== oldValue && !this._settingCssText) {\n      this._settingCssText = true;\n      this._style.cssText = value;\n      this._settingCssText = false;\n    } else if (name.startsWith(\"on\")) {\n      this._globalEventChanged(name.substring(2));\n    }\n\n    super._attrModified.apply(this, arguments);\n  }\n\n  get offsetParent() {\n    return null;\n  }\n\n  get offsetTop() {\n    return 0;\n  }\n\n  get offsetLeft() {\n    return 0;\n  }\n\n  get offsetWidth() {\n    return 0;\n  }\n\n  get offsetHeight() {\n    return 0;\n  }\n}\n\nfunction callEventBehaviorHook(event, name, targetOverride) {\n  if (event) {\n    const target = targetOverride || event.target;\n    if (target && typeof target[name] === \"function\") {\n      target[name]();\n    }\n  }\n}\n\nmixin(HTMLElementImpl.prototype, ElementCSSInlineStyleImpl.prototype);\nmixin(HTMLElementImpl.prototype, GlobalEventHandlersImpl.prototype);\nmixin(HTMLElementImpl.prototype, HTMLAndSVGElementSharedImpl.prototype);\n\nmodule.exports = {\n  implementation: HTMLElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}