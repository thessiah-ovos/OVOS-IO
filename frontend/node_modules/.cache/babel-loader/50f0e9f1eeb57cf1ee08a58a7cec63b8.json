{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _require = require(\"./utils.js\"),\n    solelyContainsHTTPTokenCodePoints = _require.solelyContainsHTTPTokenCodePoints;\n\nmodule.exports = function (mimeType) {\n  var serialization = \"\".concat(mimeType.type, \"/\").concat(mimeType.subtype);\n\n  if (mimeType.parameters.size === 0) {\n    return serialization;\n  }\n\n  var _iterator = _createForOfIteratorHelper(mimeType.parameters),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray(_step.value, 2),\n          name = _step$value[0],\n          value = _step$value[1];\n\n      serialization += \";\";\n      serialization += name;\n      serialization += \"=\";\n\n      if (!solelyContainsHTTPTokenCodePoints(value) || value.length === 0) {\n        value = value.replace(/([\"\\\\])/g, \"\\\\$1\");\n        value = \"\\\"\".concat(value, \"\\\"\");\n      }\n\n      serialization += value;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return serialization;\n};","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/whatwg-mimetype/lib/serializer.js"],"names":["require","solelyContainsHTTPTokenCodePoints","module","exports","mimeType","serialization","type","subtype","parameters","size","name","value","length","replace"],"mappings":"AAAA;;;;;;eAC8CA,OAAO,CAAC,YAAD,C;IAA7CC,iC,YAAAA,iC;;AAERC,MAAM,CAACC,OAAP,GAAiB,UAAAC,QAAQ,EAAI;AAC3B,MAAIC,aAAa,aAAMD,QAAQ,CAACE,IAAf,cAAuBF,QAAQ,CAACG,OAAhC,CAAjB;;AAEA,MAAIH,QAAQ,CAACI,UAAT,CAAoBC,IAApB,KAA6B,CAAjC,EAAoC;AAClC,WAAOJ,aAAP;AACD;;AAL0B,6CAODD,QAAQ,CAACI,UAPR;AAAA;;AAAA;AAO3B,wDAA+C;AAAA;AAAA,UAArCE,IAAqC;AAAA,UAA/BC,KAA+B;;AAC7CN,MAAAA,aAAa,IAAI,GAAjB;AACAA,MAAAA,aAAa,IAAIK,IAAjB;AACAL,MAAAA,aAAa,IAAI,GAAjB;;AAEA,UAAI,CAACJ,iCAAiC,CAACU,KAAD,CAAlC,IAA6CA,KAAK,CAACC,MAAN,KAAiB,CAAlE,EAAqE;AACnED,QAAAA,KAAK,GAAGA,KAAK,CAACE,OAAN,CAAc,UAAd,EAA0B,MAA1B,CAAR;AACAF,QAAAA,KAAK,eAAOA,KAAP,OAAL;AACD;;AAEDN,MAAAA,aAAa,IAAIM,KAAjB;AACD;AAlB0B;AAAA;AAAA;AAAA;AAAA;;AAoB3B,SAAON,aAAP;AACD,CArBD","sourcesContent":["\"use strict\";\nconst { solelyContainsHTTPTokenCodePoints } = require(\"./utils.js\");\n\nmodule.exports = mimeType => {\n  let serialization = `${mimeType.type}/${mimeType.subtype}`;\n\n  if (mimeType.parameters.size === 0) {\n    return serialization;\n  }\n\n  for (let [name, value] of mimeType.parameters) {\n    serialization += \";\";\n    serialization += name;\n    serialization += \"=\";\n\n    if (!solelyContainsHTTPTokenCodePoints(value) || value.length === 0) {\n      value = value.replace(/([\"\\\\])/g, \"\\\\$1\");\n      value = `\"${value}\"`;\n    }\n\n    serialization += value;\n  }\n\n  return serialization;\n};\n"]},"metadata":{},"sourceType":"script"}