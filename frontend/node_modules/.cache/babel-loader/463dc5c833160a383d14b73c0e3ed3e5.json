{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar CharacterDataImpl = require(\"./CharacterData-impl\").implementation;\n\nvar _require = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require.domSymbolTree;\n\nvar DOMException = require(\"domexception\");\n\nvar NODE_TYPE = require(\"../node-type\");\n\nvar TextImpl = /*#__PURE__*/function (_CharacterDataImpl) {\n  _inherits(TextImpl, _CharacterDataImpl);\n\n  var _super = _createSuper(TextImpl);\n\n  function TextImpl(args, privateData) {\n    var _this;\n\n    _classCallCheck(this, TextImpl);\n\n    _this = _super.call(this, args, privateData);\n    _this.nodeType = NODE_TYPE.TEXT_NODE;\n    return _this;\n  }\n\n  _createClass(TextImpl, [{\n    key: \"splitText\",\n    value: function splitText(offset) {\n      offset >>>= 0;\n      var length = this.length;\n\n      if (offset > length) {\n        throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n      }\n\n      var count = length - offset;\n      var newData = this.substringData(offset, count);\n\n      var newNode = this._ownerDocument.createTextNode(newData);\n\n      var parent = domSymbolTree.parent(this);\n\n      if (parent !== null) {\n        parent.insertBefore(newNode, this.nextSibling);\n      }\n\n      this.replaceData(offset, count, \"\");\n      return newNode; // TODO: range stuff\n    }\n  }, {\n    key: \"wholeText\",\n    get: function get() {\n      var wholeText = this.textContent;\n      var next;\n      var current = this;\n\n      while ((next = domSymbolTree.previousSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n        wholeText = next.textContent + wholeText;\n        current = next;\n      }\n\n      current = this;\n\n      while ((next = domSymbolTree.nextSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n        wholeText += next.textContent;\n        current = next;\n      }\n\n      return wholeText;\n    }\n  }]);\n\n  return TextImpl;\n}(CharacterDataImpl);\n\nmodule.exports = {\n  implementation: TextImpl\n};","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/nodes/Text-impl.js"],"names":["CharacterDataImpl","require","implementation","domSymbolTree","DOMException","NODE_TYPE","TextImpl","args","privateData","nodeType","TEXT_NODE","offset","length","count","newData","substringData","newNode","_ownerDocument","createTextNode","parent","insertBefore","nextSibling","replaceData","wholeText","textContent","next","current","previousSibling","module","exports"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,iBAAiB,GAAGC,OAAO,CAAC,sBAAD,CAAP,CAAgCC,cAA1D;;eAE0BD,OAAO,CAAC,+BAAD,C;IAAzBE,a,YAAAA,a;;AACR,IAAMC,YAAY,GAAGH,OAAO,CAAC,cAAD,CAA5B;;AACA,IAAMI,SAAS,GAAGJ,OAAO,CAAC,cAAD,CAAzB;;IAEMK,Q;;;;;AACJ,oBAAYC,IAAZ,EAAkBC,WAAlB,EAA+B;AAAA;;AAAA;;AAC7B,8BAAMD,IAAN,EAAYC,WAAZ;AAEA,UAAKC,QAAL,GAAgBJ,SAAS,CAACK,SAA1B;AAH6B;AAI9B;;;;8BAESC,M,EAAQ;AAChBA,MAAAA,MAAM,MAAM,CAAZ;AADgB,UAGRC,MAHQ,GAGG,IAHH,CAGRA,MAHQ;;AAKhB,UAAID,MAAM,GAAGC,MAAb,EAAqB;AACnB,cAAM,IAAIR,YAAJ,CAAiB,wCAAjB,EAA2D,gBAA3D,CAAN;AACD;;AAED,UAAMS,KAAK,GAAGD,MAAM,GAAGD,MAAvB;AACA,UAAMG,OAAO,GAAG,KAAKC,aAAL,CAAmBJ,MAAnB,EAA2BE,KAA3B,CAAhB;;AAEA,UAAMG,OAAO,GAAG,KAAKC,cAAL,CAAoBC,cAApB,CAAmCJ,OAAnC,CAAhB;;AAEA,UAAMK,MAAM,GAAGhB,aAAa,CAACgB,MAAd,CAAqB,IAArB,CAAf;;AAEA,UAAIA,MAAM,KAAK,IAAf,EAAqB;AACnBA,QAAAA,MAAM,CAACC,YAAP,CAAoBJ,OAApB,EAA6B,KAAKK,WAAlC;AACD;;AAED,WAAKC,WAAL,CAAiBX,MAAjB,EAAyBE,KAAzB,EAAgC,EAAhC;AAEA,aAAOG,OAAP,CAtBgB,CAwBhB;AACD;;;wBAEe;AACd,UAAIO,SAAS,GAAG,KAAKC,WAArB;AACA,UAAIC,IAAJ;AACA,UAAIC,OAAO,GAAG,IAAd;;AACA,aAAO,CAACD,IAAI,GAAGtB,aAAa,CAACwB,eAAd,CAA8BD,OAA9B,CAAR,KAAmDD,IAAI,CAAChB,QAAL,KAAkBJ,SAAS,CAACK,SAAtF,EAAiG;AAC/Fa,QAAAA,SAAS,GAAGE,IAAI,CAACD,WAAL,GAAmBD,SAA/B;AACAG,QAAAA,OAAO,GAAGD,IAAV;AACD;;AACDC,MAAAA,OAAO,GAAG,IAAV;;AACA,aAAO,CAACD,IAAI,GAAGtB,aAAa,CAACkB,WAAd,CAA0BK,OAA1B,CAAR,KAA+CD,IAAI,CAAChB,QAAL,KAAkBJ,SAAS,CAACK,SAAlF,EAA6F;AAC3Fa,QAAAA,SAAS,IAAIE,IAAI,CAACD,WAAlB;AACAE,QAAAA,OAAO,GAAGD,IAAV;AACD;;AACD,aAAOF,SAAP;AACD;;;;EAhDoBvB,iB;;AAmDvB4B,MAAM,CAACC,OAAP,GAAiB;AACf3B,EAAAA,cAAc,EAAEI;AADD,CAAjB","sourcesContent":["\"use strict\";\n\nconst CharacterDataImpl = require(\"./CharacterData-impl\").implementation;\n\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst DOMException = require(\"domexception\");\nconst NODE_TYPE = require(\"../node-type\");\n\nclass TextImpl extends CharacterDataImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n\n    this.nodeType = NODE_TYPE.TEXT_NODE;\n  }\n\n  splitText(offset) {\n    offset >>>= 0;\n\n    const { length } = this;\n\n    if (offset > length) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    const count = length - offset;\n    const newData = this.substringData(offset, count);\n\n    const newNode = this._ownerDocument.createTextNode(newData);\n\n    const parent = domSymbolTree.parent(this);\n\n    if (parent !== null) {\n      parent.insertBefore(newNode, this.nextSibling);\n    }\n\n    this.replaceData(offset, count, \"\");\n\n    return newNode;\n\n    // TODO: range stuff\n  }\n\n  get wholeText() {\n    let wholeText = this.textContent;\n    let next;\n    let current = this;\n    while ((next = domSymbolTree.previousSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText = next.textContent + wholeText;\n      current = next;\n    }\n    current = this;\n    while ((next = domSymbolTree.nextSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText += next.textContent;\n      current = next;\n    }\n    return wholeText;\n  }\n}\n\nmodule.exports = {\n  implementation: TextImpl\n};\n"]},"metadata":{},"sourceType":"script"}