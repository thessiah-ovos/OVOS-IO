{"ast":null,"code":"\"use strict\"; // https://infra.spec.whatwg.org/#sets\n//\n// Only use this class if a Set cannot be used, e.g. when \"replace\" operation is needed, since there's no way to replace\n// an element while keep the relative order using a Set, only remove and then add something at the end.\n\nvar _createForOfIteratorHelper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function OrderedSet() {\n    _classCallCheck(this, OrderedSet);\n\n    this._items = [];\n  }\n\n  _createClass(OrderedSet, [{\n    key: \"append\",\n    value: function append(item) {\n      if (!this.contains(item)) {\n        this._items.push(item);\n      }\n    }\n  }, {\n    key: \"prepend\",\n    value: function prepend(item) {\n      if (!this.contains(item)) {\n        this._items.unshift(item);\n      }\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(item, replacement) {\n      var seen = false;\n\n      for (var i = 0; i < this._items.length;) {\n        var isInstance = this._items[i] === item || this._items[i] === replacement;\n\n        if (seen && isInstance) {\n          this._items.splice(i, 1);\n        } else {\n          if (isInstance) {\n            this._items[i] = replacement;\n            seen = true;\n          }\n\n          i++;\n        }\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n        items[_key] = arguments[_key];\n      }\n\n      this.removePredicate(function (item) {\n        return items.includes(item);\n      });\n    }\n  }, {\n    key: \"removePredicate\",\n    value: function removePredicate(predicate) {\n      for (var i = 0; i < this._items.length;) {\n        if (predicate(this._items[i])) {\n          this._items.splice(i, 1);\n        } else {\n          i++;\n        }\n      }\n    }\n  }, {\n    key: \"empty\",\n    value: function empty() {\n      this._items.length = 0;\n    }\n  }, {\n    key: \"contains\",\n    value: function contains(item) {\n      return this._items.includes(item);\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this._items.length === 0;\n    } // Useful for other parts of jsdom\n\n  }, {\n    key: Symbol.iterator,\n    value: function value() {\n      return this._items[Symbol.iterator]();\n    }\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return this._items.keys();\n    }\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      return this._items[index];\n    }\n  }, {\n    key: \"some\",\n    value: function some(func) {\n      return this._items.some(func);\n    } // https://dom.spec.whatwg.org/#concept-ordered-set-parser\n\n  }, {\n    key: \"serialize\",\n    // https://dom.spec.whatwg.org/#concept-ordered-set-serializer\n    value: function serialize() {\n      return this._items.join(\" \");\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._items.length;\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(input) {\n      var tokens = new OrderedSet();\n\n      var _iterator = _createForOfIteratorHelper(input.split(/[\\t\\n\\f\\r ]+/)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var token = _step.value;\n\n          if (token) {\n            tokens.append(token);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return tokens;\n    }\n  }]);\n\n  return OrderedSet;\n}();","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/helpers/ordered-set.js"],"names":["module","exports","_items","item","contains","push","unshift","replacement","seen","i","length","isInstance","splice","items","removePredicate","includes","predicate","Symbol","iterator","keys","index","func","some","join","input","tokens","OrderedSet","split","token","append"],"mappings":"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","sourcesContent":["\"use strict\";\n\n// https://infra.spec.whatwg.org/#sets\n//\n// Only use this class if a Set cannot be used, e.g. when \"replace\" operation is needed, since there's no way to replace\n// an element while keep the relative order using a Set, only remove and then add something at the end.\n\nmodule.exports = class OrderedSet {\n  constructor() {\n    this._items = [];\n  }\n\n  append(item) {\n    if (!this.contains(item)) {\n      this._items.push(item);\n    }\n  }\n\n  prepend(item) {\n    if (!this.contains(item)) {\n      this._items.unshift(item);\n    }\n  }\n\n  replace(item, replacement) {\n    let seen = false;\n    for (let i = 0; i < this._items.length;) {\n      const isInstance = this._items[i] === item || this._items[i] === replacement;\n      if (seen && isInstance) {\n        this._items.splice(i, 1);\n      } else {\n        if (isInstance) {\n          this._items[i] = replacement;\n          seen = true;\n        }\n        i++;\n      }\n    }\n  }\n\n  remove(...items) {\n    this.removePredicate(item => items.includes(item));\n  }\n\n  removePredicate(predicate) {\n    for (let i = 0; i < this._items.length;) {\n      if (predicate(this._items[i])) {\n        this._items.splice(i, 1);\n      } else {\n        i++;\n      }\n    }\n  }\n\n  empty() {\n    this._items.length = 0;\n  }\n\n  contains(item) {\n    return this._items.includes(item);\n  }\n\n  get size() {\n    return this._items.length;\n  }\n\n  isEmpty() {\n    return this._items.length === 0;\n  }\n\n  // Useful for other parts of jsdom\n\n  [Symbol.iterator]() {\n    return this._items[Symbol.iterator]();\n  }\n\n  keys() {\n    return this._items.keys();\n  }\n\n  get(index) {\n    return this._items[index];\n  }\n\n  some(func) {\n    return this._items.some(func);\n  }\n\n  // https://dom.spec.whatwg.org/#concept-ordered-set-parser\n  static parse(input) {\n    const tokens = new OrderedSet();\n    for (const token of input.split(/[\\t\\n\\f\\r ]+/)) {\n      if (token) {\n        tokens.append(token);\n      }\n    }\n    return tokens;\n  }\n\n  // https://dom.spec.whatwg.org/#concept-ordered-set-serializer\n  serialize() {\n    return this._items.join(\" \");\n  }\n};\n"]},"metadata":{},"sourceType":"script"}