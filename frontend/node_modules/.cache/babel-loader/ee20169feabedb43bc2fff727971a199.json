{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar idlUtils = require(\"../generated/utils.js\");\n\nvar _require = require(\"../attributes\"),\n    setAttributeValue = _require.setAttributeValue,\n    removeAttributeByName = _require.removeAttributeByName;\n\nvar validateName = require(\"../helpers/validate-names\").name;\n\nvar DOMException = require(\"domexception\");\n\nvar dataAttrRe = /^data-([^A-Z]*)$/;\n\nfunction attrCamelCase(name) {\n  return name.replace(/-([a-z])/g, function (match, alpha) {\n    return alpha.toUpperCase();\n  });\n}\n\nfunction attrSnakeCase(name) {\n  return name.replace(/[A-Z]/g, function (match) {\n    return \"-\".concat(match.toLowerCase());\n  });\n}\n\nexports.implementation = /*#__PURE__*/function () {\n  function DOMStringMapImpl(args, privateData) {\n    _classCallCheck(this, DOMStringMapImpl);\n\n    this._element = privateData.element;\n  }\n\n  _createClass(DOMStringMapImpl, [{\n    key: idlUtils.namedGet,\n    value: function value(name) {\n      var attributes = this._element.attributes;\n\n      for (var i = 0; i < attributes.length; i++) {\n        var attr = attributes.item(i);\n        var matches = dataAttrRe.exec(attr.localName);\n\n        if (matches && attrCamelCase(matches[1]) === name) {\n          return attr.value;\n        }\n      }\n\n      return undefined;\n    }\n  }, {\n    key: idlUtils.namedSetNew,\n    value: function value(name, _value) {\n      if (/-[a-z]/.test(name)) {\n        throw new DOMException(\"'\".concat(name, \"' is not a valid property name\"), \"SyntaxError\");\n      }\n\n      name = \"data-\".concat(attrSnakeCase(name));\n      validateName(name);\n      setAttributeValue(this._element, name, _value);\n    }\n  }, {\n    key: idlUtils.namedSetExisting,\n    value: function value(name, _value2) {\n      this[idlUtils.namedSetNew](name, _value2);\n    }\n  }, {\n    key: idlUtils.namedDelete,\n    value: function value(name) {\n      name = \"data-\".concat(attrSnakeCase(name));\n      removeAttributeByName(this._element, name);\n    }\n  }, {\n    key: idlUtils.supportedPropertyNames,\n    get: function get() {\n      var result = new Set();\n      var attributes = this._element.attributes;\n\n      for (var i = 0; i < attributes.length; i++) {\n        var attr = attributes.item(i);\n        var matches = dataAttrRe.exec(attr.localName);\n\n        if (matches) {\n          result.add(attrCamelCase(matches[1]));\n        }\n      }\n\n      return result;\n    }\n  }]);\n\n  return DOMStringMapImpl;\n}();","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/nodes/DOMStringMap-impl.js"],"names":["idlUtils","require","setAttributeValue","removeAttributeByName","validateName","name","DOMException","dataAttrRe","attrCamelCase","replace","match","alpha","toUpperCase","attrSnakeCase","toLowerCase","exports","implementation","args","privateData","_element","element","namedGet","attributes","i","length","attr","item","matches","exec","localName","value","undefined","namedSetNew","test","namedSetExisting","namedDelete","supportedPropertyNames","result","Set","add"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst idlUtils = require(\"../generated/utils.js\");\nconst { setAttributeValue, removeAttributeByName } = require(\"../attributes\");\nconst validateName = require(\"../helpers/validate-names\").name;\nconst DOMException = require(\"domexception\");\n\nconst dataAttrRe = /^data-([^A-Z]*)$/;\n\nfunction attrCamelCase(name) {\n  return name.replace(/-([a-z])/g, (match, alpha) => alpha.toUpperCase());\n}\n\nfunction attrSnakeCase(name) {\n  return name.replace(/[A-Z]/g, match => `-${match.toLowerCase()}`);\n}\n\nexports.implementation = class DOMStringMapImpl {\n  constructor(args, privateData) {\n    this._element = privateData.element;\n  }\n  get [idlUtils.supportedPropertyNames]() {\n    const result = new Set();\n    const { attributes } = this._element;\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes.item(i);\n      const matches = dataAttrRe.exec(attr.localName);\n      if (matches) {\n        result.add(attrCamelCase(matches[1]));\n      }\n    }\n    return result;\n  }\n  [idlUtils.namedGet](name) {\n    const { attributes } = this._element;\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes.item(i);\n      const matches = dataAttrRe.exec(attr.localName);\n      if (matches && attrCamelCase(matches[1]) === name) {\n        return attr.value;\n      }\n    }\n    return undefined;\n  }\n  [idlUtils.namedSetNew](name, value) {\n    if (/-[a-z]/.test(name)) {\n      throw new DOMException(`'${name}' is not a valid property name`, \"SyntaxError\");\n    }\n    name = `data-${attrSnakeCase(name)}`;\n    validateName(name);\n    setAttributeValue(this._element, name, value);\n  }\n  [idlUtils.namedSetExisting](name, value) {\n    this[idlUtils.namedSetNew](name, value);\n  }\n  [idlUtils.namedDelete](name) {\n    name = `data-${attrSnakeCase(name)}`;\n    removeAttributeByName(this._element, name);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}