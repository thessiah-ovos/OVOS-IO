{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar _require = require(\"../helpers/traversal\"),\n    isConnected = _require.isConnected,\n    descendantsByHTMLLocalNames = _require.descendantsByHTMLLocalNames;\n\nvar _require2 = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require2.domSymbolTree;\n\nvar HTMLCollection = require(\"../generated/HTMLCollection\");\n\nvar notImplemented = require(\"../../browser/not-implemented\");\n\nvar _require3 = require(\"../../utils\"),\n    reflectURLAttribute = _require3.reflectURLAttribute;\n\nvar Event = require(\"../generated/Event\"); // http://www.whatwg.org/specs/web-apps/current-work/#category-listed\n\n\nvar listedElements = new Set([\"button\", \"fieldset\", \"input\", \"keygen\", \"object\", \"select\", \"textarea\"]); // https://html.spec.whatwg.org/multipage/forms.html#category-submit\n\nvar submittableElements = new Set([\"button\", \"input\", \"object\", \"select\", \"textarea\"]);\nvar encTypes = new Set([\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"]);\nvar methods = new Set([\"get\", \"post\", \"dialog\"]);\nvar constraintValidationPositiveResult = Symbol(\"positive\");\nvar constraintValidationNegativeResult = Symbol(\"negative\");\n\nvar HTMLFormElementImpl = /*#__PURE__*/function (_HTMLElementImpl) {\n  _inherits(HTMLFormElementImpl, _HTMLElementImpl);\n\n  var _super = _createSuper(HTMLFormElementImpl);\n\n  function HTMLFormElementImpl() {\n    _classCallCheck(this, HTMLFormElementImpl);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(HTMLFormElementImpl, [{\n    key: \"_descendantAdded\",\n    value: function _descendantAdded(parent, child) {\n      var form = this;\n\n      var _iterator = _createForOfIteratorHelper(domSymbolTree.treeIterator(child)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var el = _step.value;\n\n          if (typeof el._changedFormOwner === \"function\") {\n            el._changedFormOwner(form);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      _get(_getPrototypeOf(HTMLFormElementImpl.prototype), \"_descendantAdded\", this).apply(this, arguments);\n    }\n  }, {\n    key: \"_descendantRemoved\",\n    value: function _descendantRemoved(parent, child) {\n      var _iterator2 = _createForOfIteratorHelper(domSymbolTree.treeIterator(child)),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var el = _step2.value;\n\n          if (typeof el._changedFormOwner === \"function\") {\n            el._changedFormOwner(null);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      _get(_getPrototypeOf(HTMLFormElementImpl.prototype), \"_descendantRemoved\", this).apply(this, arguments);\n    }\n  }, {\n    key: \"_doSubmit\",\n    value: function _doSubmit() {\n      if (!isConnected(this)) {\n        return;\n      }\n\n      var ev = this._ownerDocument.createEvent(\"HTMLEvents\");\n\n      ev.initEvent(\"submit\", true, true);\n\n      if (this.dispatchEvent(ev)) {\n        this.submit();\n      }\n    }\n  }, {\n    key: \"submit\",\n    value: function submit() {\n      notImplemented(\"HTMLFormElement.prototype.submit\", this._ownerDocument._defaultView);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _iterator3 = _createForOfIteratorHelper(this.elements),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var el = _step3.value;\n\n          if (typeof el._formReset === \"function\") {\n            el._formReset();\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"checkValidity\",\n    // If the checkValidity() method is invoked, the user agent must statically validate the\n    // constraints of the form element, and return true if the constraint validation returned\n    // a positive result, and false if it returned a negative result.\n    value: function checkValidity() {\n      return this._staticallyValidateConstraints().result === constraintValidationPositiveResult;\n    } // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#interactively-validate-the-constraints\n\n  }, {\n    key: \"reportValidity\",\n    value: function reportValidity() {\n      return this.checkValidity();\n    } // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#statically-validate-the-constraints\n\n  }, {\n    key: \"_staticallyValidateConstraints\",\n    value: function _staticallyValidateConstraints() {\n      var controls = [];\n\n      var _iterator4 = _createForOfIteratorHelper(domSymbolTree.treeIterator(this)),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var el = _step4.value;\n\n          if (el.form === this && submittableElements.has(el.nodeName.toLowerCase())) {\n            controls.push(el);\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      var invalidControls = [];\n\n      for (var _i = 0, _controls = controls; _i < _controls.length; _i++) {\n        var control = _controls[_i];\n\n        if (control._isCandidateForConstraintValidation() && !control._satisfiesConstraints()) {\n          invalidControls.push(control);\n        }\n      }\n\n      if (invalidControls.length === 0) {\n        return {\n          result: constraintValidationPositiveResult\n        };\n      }\n\n      var unhandledInvalidControls = [];\n\n      for (var _i2 = 0, _invalidControls = invalidControls; _i2 < _invalidControls.length; _i2++) {\n        var invalidControl = _invalidControls[_i2];\n        var notCancelled = invalidControl.dispatchEvent(Event.createImpl([\"invalid\", {\n          cancelable: true\n        }]));\n\n        if (notCancelled) {\n          unhandledInvalidControls.push(invalidControl);\n        }\n      }\n\n      return {\n        result: constraintValidationNegativeResult,\n        unhandledInvalidControls: unhandledInvalidControls\n      };\n    }\n  }, {\n    key: \"elements\",\n    get: function get() {\n      var _this = this;\n\n      return HTMLCollection.createImpl([], {\n        element: this,\n        query: function query() {\n          return descendantsByHTMLLocalNames(_this, listedElements);\n        }\n      });\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.elements.length;\n    }\n  }, {\n    key: \"method\",\n    get: function get() {\n      var method = this.getAttribute(\"method\");\n\n      if (method) {\n        method = method.toLowerCase();\n      }\n\n      if (methods.has(method)) {\n        return method;\n      }\n\n      return \"get\";\n    },\n    set: function set(V) {\n      this.setAttribute(\"method\", V);\n    }\n  }, {\n    key: \"enctype\",\n    get: function get() {\n      var type = this.getAttribute(\"enctype\");\n\n      if (type) {\n        type = type.toLowerCase();\n      }\n\n      if (encTypes.has(type)) {\n        return type;\n      }\n\n      return \"application/x-www-form-urlencoded\";\n    },\n    set: function set(V) {\n      this.setAttribute(\"enctype\", V);\n    }\n  }, {\n    key: \"action\",\n    get: function get() {\n      var attributeValue = this.getAttribute(\"action\");\n\n      if (attributeValue === null || attributeValue === \"\") {\n        return this._ownerDocument.URL;\n      }\n\n      return reflectURLAttribute(this, \"action\");\n    },\n    set: function set(V) {\n      this.setAttribute(\"action\", V);\n    }\n  }]);\n\n  return HTMLFormElementImpl;\n}(HTMLElementImpl);\n\nmodule.exports = {\n  implementation: HTMLFormElementImpl\n};","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/nodes/HTMLFormElement-impl.js"],"names":["HTMLElementImpl","require","implementation","isConnected","descendantsByHTMLLocalNames","domSymbolTree","HTMLCollection","notImplemented","reflectURLAttribute","Event","listedElements","Set","submittableElements","encTypes","methods","constraintValidationPositiveResult","Symbol","constraintValidationNegativeResult","HTMLFormElementImpl","parent","child","form","treeIterator","el","_changedFormOwner","apply","arguments","ev","_ownerDocument","createEvent","initEvent","dispatchEvent","submit","_defaultView","elements","_formReset","_staticallyValidateConstraints","result","checkValidity","controls","has","nodeName","toLowerCase","push","invalidControls","control","_isCandidateForConstraintValidation","_satisfiesConstraints","length","unhandledInvalidControls","invalidControl","notCancelled","createImpl","cancelable","element","query","method","getAttribute","V","setAttribute","type","attributeValue","URL","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst { isConnected, descendantsByHTMLLocalNames } = require(\"../helpers/traversal\");\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst HTMLCollection = require(\"../generated/HTMLCollection\");\nconst notImplemented = require(\"../../browser/not-implemented\");\nconst { reflectURLAttribute } = require(\"../../utils\");\nconst Event = require(\"../generated/Event\");\n\n// http://www.whatwg.org/specs/web-apps/current-work/#category-listed\nconst listedElements = new Set([\"button\", \"fieldset\", \"input\", \"keygen\", \"object\", \"select\", \"textarea\"]);\n\n// https://html.spec.whatwg.org/multipage/forms.html#category-submit\nconst submittableElements = new Set([\"button\", \"input\", \"object\", \"select\", \"textarea\"]);\n\nconst encTypes = new Set([\n  \"application/x-www-form-urlencoded\",\n  \"multipart/form-data\",\n  \"text/plain\"\n]);\n\nconst methods = new Set([\n  \"get\",\n  \"post\",\n  \"dialog\"\n]);\n\nconst constraintValidationPositiveResult = Symbol(\"positive\");\nconst constraintValidationNegativeResult = Symbol(\"negative\");\n\nclass HTMLFormElementImpl extends HTMLElementImpl {\n  _descendantAdded(parent, child) {\n    const form = this;\n    for (const el of domSymbolTree.treeIterator(child)) {\n      if (typeof el._changedFormOwner === \"function\") {\n        el._changedFormOwner(form);\n      }\n    }\n\n    super._descendantAdded.apply(this, arguments);\n  }\n\n  _descendantRemoved(parent, child) {\n    for (const el of domSymbolTree.treeIterator(child)) {\n      if (typeof el._changedFormOwner === \"function\") {\n        el._changedFormOwner(null);\n      }\n    }\n\n    super._descendantRemoved.apply(this, arguments);\n  }\n\n  get elements() {\n    return HTMLCollection.createImpl([], {\n      element: this,\n      query: () => descendantsByHTMLLocalNames(this, listedElements)\n    });\n  }\n\n  get length() {\n    return this.elements.length;\n  }\n\n  _doSubmit() {\n    if (!isConnected(this)) {\n      return;\n    }\n    const ev = this._ownerDocument.createEvent(\"HTMLEvents\");\n    ev.initEvent(\"submit\", true, true);\n    if (this.dispatchEvent(ev)) {\n      this.submit();\n    }\n  }\n\n  submit() {\n    notImplemented(\"HTMLFormElement.prototype.submit\", this._ownerDocument._defaultView);\n  }\n\n  reset() {\n    for (const el of this.elements) {\n      if (typeof el._formReset === \"function\") {\n        el._formReset();\n      }\n    }\n  }\n\n  get method() {\n    let method = this.getAttribute(\"method\");\n    if (method) {\n      method = method.toLowerCase();\n    }\n\n    if (methods.has(method)) {\n      return method;\n    }\n    return \"get\";\n  }\n\n  set method(V) {\n    this.setAttribute(\"method\", V);\n  }\n\n  get enctype() {\n    let type = this.getAttribute(\"enctype\");\n    if (type) {\n      type = type.toLowerCase();\n    }\n\n    if (encTypes.has(type)) {\n      return type;\n    }\n    return \"application/x-www-form-urlencoded\";\n  }\n\n  set enctype(V) {\n    this.setAttribute(\"enctype\", V);\n  }\n\n  get action() {\n    const attributeValue = this.getAttribute(\"action\");\n    if (attributeValue === null || attributeValue === \"\") {\n      return this._ownerDocument.URL;\n    }\n\n    return reflectURLAttribute(this, \"action\");\n  }\n\n  set action(V) {\n    this.setAttribute(\"action\", V);\n  }\n\n  // If the checkValidity() method is invoked, the user agent must statically validate the\n  // constraints of the form element, and return true if the constraint validation returned\n  // a positive result, and false if it returned a negative result.\n  checkValidity() {\n    return this._staticallyValidateConstraints().result === constraintValidationPositiveResult;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#interactively-validate-the-constraints\n  reportValidity() {\n    return this.checkValidity();\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#statically-validate-the-constraints\n  _staticallyValidateConstraints() {\n    const controls = [];\n    for (const el of domSymbolTree.treeIterator(this)) {\n      if (el.form === this && submittableElements.has(el.nodeName.toLowerCase())) {\n        controls.push(el);\n      }\n    }\n\n    const invalidControls = [];\n\n    for (const control of controls) {\n      if (control._isCandidateForConstraintValidation() && !control._satisfiesConstraints()) {\n        invalidControls.push(control);\n      }\n    }\n\n    if (invalidControls.length === 0) {\n      return { result: constraintValidationPositiveResult };\n    }\n\n    const unhandledInvalidControls = [];\n    for (const invalidControl of invalidControls) {\n      const notCancelled = invalidControl.dispatchEvent(Event.createImpl([\"invalid\", { cancelable: true }]));\n      if (notCancelled) {\n        unhandledInvalidControls.push(invalidControl);\n      }\n    }\n\n    return { result: constraintValidationNegativeResult, unhandledInvalidControls };\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLFormElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}