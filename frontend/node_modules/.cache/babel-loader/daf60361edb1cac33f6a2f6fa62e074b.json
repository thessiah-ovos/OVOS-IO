{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _require = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require.domSymbolTree;\n\nvar _require2 = require(\"../helpers/namespaces\"),\n    SVG_NS = _require2.SVG_NS;\n\nvar _require3 = require(\"../../utils\"),\n    mixin = _require3.mixin;\n\nvar SVGAnimatedString = require(\"../generated/SVGAnimatedString\");\n\nvar ElementImpl = require(\"./Element-impl\").implementation;\n\nvar ElementCSSInlineStyleImpl = require(\"./ElementCSSInlineStyle-impl\").implementation;\n\nvar GlobalEventHandlersImpl = require(\"./GlobalEventHandlers-impl\").implementation;\n\nvar HTMLAndSVGElementSharedImpl = require(\"./HTMLAndSVGElementShared-impl\").implementation;\n\nvar SVGElementImpl = /*#__PURE__*/function (_ElementImpl) {\n  _inherits(SVGElementImpl, _ElementImpl);\n\n  var _super = _createSuper(SVGElementImpl);\n\n  function SVGElementImpl(args, privateData) {\n    var _this;\n\n    _classCallCheck(this, SVGElementImpl);\n\n    _this = _super.call(this, args, privateData);\n\n    _this._initHTMLAndSVGElement();\n\n    _this._initElementCSSInlineStyle();\n\n    _this._initGlobalEvents();\n\n    return _this;\n  }\n\n  _createClass(SVGElementImpl, [{\n    key: \"className\",\n    get: function get() {\n      return SVGAnimatedString.createImpl([], {\n        element: this,\n        attribute: \"class\"\n      });\n    }\n  }, {\n    key: \"ownerSVGElement\",\n    get: function get() {\n      var e = domSymbolTree.parent(this);\n\n      while (e && e.namespaceURI === SVG_NS) {\n        if (e.localName === \"svg\") {\n          return e;\n        }\n\n        e = domSymbolTree.parent(e);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"viewportElement\",\n    get: function get() {\n      // TODO: <symbol>/<use> may make this different from ownerSVGElement.\n      return this.ownerSVGElement;\n    }\n  }]);\n\n  return SVGElementImpl;\n}(ElementImpl);\n\nSVGElementImpl.attributeRegistry = new Map();\nmixin(SVGElementImpl.prototype, ElementCSSInlineStyleImpl.prototype);\nmixin(SVGElementImpl.prototype, GlobalEventHandlersImpl.prototype);\nmixin(SVGElementImpl.prototype, HTMLAndSVGElementSharedImpl.prototype);\nexports.implementation = SVGElementImpl;","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/nodes/SVGElement-impl.js"],"names":["require","domSymbolTree","SVG_NS","mixin","SVGAnimatedString","ElementImpl","implementation","ElementCSSInlineStyleImpl","GlobalEventHandlersImpl","HTMLAndSVGElementSharedImpl","SVGElementImpl","args","privateData","_initHTMLAndSVGElement","_initElementCSSInlineStyle","_initGlobalEvents","createImpl","element","attribute","e","parent","namespaceURI","localName","ownerSVGElement","attributeRegistry","Map","prototype","exports"],"mappings":"AAAA;;;;;;;;;;eAE0BA,OAAO,CAAC,+BAAD,C;IAAzBC,a,YAAAA,a;;gBACWD,OAAO,CAAC,uBAAD,C;IAAlBE,M,aAAAA,M;;gBACUF,OAAO,CAAC,aAAD,C;IAAjBG,K,aAAAA,K;;AACR,IAAMC,iBAAiB,GAAGJ,OAAO,CAAC,gCAAD,CAAjC;;AACA,IAAMK,WAAW,GAAGL,OAAO,CAAC,gBAAD,CAAP,CAA0BM,cAA9C;;AACA,IAAMC,yBAAyB,GAAGP,OAAO,CAAC,8BAAD,CAAP,CAAwCM,cAA1E;;AACA,IAAME,uBAAuB,GAAGR,OAAO,CAAC,4BAAD,CAAP,CAAsCM,cAAtE;;AACA,IAAMG,2BAA2B,GAAGT,OAAO,CAAC,gCAAD,CAAP,CAA0CM,cAA9E;;IAEMI,c;;;;;AACJ,0BAAYC,IAAZ,EAAkBC,WAAlB,EAA+B;AAAA;;AAAA;;AAC7B,8BAAMD,IAAN,EAAYC,WAAZ;;AACA,UAAKC,sBAAL;;AACA,UAAKC,0BAAL;;AACA,UAAKC,iBAAL;;AAJ6B;AAK9B;;;;wBAEe;AACd,aAAOX,iBAAiB,CAACY,UAAlB,CAA6B,EAA7B,EAAiC;AACtCC,QAAAA,OAAO,EAAE,IAD6B;AAEtCC,QAAAA,SAAS,EAAE;AAF2B,OAAjC,CAAP;AAID;;;wBAEqB;AACpB,UAAIC,CAAC,GAAGlB,aAAa,CAACmB,MAAd,CAAqB,IAArB,CAAR;;AACA,aAAOD,CAAC,IAAIA,CAAC,CAACE,YAAF,KAAmBnB,MAA/B,EAAuC;AACrC,YAAIiB,CAAC,CAACG,SAAF,KAAgB,KAApB,EAA2B;AACzB,iBAAOH,CAAP;AACD;;AACDA,QAAAA,CAAC,GAAGlB,aAAa,CAACmB,MAAd,CAAqBD,CAArB,CAAJ;AACD;;AAED,aAAO,IAAP;AACD;;;wBAEqB;AACpB;AACA,aAAO,KAAKI,eAAZ;AACD;;;;EA9B0BlB,W;;AAiC7BK,cAAc,CAACc,iBAAf,GAAmC,IAAIC,GAAJ,EAAnC;AAEAtB,KAAK,CAACO,cAAc,CAACgB,SAAhB,EAA2BnB,yBAAyB,CAACmB,SAArD,CAAL;AACAvB,KAAK,CAACO,cAAc,CAACgB,SAAhB,EAA2BlB,uBAAuB,CAACkB,SAAnD,CAAL;AACAvB,KAAK,CAACO,cAAc,CAACgB,SAAhB,EAA2BjB,2BAA2B,CAACiB,SAAvD,CAAL;AAEAC,OAAO,CAACrB,cAAR,GAAyBI,cAAzB","sourcesContent":["\"use strict\";\n\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst { SVG_NS } = require(\"../helpers/namespaces\");\nconst { mixin } = require(\"../../utils\");\nconst SVGAnimatedString = require(\"../generated/SVGAnimatedString\");\nconst ElementImpl = require(\"./Element-impl\").implementation;\nconst ElementCSSInlineStyleImpl = require(\"./ElementCSSInlineStyle-impl\").implementation;\nconst GlobalEventHandlersImpl = require(\"./GlobalEventHandlers-impl\").implementation;\nconst HTMLAndSVGElementSharedImpl = require(\"./HTMLAndSVGElementShared-impl\").implementation;\n\nclass SVGElementImpl extends ElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._initHTMLAndSVGElement();\n    this._initElementCSSInlineStyle();\n    this._initGlobalEvents();\n  }\n\n  get className() {\n    return SVGAnimatedString.createImpl([], {\n      element: this,\n      attribute: \"class\"\n    });\n  }\n\n  get ownerSVGElement() {\n    let e = domSymbolTree.parent(this);\n    while (e && e.namespaceURI === SVG_NS) {\n      if (e.localName === \"svg\") {\n        return e;\n      }\n      e = domSymbolTree.parent(e);\n    }\n\n    return null;\n  }\n\n  get viewportElement() {\n    // TODO: <symbol>/<use> may make this different from ownerSVGElement.\n    return this.ownerSVGElement;\n  }\n}\n\nSVGElementImpl.attributeRegistry = new Map();\n\nmixin(SVGElementImpl.prototype, ElementCSSInlineStyleImpl.prototype);\nmixin(SVGElementImpl.prototype, GlobalEventHandlersImpl.prototype);\nmixin(SVGElementImpl.prototype, HTMLAndSVGElementSharedImpl.prototype);\n\nexports.implementation = SVGElementImpl;\n"]},"metadata":{},"sourceType":"script"}