{"ast":null,"code":"\"use strict\"; // Actual implementation of the Performance class.\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar clockIsAccurate = require(\"./clock-is-accurate\");\n\nvar calculateClockOffset = require(\"./calculate-clock-offset\");\n\nvar _require = require(\"./utils\"),\n    hrtime = _require.hrtime,\n    toMS = _require.toMS;\n\nvar kTimeOrigin = Symbol(\"time origin\");\nvar kTimeOriginTimestamp = Symbol(\"time origin timestamp\");\n\nvar Performance = /*#__PURE__*/function () {\n  function Performance() {\n    _classCallCheck(this, Performance);\n\n    // Time origin.\n    var timeOrigin = hrtime();\n    this[kTimeOrigin] = timeOrigin;\n\n    if (clockIsAccurate) {\n      // Let |t1| be the DOMHighResTimeStamp representing the high resolution Unix time at which the global monotonic\n      // clock is zero. This has to be calculated for every Performance object to account for clock drifts.\n      var t1 = calculateClockOffset(); // Let |t2| be the DOMHighResTimeStamp representing the high resolution time value of the global monotonic clock\n      // at global's time origin.\n\n      var t2 = toMS(timeOrigin); // Return the sum of |t1| and |t2|.\n\n      this[kTimeOriginTimestamp] = t1 + t2;\n    } else {\n      // Clock isn't accurate enough. Use millisecond accuracy per spec.\n      var cur = Date.now();\n      this[kTimeOriginTimestamp] = cur;\n    }\n  } // The timeOrigin getter actually returns the time origin timestamp, not the raw time origin.\n\n\n  _createClass(Performance, [{\n    key: \"now\",\n    value: function now() {\n      var diff = toMS(hrtime(this[kTimeOrigin]));\n      return clockIsAccurate ? diff : Math.round(diff);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        timeOrigin: this.timeOrigin\n      };\n    }\n  }, {\n    key: \"timeOrigin\",\n    get: function get() {\n      return this[kTimeOriginTimestamp];\n    }\n  }]);\n\n  return Performance;\n}();\n\nmodule.exports = {\n  Performance: Performance\n};","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/w3c-hr-time/lib/performance.js"],"names":["clockIsAccurate","require","calculateClockOffset","hrtime","toMS","kTimeOrigin","Symbol","kTimeOriginTimestamp","Performance","timeOrigin","t1","t2","cur","Date","now","diff","Math","round","module","exports"],"mappings":"AAAA,a,CAEA;;;;;;AAEA,IAAMA,eAAe,GAAGC,OAAO,CAAC,qBAAD,CAA/B;;AACA,IAAMC,oBAAoB,GAAGD,OAAO,CAAC,0BAAD,CAApC;;eACyBA,OAAO,CAAC,SAAD,C;IAAxBE,M,YAAAA,M;IAAQC,I,YAAAA,I;;AAEhB,IAAMC,WAAW,GAAGC,MAAM,CAAC,aAAD,CAA1B;AACA,IAAMC,oBAAoB,GAAGD,MAAM,CAAC,uBAAD,CAAnC;;IAEME,W;AACJ,yBAAc;AAAA;;AACZ;AACA,QAAMC,UAAU,GAAGN,MAAM,EAAzB;AACA,SAAKE,WAAL,IAAoBI,UAApB;;AAEA,QAAIT,eAAJ,EAAqB;AACnB;AACA;AACA,UAAMU,EAAE,GAAGR,oBAAoB,EAA/B,CAHmB,CAKnB;AACA;;AACA,UAAMS,EAAE,GAAGP,IAAI,CAACK,UAAD,CAAf,CAPmB,CASnB;;AACA,WAAKF,oBAAL,IAA6BG,EAAE,GAAGC,EAAlC;AACD,KAXD,MAWO;AACL;AACA,UAAMC,GAAG,GAAGC,IAAI,CAACC,GAAL,EAAZ;AACA,WAAKP,oBAAL,IAA6BK,GAA7B;AACD;AACF,G,CAED;;;;;0BAKM;AACJ,UAAMG,IAAI,GAAGX,IAAI,CAACD,MAAM,CAAC,KAAKE,WAAL,CAAD,CAAP,CAAjB;AACA,aAAOL,eAAe,GAAGe,IAAH,GAAUC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAhC;AACD;;;6BAEQ;AACP,aAAO;AACLN,QAAAA,UAAU,EAAE,KAAKA;AADZ,OAAP;AAGD;;;wBAbgB;AACf,aAAO,KAAKF,oBAAL,CAAP;AACD;;;;;;AAcHW,MAAM,CAACC,OAAP,GAAiB;AAAEX,EAAAA,WAAW,EAAXA;AAAF,CAAjB","sourcesContent":["\"use strict\";\n\n// Actual implementation of the Performance class.\n\nconst clockIsAccurate = require(\"./clock-is-accurate\");\nconst calculateClockOffset = require(\"./calculate-clock-offset\");\nconst { hrtime, toMS } = require(\"./utils\");\n\nconst kTimeOrigin = Symbol(\"time origin\");\nconst kTimeOriginTimestamp = Symbol(\"time origin timestamp\");\n\nclass Performance {\n  constructor() {\n    // Time origin.\n    const timeOrigin = hrtime();\n    this[kTimeOrigin] = timeOrigin;\n\n    if (clockIsAccurate) {\n      // Let |t1| be the DOMHighResTimeStamp representing the high resolution Unix time at which the global monotonic\n      // clock is zero. This has to be calculated for every Performance object to account for clock drifts.\n      const t1 = calculateClockOffset();\n\n      // Let |t2| be the DOMHighResTimeStamp representing the high resolution time value of the global monotonic clock\n      // at global's time origin.\n      const t2 = toMS(timeOrigin);\n\n      // Return the sum of |t1| and |t2|.\n      this[kTimeOriginTimestamp] = t1 + t2;\n    } else {\n      // Clock isn't accurate enough. Use millisecond accuracy per spec.\n      const cur = Date.now();\n      this[kTimeOriginTimestamp] = cur;\n    }\n  }\n\n  // The timeOrigin getter actually returns the time origin timestamp, not the raw time origin.\n  get timeOrigin() {\n    return this[kTimeOriginTimestamp];\n  }\n\n  now() {\n    const diff = toMS(hrtime(this[kTimeOrigin]));\n    return clockIsAccurate ? diff : Math.round(diff);\n  }\n\n  toJSON() {\n    return {\n      timeOrigin: this.timeOrigin\n    };\n  }\n}\n\nmodule.exports = { Performance };\n"]},"metadata":{},"sourceType":"script"}