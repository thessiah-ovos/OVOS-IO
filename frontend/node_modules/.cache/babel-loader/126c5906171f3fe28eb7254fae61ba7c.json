{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"os\"),\n    EOL = _require.EOL;\n\nvar Blob = require(\"../generated/Blob\");\n\nfunction convertLineEndingsToNative(s) {\n  return s.replace(/\\r\\n|\\r|\\n/g, EOL);\n}\n\nexports.implementation = /*#__PURE__*/function () {\n  function BlobImpl(args) {\n    _classCallCheck(this, BlobImpl);\n\n    var parts = args[0];\n    var properties = args[1];\n    var buffers = [];\n\n    if (parts !== undefined) {\n      var _iterator = _createForOfIteratorHelper(parts),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var part = _step.value;\n          var buffer = void 0;\n\n          if (part instanceof ArrayBuffer) {\n            buffer = Buffer.from(part);\n          } else if (ArrayBuffer.isView(part)) {\n            buffer = Buffer.from(part.buffer, part.byteOffset, part.byteLength);\n          } else if (Blob.isImpl(part)) {\n            buffer = part._buffer;\n          } else {\n            var s = part;\n\n            if (properties.endings === \"native\") {\n              s = convertLineEndingsToNative(part);\n            }\n\n            buffer = Buffer.from(s);\n          }\n\n          buffers.push(buffer);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    this._buffer = Buffer.concat(buffers);\n    this.type = properties.type;\n\n    if (/[^\\u0020-\\u007E]/.test(this.type)) {\n      this.type = \"\";\n    } else {\n      this.type = this.type.toLowerCase();\n    }\n  }\n\n  _createClass(BlobImpl, [{\n    key: \"slice\",\n    value: function slice(start, end, contentType) {\n      var size = this.size;\n      var relativeStart;\n      var relativeEnd;\n      var relativeContentType;\n\n      if (start === undefined) {\n        relativeStart = 0;\n      } else if (start < 0) {\n        relativeStart = Math.max(size + start, 0);\n      } else {\n        relativeStart = Math.min(start, size);\n      }\n\n      if (end === undefined) {\n        relativeEnd = size;\n      } else if (end < 0) {\n        relativeEnd = Math.max(size + end, 0);\n      } else {\n        relativeEnd = Math.min(end, size);\n      }\n\n      if (contentType === undefined) {\n        relativeContentType = \"\";\n      } else {\n        // sanitization (lower case and invalid char check) is done in the\n        // constructor\n        relativeContentType = contentType;\n      }\n\n      var span = Math.max(relativeEnd - relativeStart, 0);\n      var buffer = this._buffer;\n      var slicedBuffer = buffer.slice(relativeStart, relativeStart + span);\n      var blob = Blob.createImpl([[], {\n        type: relativeContentType\n      }], {});\n      blob._buffer = slicedBuffer;\n      return blob;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._buffer.length;\n    }\n  }]);\n\n  return BlobImpl;\n}();","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/file-api/Blob-impl.js"],"names":["require","EOL","Blob","convertLineEndingsToNative","s","replace","exports","implementation","args","parts","properties","buffers","undefined","part","buffer","ArrayBuffer","Buffer","from","isView","byteOffset","byteLength","isImpl","_buffer","endings","push","concat","type","test","toLowerCase","start","end","contentType","size","relativeStart","relativeEnd","relativeContentType","Math","max","min","span","slicedBuffer","slice","blob","createImpl","length"],"mappings":"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","sourcesContent":["\"use strict\";\nconst { EOL } = require(\"os\");\nconst Blob = require(\"../generated/Blob\");\n\nfunction convertLineEndingsToNative(s) {\n  return s.replace(/\\r\\n|\\r|\\n/g, EOL);\n}\n\nexports.implementation = class BlobImpl {\n  constructor(args) {\n    const parts = args[0];\n    const properties = args[1];\n\n    const buffers = [];\n\n    if (parts !== undefined) {\n      for (const part of parts) {\n        let buffer;\n        if (part instanceof ArrayBuffer) {\n          buffer = Buffer.from(part);\n        } else if (ArrayBuffer.isView(part)) {\n          buffer = Buffer.from(part.buffer, part.byteOffset, part.byteLength);\n        } else if (Blob.isImpl(part)) {\n          buffer = part._buffer;\n        } else {\n          let s = part;\n          if (properties.endings === \"native\") {\n            s = convertLineEndingsToNative(part);\n          }\n          buffer = Buffer.from(s);\n        }\n        buffers.push(buffer);\n      }\n    }\n\n    this._buffer = Buffer.concat(buffers);\n\n    this.type = properties.type;\n    if (/[^\\u0020-\\u007E]/.test(this.type)) {\n      this.type = \"\";\n    } else {\n      this.type = this.type.toLowerCase();\n    }\n  }\n\n  get size() {\n    return this._buffer.length;\n  }\n\n  slice(start, end, contentType) {\n    const { size } = this;\n\n    let relativeStart;\n    let relativeEnd;\n    let relativeContentType;\n\n    if (start === undefined) {\n      relativeStart = 0;\n    } else if (start < 0) {\n      relativeStart = Math.max(size + start, 0);\n    } else {\n      relativeStart = Math.min(start, size);\n    }\n    if (end === undefined) {\n      relativeEnd = size;\n    } else if (end < 0) {\n      relativeEnd = Math.max(size + end, 0);\n    } else {\n      relativeEnd = Math.min(end, size);\n    }\n\n    if (contentType === undefined) {\n      relativeContentType = \"\";\n    } else {\n      // sanitization (lower case and invalid char check) is done in the\n      // constructor\n      relativeContentType = contentType;\n    }\n\n    const span = Math.max(relativeEnd - relativeStart, 0);\n\n    const buffer = this._buffer;\n    const slicedBuffer = buffer.slice(\n      relativeStart,\n      relativeStart + span\n    );\n\n    const blob = Blob.createImpl([[], { type: relativeContentType }], {});\n    blob._buffer = slicedBuffer;\n    return blob;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}