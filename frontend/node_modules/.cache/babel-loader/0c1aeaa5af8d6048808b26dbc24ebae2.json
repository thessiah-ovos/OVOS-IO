{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar DOMException = require(\"domexception\");\n\nvar idlUtils = require(\"../generated/utils.js\");\n\nvar attributes = require(\"../attributes.js\");\n\nvar _require = require(\"../helpers/namespaces\"),\n    HTML_NS = _require.HTML_NS;\n\nexports.implementation = /*#__PURE__*/function () {\n  function NamedNodeMapImpl(args, privateData) {\n    _classCallCheck(this, NamedNodeMapImpl);\n\n    this._element = privateData.element;\n  }\n\n  _createClass(NamedNodeMapImpl, [{\n    key: \"item\",\n    value: function item(index) {\n      if (index >= this._attributeList.length) {\n        return null;\n      }\n\n      return this._attributeList[index];\n    }\n  }, {\n    key: \"getNamedItem\",\n    value: function getNamedItem(qualifiedName) {\n      return attributes.getAttributeByName(this._element, qualifiedName);\n    }\n  }, {\n    key: \"getNamedItemNS\",\n    value: function getNamedItemNS(namespace, localName) {\n      return attributes.getAttributeByNameNS(this._element, namespace, localName);\n    }\n  }, {\n    key: \"setNamedItem\",\n    value: function setNamedItem(attr) {\n      return attributes.setAttribute(this._element, attr);\n    }\n  }, {\n    key: \"setNamedItemNS\",\n    value: function setNamedItemNS(attr) {\n      return attributes.setAttribute(this._element, attr);\n    }\n  }, {\n    key: \"removeNamedItem\",\n    value: function removeNamedItem(qualifiedName) {\n      var attr = attributes.removeAttributeByName(this._element, qualifiedName);\n\n      if (attr === null) {\n        throw new DOMException(\"Tried to remove an attribute that was not present\", \"NotFoundError\");\n      }\n\n      return attr;\n    }\n  }, {\n    key: \"removeNamedItemNS\",\n    value: function removeNamedItemNS(namespace, localName) {\n      var attr = attributes.removeAttributeByNameNS(this._element, namespace, localName);\n\n      if (attr === null) {\n        throw new DOMException(\"Tried to remove an attribute that was not present\", \"NotFoundError\");\n      }\n\n      return attr;\n    }\n  }, {\n    key: \"_attributeList\",\n    get: function get() {\n      return this._element._attributeList;\n    }\n  }, {\n    key: idlUtils.supportedPropertyIndices,\n    get: function get() {\n      return this._attributeList.keys();\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._attributeList.length;\n    }\n  }, {\n    key: idlUtils.supportedPropertyNames,\n    get: function get() {\n      var names = new Set(this._attributeList.map(function (a) {\n        return a._qualifiedName;\n      }));\n      var el = this._element;\n\n      if (el._namespaceURI === HTML_NS && el._ownerDocument._parsingMode === \"html\") {\n        var _iterator = _createForOfIteratorHelper(names),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var name = _step.value;\n            var lowercaseName = name.toLowerCase();\n\n            if (lowercaseName !== name) {\n              names.delete(name);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      return names;\n    }\n  }]);\n\n  return NamedNodeMapImpl;\n}();","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/attributes/NamedNodeMap-impl.js"],"names":["DOMException","require","idlUtils","attributes","HTML_NS","exports","implementation","args","privateData","_element","element","index","_attributeList","length","qualifiedName","getAttributeByName","namespace","localName","getAttributeByNameNS","attr","setAttribute","removeAttributeByName","removeAttributeByNameNS","supportedPropertyIndices","keys","supportedPropertyNames","names","Set","map","a","_qualifiedName","el","_namespaceURI","_ownerDocument","_parsingMode","name","lowercaseName","toLowerCase","delete"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst DOMException = require(\"domexception\");\nconst idlUtils = require(\"../generated/utils.js\");\nconst attributes = require(\"../attributes.js\");\nconst { HTML_NS } = require(\"../helpers/namespaces\");\n\nexports.implementation = class NamedNodeMapImpl {\n  constructor(args, privateData) {\n    this._element = privateData.element;\n  }\n  get _attributeList() {\n    return this._element._attributeList;\n  }\n\n  get [idlUtils.supportedPropertyIndices]() {\n    return this._attributeList.keys();\n  }\n  get length() {\n    return this._attributeList.length;\n  }\n  item(index) {\n    if (index >= this._attributeList.length) {\n      return null;\n    }\n    return this._attributeList[index];\n  }\n\n  get [idlUtils.supportedPropertyNames]() {\n    const names = new Set(this._attributeList.map(a => a._qualifiedName));\n    const el = this._element;\n    if (el._namespaceURI === HTML_NS && el._ownerDocument._parsingMode === \"html\") {\n      for (const name of names) {\n        const lowercaseName = name.toLowerCase();\n        if (lowercaseName !== name) {\n          names.delete(name);\n        }\n      }\n    }\n    return names;\n  }\n  getNamedItem(qualifiedName) {\n    return attributes.getAttributeByName(this._element, qualifiedName);\n  }\n  getNamedItemNS(namespace, localName) {\n    return attributes.getAttributeByNameNS(this._element, namespace, localName);\n  }\n  setNamedItem(attr) {\n    return attributes.setAttribute(this._element, attr);\n  }\n  setNamedItemNS(attr) {\n    return attributes.setAttribute(this._element, attr);\n  }\n  removeNamedItem(qualifiedName) {\n    const attr = attributes.removeAttributeByName(this._element, qualifiedName);\n    if (attr === null) {\n      throw new DOMException(\"Tried to remove an attribute that was not present\", \"NotFoundError\");\n    }\n    return attr;\n  }\n  removeNamedItemNS(namespace, localName) {\n    const attr = attributes.removeAttributeByNameNS(this._element, namespace, localName);\n    if (attr === null) {\n      throw new DOMException(\"Tried to remove an attribute that was not present\", \"NotFoundError\");\n    }\n    return attr;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}