{"ast":null,"code":"\"use strict\";\n\nvar _require = require(\"whatwg-url\"),\n    percentDecode = _require.percentDecode;\n\nvar _require2 = require(\"abab\"),\n    atob = _require2.atob;\n\nexports.stripLeadingAndTrailingASCIIWhitespace = function (string) {\n  return string.replace(/^[ \\t\\n\\f\\r]+/, \"\").replace(/[ \\t\\n\\f\\r]+$/, \"\");\n};\n\nexports.stringPercentDecode = function (input) {\n  return percentDecode(Buffer.from(input, \"utf-8\"));\n};\n\nexports.isomorphicDecode = function (input) {\n  return input.toString(\"binary\");\n};\n\nexports.forgivingBase64Decode = function (data) {\n  var asString = atob(data);\n\n  if (asString === null) {\n    return null;\n  }\n\n  return Buffer.from(asString, \"binary\");\n};","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/data-urls/lib/utils.js"],"names":["require","percentDecode","atob","exports","stripLeadingAndTrailingASCIIWhitespace","string","replace","stringPercentDecode","input","Buffer","from","isomorphicDecode","toString","forgivingBase64Decode","data","asString"],"mappings":"AAAA;;eAC0BA,OAAO,CAAC,YAAD,C;IAAzBC,a,YAAAA,a;;gBACSD,OAAO,CAAC,MAAD,C;IAAhBE,I,aAAAA,I;;AAERC,OAAO,CAACC,sCAAR,GAAiD,UAAAC,MAAM,EAAI;AACzD,SAAOA,MAAM,CAACC,OAAP,CAAe,eAAf,EAAgC,EAAhC,EAAoCA,OAApC,CAA4C,eAA5C,EAA6D,EAA7D,CAAP;AACD,CAFD;;AAIAH,OAAO,CAACI,mBAAR,GAA8B,UAAAC,KAAK,EAAI;AACrC,SAAOP,aAAa,CAACQ,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmB,OAAnB,CAAD,CAApB;AACD,CAFD;;AAIAL,OAAO,CAACQ,gBAAR,GAA2B,UAAAH,KAAK,EAAI;AAClC,SAAOA,KAAK,CAACI,QAAN,CAAe,QAAf,CAAP;AACD,CAFD;;AAIAT,OAAO,CAACU,qBAAR,GAAgC,UAAAC,IAAI,EAAI;AACtC,MAAMC,QAAQ,GAAGb,IAAI,CAACY,IAAD,CAArB;;AACA,MAAIC,QAAQ,KAAK,IAAjB,EAAuB;AACrB,WAAO,IAAP;AACD;;AACD,SAAON,MAAM,CAACC,IAAP,CAAYK,QAAZ,EAAsB,QAAtB,CAAP;AACD,CAND","sourcesContent":["\"use strict\";\nconst { percentDecode } = require(\"whatwg-url\");\nconst { atob } = require(\"abab\");\n\nexports.stripLeadingAndTrailingASCIIWhitespace = string => {\n  return string.replace(/^[ \\t\\n\\f\\r]+/, \"\").replace(/[ \\t\\n\\f\\r]+$/, \"\");\n};\n\nexports.stringPercentDecode = input => {\n  return percentDecode(Buffer.from(input, \"utf-8\"));\n};\n\nexports.isomorphicDecode = input => {\n  return input.toString(\"binary\");\n};\n\nexports.forgivingBase64Decode = data => {\n  const asString = atob(data);\n  if (asString === null) {\n    return null;\n  }\n  return Buffer.from(asString, \"binary\");\n};\n"]},"metadata":{},"sourceType":"script"}