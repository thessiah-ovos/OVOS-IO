{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"../helpers/create-event-accessor\"),\n    createEventAccessor = _require.createEventAccessor;\n\nvar events = new Set([// WindowEventHandlers\n\"afterprint\", \"beforeprint\", \"beforeunload\", \"hashchange\", \"languagechange\", \"message\", \"messageerror\", \"offline\", \"online\", \"pagehide\", \"pageshow\", \"popstate\", \"rejectionhandled\", \"storage\", \"unhandledrejection\", \"unload\", // inherited and overridden\n\"blur\", \"error\", \"focus\", \"load\", \"resize\", \"scroll\"]); // This class builds on GlobalEventHandlers, which must be mixed in first.\n\nvar WindowEventHandlersImpl = /*#__PURE__*/function () {\n  function WindowEventHandlersImpl() {\n    _classCallCheck(this, WindowEventHandlersImpl);\n  }\n\n  _createClass(WindowEventHandlersImpl, [{\n    key: \"_proxyWindowEventsToWindow\",\n    value: function _proxyWindowEventsToWindow() {\n      var _this = this;\n\n      // We're a <body> or <frameset>, so we need to proxy these specific events to the Window (if it exists)\n      this._getEventHandlerTarget = function (event) {\n        if (events.has(event)) {\n          return _this.ownerDocument.defaultView || null;\n        }\n\n        return _this;\n      };\n    }\n  }]);\n\n  return WindowEventHandlersImpl;\n}();\n\nvar _iterator = _createForOfIteratorHelper(events),\n    _step;\n\ntry {\n  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n    var event = _step.value;\n    createEventAccessor(WindowEventHandlersImpl.prototype, event);\n  }\n} catch (err) {\n  _iterator.e(err);\n} finally {\n  _iterator.f();\n}\n\nmodule.exports = {\n  implementation: WindowEventHandlersImpl\n};","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/nodes/WindowEventHandlers-impl.js"],"names":["require","createEventAccessor","events","Set","WindowEventHandlersImpl","_getEventHandlerTarget","event","has","ownerDocument","defaultView","prototype","module","exports","implementation"],"mappings":"AAAA;;;;;;;;eAEgCA,OAAO,CAAC,kCAAD,C;IAA/BC,mB,YAAAA,mB;;AAER,IAAMC,MAAM,GAAG,IAAIC,GAAJ,CAAQ,CACrB;AACA,YAFqB,EAGrB,aAHqB,EAIrB,cAJqB,EAKrB,YALqB,EAMrB,gBANqB,EAOrB,SAPqB,EAQrB,cARqB,EASrB,SATqB,EAUrB,QAVqB,EAWrB,UAXqB,EAYrB,UAZqB,EAarB,UAbqB,EAcrB,kBAdqB,EAerB,SAfqB,EAgBrB,oBAhBqB,EAiBrB,QAjBqB,EAmBrB;AACA,MApBqB,EAqBrB,OArBqB,EAsBrB,OAtBqB,EAuBrB,MAvBqB,EAwBrB,QAxBqB,EAyBrB,QAzBqB,CAAR,CAAf,C,CA4BA;;IACMC,uB;;;;;;;iDACyB;AAAA;;AAC3B;AACA,WAAKC,sBAAL,GAA8B,UAAAC,KAAK,EAAI;AACrC,YAAIJ,MAAM,CAACK,GAAP,CAAWD,KAAX,CAAJ,EAAuB;AACrB,iBAAO,KAAI,CAACE,aAAL,CAAmBC,WAAnB,IAAkC,IAAzC;AACD;;AACD,eAAO,KAAP;AACD,OALD;AAMD;;;;;;2CAGiBP,M;;;;AAApB,sDAA4B;AAAA,QAAjBI,KAAiB;AAC1BL,IAAAA,mBAAmB,CAACG,uBAAuB,CAACM,SAAzB,EAAoCJ,KAApC,CAAnB;AACD;;;;;;;AAEDK,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,cAAc,EAAET;AADD,CAAjB","sourcesContent":["\"use strict\";\n\nconst { createEventAccessor } = require(\"../helpers/create-event-accessor\");\n\nconst events = new Set([\n  // WindowEventHandlers\n  \"afterprint\",\n  \"beforeprint\",\n  \"beforeunload\",\n  \"hashchange\",\n  \"languagechange\",\n  \"message\",\n  \"messageerror\",\n  \"offline\",\n  \"online\",\n  \"pagehide\",\n  \"pageshow\",\n  \"popstate\",\n  \"rejectionhandled\",\n  \"storage\",\n  \"unhandledrejection\",\n  \"unload\",\n\n  // inherited and overridden\n  \"blur\",\n  \"error\",\n  \"focus\",\n  \"load\",\n  \"resize\",\n  \"scroll\"\n]);\n\n// This class builds on GlobalEventHandlers, which must be mixed in first.\nclass WindowEventHandlersImpl {\n  _proxyWindowEventsToWindow() {\n    // We're a <body> or <frameset>, so we need to proxy these specific events to the Window (if it exists)\n    this._getEventHandlerTarget = event => {\n      if (events.has(event)) {\n        return this.ownerDocument.defaultView || null;\n      }\n      return this;\n    };\n  }\n}\n\nfor (const event of events) {\n  createEventAccessor(WindowEventHandlersImpl.prototype, event);\n}\n\nmodule.exports = {\n  implementation: WindowEventHandlersImpl\n};\n"]},"metadata":{},"sourceType":"script"}