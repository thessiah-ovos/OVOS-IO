{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar _require = require(\"../helpers/traversal\"),\n    closest = _require.closest;\n\nvar _require2 = require(\"../helpers/form-controls\"),\n    isDisabled = _require2.isDisabled;\n\nvar DefaultConstraintValidationImpl = require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\n\nvar _require3 = require(\"../../utils\"),\n    mixin = _require3.mixin;\n\nvar _require4 = require(\"../helpers/form-controls\"),\n    getLabelsForLabelable = _require4.getLabelsForLabelable;\n\nvar HTMLButtonElementImpl = /*#__PURE__*/function (_HTMLElementImpl) {\n  _inherits(HTMLButtonElementImpl, _HTMLElementImpl);\n\n  var _super = _createSuper(HTMLButtonElementImpl);\n\n  function HTMLButtonElementImpl(args, privateData) {\n    var _this;\n\n    _classCallCheck(this, HTMLButtonElementImpl);\n\n    _this = _super.call(this, args, privateData);\n    _this._customValidityErrorMessage = \"\";\n    _this._labels = null;\n    return _this;\n  }\n\n  _createClass(HTMLButtonElementImpl, [{\n    key: \"_activationBehavior\",\n    value: function _activationBehavior() {\n      var form = this.form;\n\n      if (form) {\n        if (this.type === \"submit\" && !isDisabled(this)) {\n          form._doSubmit();\n        }\n      }\n    }\n  }, {\n    key: \"_getValue\",\n    value: function _getValue() {\n      var valueAttr = this.getAttribute(\"value\");\n      return valueAttr === null ? \"\" : valueAttr;\n    }\n  }, {\n    key: \"_barredFromConstraintValidationSpecialization\",\n    value: function _barredFromConstraintValidationSpecialization() {\n      return this.type === \"reset\" || this.type === \"button\";\n    }\n  }, {\n    key: \"labels\",\n    get: function get() {\n      return getLabelsForLabelable(this);\n    }\n  }, {\n    key: \"form\",\n    get: function get() {\n      return closest(this, \"form\");\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      var typeAttr = (this.getAttribute(\"type\") || \"\").toLowerCase();\n\n      switch (typeAttr) {\n        case \"submit\":\n        case \"reset\":\n        case \"button\":\n          return typeAttr;\n\n        default:\n          return \"submit\";\n      }\n    },\n    set: function set(v) {\n      v = String(v).toLowerCase();\n\n      switch (v) {\n        case \"submit\":\n        case \"reset\":\n        case \"button\":\n          this.setAttribute(\"type\", v);\n          break;\n\n        default:\n          this.setAttribute(\"type\", \"submit\");\n          break;\n      }\n    }\n  }]);\n\n  return HTMLButtonElementImpl;\n}(HTMLElementImpl);\n\nmixin(HTMLButtonElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\nmodule.exports = {\n  implementation: HTMLButtonElementImpl\n};","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/nodes/HTMLButtonElement-impl.js"],"names":["HTMLElementImpl","require","implementation","closest","isDisabled","DefaultConstraintValidationImpl","mixin","getLabelsForLabelable","HTMLButtonElementImpl","args","privateData","_customValidityErrorMessage","_labels","form","type","_doSubmit","valueAttr","getAttribute","typeAttr","toLowerCase","v","String","setAttribute","prototype","module","exports"],"mappings":"AAAA;;;;;;;;;;AACA,IAAMA,eAAe,GAAGC,OAAO,CAAC,oBAAD,CAAP,CAA8BC,cAAtD;;eACoBD,OAAO,CAAC,sBAAD,C;IAAnBE,O,YAAAA,O;;gBACeF,OAAO,CAAC,0BAAD,C;IAAtBG,U,aAAAA,U;;AACR,IAAMC,+BAA+B,GACnCJ,OAAO,CAAC,2DAAD,CAAP,CAAqEC,cADvE;;gBAEkBD,OAAO,CAAC,aAAD,C;IAAjBK,K,aAAAA,K;;gBAC0BL,OAAO,CAAC,0BAAD,C;IAAjCM,qB,aAAAA,qB;;IAEFC,qB;;;;;AACJ,iCAAYC,IAAZ,EAAkBC,WAAlB,EAA+B;AAAA;;AAAA;;AAC7B,8BAAMD,IAAN,EAAYC,WAAZ;AAEA,UAAKC,2BAAL,GAAmC,EAAnC;AACA,UAAKC,OAAL,GAAe,IAAf;AAJ6B;AAK9B;;;;0CAEqB;AAAA,UACZC,IADY,GACH,IADG,CACZA,IADY;;AAEpB,UAAIA,IAAJ,EAAU;AACR,YAAI,KAAKC,IAAL,KAAc,QAAd,IAA0B,CAACV,UAAU,CAAC,IAAD,CAAzC,EAAiD;AAC/CS,UAAAA,IAAI,CAACE,SAAL;AACD;AACF;AACF;;;gCAEW;AACV,UAAMC,SAAS,GAAG,KAAKC,YAAL,CAAkB,OAAlB,CAAlB;AACA,aAAOD,SAAS,KAAK,IAAd,GAAqB,EAArB,GAA0BA,SAAjC;AACD;;;oEAoC+C;AAC9C,aAAO,KAAKF,IAAL,KAAc,OAAd,IAAyB,KAAKA,IAAL,KAAc,QAA9C;AACD;;;wBApCY;AACX,aAAOP,qBAAqB,CAAC,IAAD,CAA5B;AACD;;;wBAEU;AACT,aAAOJ,OAAO,CAAC,IAAD,EAAO,MAAP,CAAd;AACD;;;wBAEU;AACT,UAAMe,QAAQ,GAAG,CAAC,KAAKD,YAAL,CAAkB,MAAlB,KAA6B,EAA9B,EAAkCE,WAAlC,EAAjB;;AACA,cAAQD,QAAR;AACE,aAAK,QAAL;AACA,aAAK,OAAL;AACA,aAAK,QAAL;AACE,iBAAOA,QAAP;;AACF;AACE,iBAAO,QAAP;AANJ;AAQD,K;sBAEQE,C,EAAG;AACVA,MAAAA,CAAC,GAAGC,MAAM,CAACD,CAAD,CAAN,CAAUD,WAAV,EAAJ;;AACA,cAAQC,CAAR;AACE,aAAK,QAAL;AACA,aAAK,OAAL;AACA,aAAK,QAAL;AACE,eAAKE,YAAL,CAAkB,MAAlB,EAA0BF,CAA1B;AACA;;AACF;AACE,eAAKE,YAAL,CAAkB,MAAlB,EAA0B,QAA1B;AACA;AARJ;AAUD;;;;EAtDiCtB,e;;AA6DpCM,KAAK,CAACE,qBAAqB,CAACe,SAAvB,EAAkClB,+BAA+B,CAACkB,SAAlE,CAAL;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACfvB,EAAAA,cAAc,EAAEM;AADD,CAAjB","sourcesContent":["\"use strict\";\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst { closest } = require(\"../helpers/traversal\");\nconst { isDisabled } = require(\"../helpers/form-controls\");\nconst DefaultConstraintValidationImpl =\n  require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\nconst { mixin } = require(\"../../utils\");\nconst { getLabelsForLabelable } = require(\"../helpers/form-controls\");\n\nclass HTMLButtonElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n\n    this._customValidityErrorMessage = \"\";\n    this._labels = null;\n  }\n\n  _activationBehavior() {\n    const { form } = this;\n    if (form) {\n      if (this.type === \"submit\" && !isDisabled(this)) {\n        form._doSubmit();\n      }\n    }\n  }\n\n  _getValue() {\n    const valueAttr = this.getAttribute(\"value\");\n    return valueAttr === null ? \"\" : valueAttr;\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get form() {\n    return closest(this, \"form\");\n  }\n\n  get type() {\n    const typeAttr = (this.getAttribute(\"type\") || \"\").toLowerCase();\n    switch (typeAttr) {\n      case \"submit\":\n      case \"reset\":\n      case \"button\":\n        return typeAttr;\n      default:\n        return \"submit\";\n    }\n  }\n\n  set type(v) {\n    v = String(v).toLowerCase();\n    switch (v) {\n      case \"submit\":\n      case \"reset\":\n      case \"button\":\n        this.setAttribute(\"type\", v);\n        break;\n      default:\n        this.setAttribute(\"type\", \"submit\");\n        break;\n    }\n  }\n\n  _barredFromConstraintValidationSpecialization() {\n    return this.type === \"reset\" || this.type === \"button\";\n  }\n}\n\nmixin(HTMLButtonElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\n\nmodule.exports = {\n  implementation: HTMLButtonElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}