{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _get = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar idlUtils = require(\"../generated/utils.js\");\n\nvar ValidityState = require(\"../generated/ValidityState\");\n\nvar DefaultConstraintValidationImpl = require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\n\nvar _require = require(\"../../utils\"),\n    mixin = _require.mixin;\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar NODE_TYPE = require(\"../node-type\");\n\nvar HTMLCollection = require(\"../generated/HTMLCollection\");\n\nvar HTMLOptionsCollection = require(\"../generated/HTMLOptionsCollection\");\n\nvar _require2 = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require2.domSymbolTree;\n\nvar _require3 = require(\"../helpers/traversal\"),\n    closest = _require3.closest;\n\nvar _require4 = require(\"../helpers/form-controls\"),\n    getLabelsForLabelable = _require4.getLabelsForLabelable;\n\nvar HTMLSelectElementImpl = /*#__PURE__*/function (_HTMLElementImpl) {\n  _inherits(HTMLSelectElementImpl, _HTMLElementImpl);\n\n  var _super = _createSuper(HTMLSelectElementImpl);\n\n  function HTMLSelectElementImpl(args, privateData) {\n    var _this;\n\n    _classCallCheck(this, HTMLSelectElementImpl);\n\n    _this = _super.call(this, args, privateData);\n    _this._options = HTMLOptionsCollection.createImpl([], {\n      element: _assertThisInitialized(_this),\n      query: function query() {\n        // Customized domSymbolTree.treeToArray() clone.\n        var array = [];\n\n        var _iterator = _createForOfIteratorHelper(domSymbolTree.childrenIterator(_assertThisInitialized(_this))),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var child = _step.value;\n\n            if (child._localName === \"option\") {\n              array.push(child);\n            } else if (child._localName === \"optgroup\") {\n              var _iterator2 = _createForOfIteratorHelper(domSymbolTree.childrenIterator(child)),\n                  _step2;\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var childOfGroup = _step2.value;\n\n                  if (childOfGroup._localName === \"option\") {\n                    array.push(childOfGroup);\n                  }\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return array;\n      }\n    });\n    _this._selectedOptions = null; // lazy\n\n    _this._customValidityErrorMessage = \"\";\n    _this._labels = null;\n    return _this;\n  }\n\n  _createClass(HTMLSelectElementImpl, [{\n    key: \"_formReset\",\n    value: function _formReset() {\n      var _iterator3 = _createForOfIteratorHelper(this.options),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var option = _step3.value;\n          option._selectedness = option.hasAttribute(\"selected\");\n          option._dirtyness = false;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      this._askedForAReset();\n    }\n  }, {\n    key: \"_askedForAReset\",\n    value: function _askedForAReset() {\n      if (this.hasAttribute(\"multiple\")) {\n        return;\n      }\n\n      var selected = this.options.filter(function (opt) {\n        return opt._selectedness;\n      });\n      var size = this._displaySize;\n\n      if (size === 1 && !selected.length) {\n        // select the first option that is not disabled\n        var _iterator4 = _createForOfIteratorHelper(this.options),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var option = _step4.value;\n            var disabled = option.hasAttribute(\"disabled\");\n            var parentNode = domSymbolTree.parent(option);\n\n            if (parentNode && parentNode.nodeName.toUpperCase() === \"OPTGROUP\" && parentNode.hasAttribute(\"disabled\")) {\n              disabled = true;\n            }\n\n            if (!disabled) {\n              // (do not set dirty)\n              option._selectedness = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      } else if (selected.length >= 2) {\n        // select the last selected option\n        selected.forEach(function (option, index) {\n          option._selectedness = index === selected.length - 1;\n        });\n      }\n    }\n  }, {\n    key: \"_descendantAdded\",\n    value: function _descendantAdded(parent, child) {\n      if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n        this._askedForAReset();\n      }\n\n      _get(_getPrototypeOf(HTMLSelectElementImpl.prototype), \"_descendantAdded\", this).apply(this, arguments);\n    }\n  }, {\n    key: \"_descendantRemoved\",\n    value: function _descendantRemoved(parent, child) {\n      if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n        this._askedForAReset();\n      }\n\n      _get(_getPrototypeOf(HTMLSelectElementImpl.prototype), \"_descendantRemoved\", this).apply(this, arguments);\n    }\n  }, {\n    key: \"_attrModified\",\n    value: function _attrModified(name) {\n      if (name === \"multiple\" || name === \"size\") {\n        this._askedForAReset();\n      }\n\n      _get(_getPrototypeOf(HTMLSelectElementImpl.prototype), \"_attrModified\", this).apply(this, arguments);\n    }\n  }, {\n    key: \"item\",\n    value: function item(index) {\n      return this.options.item(index);\n    }\n  }, {\n    key: \"namedItem\",\n    value: function namedItem(name) {\n      return this.options.namedItem(name);\n    }\n  }, {\n    key: idlUtils.indexedSetNew,\n    value: function value(index, _value) {\n      return this.options[idlUtils.indexedSetNew](index, _value);\n    }\n  }, {\n    key: idlUtils.indexedSetExisting,\n    value: function value(index, _value2) {\n      return this.options[idlUtils.indexedSetExisting](index, _value2);\n    }\n  }, {\n    key: \"add\",\n    value: function add(opt, before) {\n      this.options.add(opt, before);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(index) {\n      if (arguments.length > 0) {\n        index = conversions.long(index, {\n          context: \"Failed to execute 'remove' on 'HTMLSelectElement': parameter 1\"\n        });\n        this.options.remove(index);\n      } else {\n        _get(_getPrototypeOf(HTMLSelectElementImpl.prototype), \"remove\", this).call(this);\n      }\n    }\n  }, {\n    key: \"_barredFromConstraintValidationSpecialization\",\n    value: function _barredFromConstraintValidationSpecialization() {\n      return this.hasAttribute(\"readonly\");\n    } // Constraint validation: If the element has its required attribute specified,\n    // and either none of the option elements in the select element's list of options\n    // have their selectedness set to true, or the only option element in the select\n    // element's list of options with its selectedness set to true is the placeholder\n    // label option, then the element is suffering from being missing.\n\n  }, {\n    key: \"_displaySize\",\n    get: function get() {\n      if (this.hasAttribute(\"size\")) {\n        var attr = this.getAttribute(\"size\"); // We don't allow hexadecimal numbers here.\n        // eslint-disable-next-line radix\n\n        var size = parseInt(attr, 10);\n\n        if (!isNaN(size) && size >= 0) {\n          return size;\n        }\n      }\n\n      return this.hasAttribute(\"multiple\") ? 4 : 1;\n    }\n  }, {\n    key: \"options\",\n    get: function get() {\n      return this._options;\n    }\n  }, {\n    key: \"selectedOptions\",\n    get: function get() {\n      var _this2 = this;\n\n      return HTMLCollection.createImpl([], {\n        element: this,\n        query: function query() {\n          return domSymbolTree.treeToArray(_this2, {\n            filter: function filter(node) {\n              return node._localName === \"option\" && node._selectedness === true;\n            }\n          });\n        }\n      });\n    }\n  }, {\n    key: \"selectedIndex\",\n    get: function get() {\n      for (var i = 0; i < this.options.length; i++) {\n        if (this.options.item(i)._selectedness) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n    set: function set(index) {\n      for (var i = 0; i < this.options.length; i++) {\n        this.options.item(i).selected = i === index;\n      }\n    }\n  }, {\n    key: \"labels\",\n    get: function get() {\n      return getLabelsForLabelable(this);\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      var i = this.selectedIndex;\n\n      if (this.options.length && i === -1) {\n        i = 0;\n      }\n\n      if (i === -1) {\n        return \"\";\n      }\n\n      return this.options.item(i).value;\n    },\n    set: function set(val) {\n      var _iterator5 = _createForOfIteratorHelper(this.options),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var option = _step5.value;\n\n          if (option.value === val) {\n            option._selectedness = true;\n            option._dirtyness = true;\n          } else {\n            option._selectedness = false;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }, {\n    key: \"form\",\n    get: function get() {\n      return closest(this, \"form\");\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.hasAttribute(\"multiple\") ? \"select-multiple\" : \"select-one\";\n    }\n  }, {\n    key: idlUtils.supportedPropertyIndices,\n    get: function get() {\n      return this.options[idlUtils.supportedPropertyIndices];\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.options.length;\n    },\n    set: function set(value) {\n      this.options.length = value;\n    }\n  }, {\n    key: \"validity\",\n    get: function get() {\n      var _this3 = this;\n\n      if (!this._validity) {\n        this._validity = ValidityState.createImpl(this, {\n          valueMissing: function valueMissing() {\n            if (!_this3.hasAttribute(\"required\")) {\n              return false;\n            }\n\n            var selectedOptionIndex = _this3.selectedIndex;\n            return selectedOptionIndex < 0 || selectedOptionIndex === 0 && _this3._hasPlaceholderOption;\n          }\n        });\n      }\n\n      return this._validity;\n    } // If a select element has a required attribute specified, does not have a multiple attribute\n    // specified, and has a display size of 1; and if the value of the first option element in the\n    // select element's list of options (if any) is the empty string, and that option element's parent\n    // node is the select element(and not an optgroup element), then that option is the select\n    // element's placeholder label option.\n    // https://html.spec.whatwg.org/multipage/form-elements.html#placeholder-label-option\n\n  }, {\n    key: \"_hasPlaceholderOption\",\n    get: function get() {\n      return this.hasAttribute(\"required\") && !this.hasAttribute(\"multiple\") && this._displaySize === 1 && this.options.length > 0 && this.options.item(0).value === \"\" && this.options.item(0).parentNode._localName !== \"optgroup\";\n    }\n  }]);\n\n  return HTMLSelectElementImpl;\n}(HTMLElementImpl);\n\nmixin(HTMLSelectElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\nmodule.exports = {\n  implementation: HTMLSelectElementImpl\n};","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/nodes/HTMLSelectElement-impl.js"],"names":["conversions","require","idlUtils","ValidityState","DefaultConstraintValidationImpl","implementation","mixin","HTMLElementImpl","NODE_TYPE","HTMLCollection","HTMLOptionsCollection","domSymbolTree","closest","getLabelsForLabelable","HTMLSelectElementImpl","args","privateData","_options","createImpl","element","query","array","childrenIterator","child","_localName","push","childOfGroup","_selectedOptions","_customValidityErrorMessage","_labels","options","option","_selectedness","hasAttribute","_dirtyness","_askedForAReset","selected","filter","opt","size","_displaySize","length","disabled","parentNode","parent","nodeName","toUpperCase","forEach","index","nodeType","ELEMENT_NODE","apply","arguments","name","item","namedItem","indexedSetNew","value","indexedSetExisting","before","add","long","context","remove","attr","getAttribute","parseInt","isNaN","treeToArray","node","i","selectedIndex","val","supportedPropertyIndices","_validity","valueMissing","selectedOptionIndex","_hasPlaceholderOption","prototype","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst idlUtils = require(\"../generated/utils.js\");\nconst ValidityState = require(\"../generated/ValidityState\");\nconst DefaultConstraintValidationImpl =\n  require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\nconst { mixin } = require(\"../../utils\");\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst NODE_TYPE = require(\"../node-type\");\nconst HTMLCollection = require(\"../generated/HTMLCollection\");\nconst HTMLOptionsCollection = require(\"../generated/HTMLOptionsCollection\");\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst { closest } = require(\"../helpers/traversal\");\nconst { getLabelsForLabelable } = require(\"../helpers/form-controls\");\n\nclass HTMLSelectElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._options = HTMLOptionsCollection.createImpl([], {\n      element: this,\n      query: () => {\n        // Customized domSymbolTree.treeToArray() clone.\n        const array = [];\n        for (const child of domSymbolTree.childrenIterator(this)) {\n          if (child._localName === \"option\") {\n            array.push(child);\n          } else if (child._localName === \"optgroup\") {\n            for (const childOfGroup of domSymbolTree.childrenIterator(child)) {\n              if (childOfGroup._localName === \"option\") {\n                array.push(childOfGroup);\n              }\n            }\n          }\n        }\n        return array;\n      }\n    });\n    this._selectedOptions = null; // lazy\n\n    this._customValidityErrorMessage = \"\";\n\n    this._labels = null;\n  }\n\n  _formReset() {\n    for (const option of this.options) {\n      option._selectedness = option.hasAttribute(\"selected\");\n      option._dirtyness = false;\n    }\n    this._askedForAReset();\n  }\n\n  _askedForAReset() {\n    if (this.hasAttribute(\"multiple\")) {\n      return;\n    }\n\n    const selected = this.options.filter(opt => opt._selectedness);\n\n    const size = this._displaySize;\n    if (size === 1 && !selected.length) {\n      // select the first option that is not disabled\n      for (const option of this.options) {\n        let disabled = option.hasAttribute(\"disabled\");\n        const parentNode = domSymbolTree.parent(option);\n        if (parentNode &&\n          parentNode.nodeName.toUpperCase() === \"OPTGROUP\" &&\n          parentNode.hasAttribute(\"disabled\")) {\n          disabled = true;\n        }\n\n        if (!disabled) {\n          // (do not set dirty)\n          option._selectedness = true;\n          break;\n        }\n      }\n    } else if (selected.length >= 2) {\n      // select the last selected option\n      selected.forEach((option, index) => {\n        option._selectedness = index === selected.length - 1;\n      });\n    }\n  }\n\n  _descendantAdded(parent, child) {\n    if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n      this._askedForAReset();\n    }\n\n    super._descendantAdded.apply(this, arguments);\n  }\n\n  _descendantRemoved(parent, child) {\n    if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n      this._askedForAReset();\n    }\n\n    super._descendantRemoved.apply(this, arguments);\n  }\n\n  _attrModified(name) {\n    if (name === \"multiple\" || name === \"size\") {\n      this._askedForAReset();\n    }\n    super._attrModified.apply(this, arguments);\n  }\n\n  get _displaySize() {\n    if (this.hasAttribute(\"size\")) {\n      const attr = this.getAttribute(\"size\");\n      // We don't allow hexadecimal numbers here.\n      // eslint-disable-next-line radix\n      const size = parseInt(attr, 10);\n      if (!isNaN(size) && size >= 0) {\n        return size;\n      }\n    }\n    return this.hasAttribute(\"multiple\") ? 4 : 1;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  get selectedOptions() {\n    return HTMLCollection.createImpl([], {\n      element: this,\n      query: () => domSymbolTree.treeToArray(this, {\n        filter: node => node._localName === \"option\" && node._selectedness === true\n      })\n    });\n  }\n\n  get selectedIndex() {\n    for (let i = 0; i < this.options.length; i++) {\n      if (this.options.item(i)._selectedness) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  set selectedIndex(index) {\n    for (let i = 0; i < this.options.length; i++) {\n      this.options.item(i).selected = i === index;\n    }\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get value() {\n    let i = this.selectedIndex;\n    if (this.options.length && (i === -1)) {\n      i = 0;\n    }\n    if (i === -1) {\n      return \"\";\n    }\n    return this.options.item(i).value;\n  }\n\n  set value(val) {\n    for (const option of this.options) {\n      if (option.value === val) {\n        option._selectedness = true;\n        option._dirtyness = true;\n      } else {\n        option._selectedness = false;\n      }\n    }\n  }\n\n  get form() {\n    return closest(this, \"form\");\n  }\n\n  get type() {\n    return this.hasAttribute(\"multiple\") ? \"select-multiple\" : \"select-one\";\n  }\n\n  get [idlUtils.supportedPropertyIndices]() {\n    return this.options[idlUtils.supportedPropertyIndices];\n  }\n\n  get length() {\n    return this.options.length;\n  }\n\n  set length(value) {\n    this.options.length = value;\n  }\n\n  item(index) {\n    return this.options.item(index);\n  }\n\n  namedItem(name) {\n    return this.options.namedItem(name);\n  }\n\n  [idlUtils.indexedSetNew](index, value) {\n    return this.options[idlUtils.indexedSetNew](index, value);\n  }\n\n  [idlUtils.indexedSetExisting](index, value) {\n    return this.options[idlUtils.indexedSetExisting](index, value);\n  }\n\n  add(opt, before) {\n    this.options.add(opt, before);\n  }\n\n  remove(index) {\n    if (arguments.length > 0) {\n      index = conversions.long(index, {\n        context: \"Failed to execute 'remove' on 'HTMLSelectElement': parameter 1\"\n      });\n      this.options.remove(index);\n    } else {\n      super.remove();\n    }\n  }\n\n  _barredFromConstraintValidationSpecialization() {\n    return this.hasAttribute(\"readonly\");\n  }\n\n  // Constraint validation: If the element has its required attribute specified,\n  // and either none of the option elements in the select element's list of options\n  // have their selectedness set to true, or the only option element in the select\n  // element's list of options with its selectedness set to true is the placeholder\n  // label option, then the element is suffering from being missing.\n  get validity() {\n    if (!this._validity) {\n      this._validity = ValidityState.createImpl(this, {\n        valueMissing: () => {\n          if (!this.hasAttribute(\"required\")) {\n            return false;\n          }\n          const selectedOptionIndex = this.selectedIndex;\n          return selectedOptionIndex < 0 || (selectedOptionIndex === 0 && this._hasPlaceholderOption);\n        }\n      });\n    }\n    return this._validity;\n  }\n\n  // If a select element has a required attribute specified, does not have a multiple attribute\n  // specified, and has a display size of 1; and if the value of the first option element in the\n  // select element's list of options (if any) is the empty string, and that option element's parent\n  // node is the select element(and not an optgroup element), then that option is the select\n  // element's placeholder label option.\n  // https://html.spec.whatwg.org/multipage/form-elements.html#placeholder-label-option\n  get _hasPlaceholderOption() {\n    return this.hasAttribute(\"required\") && !this.hasAttribute(\"multiple\") &&\n      this._displaySize === 1 && this.options.length > 0 && this.options.item(0).value === \"\" &&\n      this.options.item(0).parentNode._localName !== \"optgroup\";\n  }\n}\n\nmixin(HTMLSelectElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\n\nmodule.exports = {\n  implementation: HTMLSelectElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}