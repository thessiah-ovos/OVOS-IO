{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _toConsumableArray = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar punycode = require(\"punycode\");\n\nvar regexes = require(\"./lib/regexes.js\");\n\nvar mappingTable = require(\"./lib/mappingTable.json\");\n\nfunction containsNonASCII(str) {\n  return /[^\\x00-\\x7F]/.test(str);\n}\n\nfunction findStatus(val, _ref) {\n  var useSTD3ASCIIRules = _ref.useSTD3ASCIIRules;\n  var start = 0;\n  var end = mappingTable.length - 1;\n\n  while (start <= end) {\n    var mid = Math.floor((start + end) / 2);\n    var target = mappingTable[mid];\n\n    if (target[0][0] <= val && target[0][1] >= val) {\n      if (target[1].startsWith(\"disallowed_STD3_\")) {\n        var newStatus = useSTD3ASCIIRules ? \"disallowed\" : target[1].slice(16);\n        return [newStatus].concat(_toConsumableArray(target.slice(2)));\n      }\n\n      return target.slice(1);\n    } else if (target[0][0] > val) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n\n  return null;\n}\n\nfunction mapChars(domainName, _ref2) {\n  var useSTD3ASCIIRules = _ref2.useSTD3ASCIIRules,\n      processingOption = _ref2.processingOption;\n  var hasError = false;\n  var processed = \"\";\n\n  var _iterator = _createForOfIteratorHelper(domainName),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var ch = _step.value;\n\n      var _findStatus = findStatus(ch.codePointAt(0), {\n        useSTD3ASCIIRules: useSTD3ASCIIRules\n      }),\n          _findStatus2 = _slicedToArray(_findStatus, 2),\n          status = _findStatus2[0],\n          mapping = _findStatus2[1];\n\n      switch (status) {\n        case \"disallowed\":\n          hasError = true;\n          processed += ch;\n          break;\n\n        case \"ignored\":\n          break;\n\n        case \"mapped\":\n          processed += mapping;\n          break;\n\n        case \"deviation\":\n          if (processingOption === \"transitional\") {\n            processed += mapping;\n          } else {\n            processed += ch;\n          }\n\n          break;\n\n        case \"valid\":\n          processed += ch;\n          break;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return {\n    string: processed,\n    error: hasError\n  };\n}\n\nfunction validateLabel(label, _ref3) {\n  var checkHyphens = _ref3.checkHyphens,\n      checkBidi = _ref3.checkBidi,\n      checkJoiners = _ref3.checkJoiners,\n      processingOption = _ref3.processingOption,\n      useSTD3ASCIIRules = _ref3.useSTD3ASCIIRules;\n\n  if (label.normalize(\"NFC\") !== label) {\n    return false;\n  }\n\n  var codePoints = Array.from(label);\n\n  if (checkHyphens) {\n    if (codePoints[2] === \"-\" && codePoints[3] === \"-\" || label.startsWith(\"-\") || label.endsWith(\"-\")) {\n      return false;\n    }\n  }\n\n  if (label.includes(\".\") || codePoints.length > 0 && regexes.combiningMarks.test(codePoints[0])) {\n    return false;\n  }\n\n  for (var _i = 0, _codePoints = codePoints; _i < _codePoints.length; _i++) {\n    var ch = _codePoints[_i];\n\n    var _findStatus3 = findStatus(ch.codePointAt(0), {\n      useSTD3ASCIIRules: useSTD3ASCIIRules\n    }),\n        _findStatus4 = _slicedToArray(_findStatus3, 1),\n        status = _findStatus4[0];\n\n    if (processingOption === \"transitional\" && status !== \"valid\" || processingOption === \"nontransitional\" && status !== \"valid\" && status !== \"deviation\") {\n      return false;\n    }\n  } // https://tools.ietf.org/html/rfc5892#appendix-A\n\n\n  if (checkJoiners) {\n    var last = 0;\n\n    var _iterator2 = _createForOfIteratorHelper(codePoints.entries()),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _step2$value = _slicedToArray(_step2.value, 2),\n            i = _step2$value[0],\n            _ch = _step2$value[1];\n\n        if (_ch === \"\\u200C\" || _ch === \"\\u200D\") {\n          if (i > 0) {\n            if (regexes.combiningClassVirama.test(codePoints[i - 1])) {\n              continue;\n            }\n\n            if (_ch === \"\\u200C\") {\n              // TODO: make this more efficient\n              var next = codePoints.indexOf(\"\\u200C\", i + 1);\n              var test = next < 0 ? codePoints.slice(last) : codePoints.slice(last, next);\n\n              if (regexes.validZWNJ.test(test.join(\"\"))) {\n                last = i + 1;\n                continue;\n              }\n            }\n          }\n\n          return false;\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  } // https://tools.ietf.org/html/rfc5893#section-2\n\n\n  if (checkBidi) {\n    var rtl; // 1\n\n    if (regexes.bidiS1LTR.test(codePoints[0])) {\n      rtl = false;\n    } else if (regexes.bidiS1RTL.test(codePoints[0])) {\n      rtl = true;\n    } else {\n      return false;\n    }\n\n    if (rtl) {\n      // 2-4\n      if (!regexes.bidiS2.test(label) || !regexes.bidiS3.test(label) || regexes.bidiS4EN.test(label) && regexes.bidiS4AN.test(label)) {\n        return false;\n      }\n    } else if (!regexes.bidiS5.test(label) || !regexes.bidiS6.test(label)) {\n      // 5-6\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isBidiDomain(labels) {\n  var domain = labels.map(function (label) {\n    if (label.startsWith(\"xn--\")) {\n      try {\n        return punycode.decode(label.substring(4));\n      } catch (err) {\n        return \"\";\n      }\n    }\n\n    return label;\n  }).join(\".\");\n  return regexes.bidiDomain.test(domain);\n}\n\nfunction processing(domainName, options) {\n  var processingOption = options.processingOption; // 1. Map.\n\n  var _mapChars = mapChars(domainName, options),\n      string = _mapChars.string,\n      error = _mapChars.error; // 2. Normalize.\n\n\n  string = string.normalize(\"NFC\"); // 3. Break.\n\n  var labels = string.split(\".\");\n  var isBidi = isBidiDomain(labels); // 4. Convert/Validate.\n\n  var _iterator3 = _createForOfIteratorHelper(labels.entries()),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _step3$value = _slicedToArray(_step3.value, 2),\n          i = _step3$value[0],\n          origLabel = _step3$value[1];\n\n      var label = origLabel;\n      var curProcessing = processingOption;\n\n      if (label.startsWith(\"xn--\")) {\n        try {\n          label = punycode.decode(label.substring(4));\n          labels[i] = label;\n        } catch (err) {\n          error = true;\n          continue;\n        }\n\n        curProcessing = \"nontransitional\";\n      } // No need to validate if we already know there is an error.\n\n\n      if (error) {\n        continue;\n      }\n\n      var validation = validateLabel(label, Object.assign({}, options, {\n        processingOption: curProcessing,\n        checkBidi: options.checkBidi && isBidi\n      }));\n\n      if (!validation) {\n        error = true;\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return {\n    string: labels.join(\".\"),\n    error: error\n  };\n}\n\nfunction toASCII(domainName) {\n  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref4$checkHyphens = _ref4.checkHyphens,\n      checkHyphens = _ref4$checkHyphens === void 0 ? false : _ref4$checkHyphens,\n      _ref4$checkBidi = _ref4.checkBidi,\n      checkBidi = _ref4$checkBidi === void 0 ? false : _ref4$checkBidi,\n      _ref4$checkJoiners = _ref4.checkJoiners,\n      checkJoiners = _ref4$checkJoiners === void 0 ? false : _ref4$checkJoiners,\n      _ref4$useSTD3ASCIIRul = _ref4.useSTD3ASCIIRules,\n      useSTD3ASCIIRules = _ref4$useSTD3ASCIIRul === void 0 ? false : _ref4$useSTD3ASCIIRul,\n      _ref4$processingOptio = _ref4.processingOption,\n      processingOption = _ref4$processingOptio === void 0 ? \"nontransitional\" : _ref4$processingOptio,\n      _ref4$verifyDNSLength = _ref4.verifyDNSLength,\n      verifyDNSLength = _ref4$verifyDNSLength === void 0 ? false : _ref4$verifyDNSLength;\n\n  if (processingOption !== \"transitional\" && processingOption !== \"nontransitional\") {\n    throw new RangeError(\"processingOption must be either transitional or nontransitional\");\n  }\n\n  var result = processing(domainName, {\n    processingOption: processingOption,\n    checkHyphens: checkHyphens,\n    checkBidi: checkBidi,\n    checkJoiners: checkJoiners,\n    useSTD3ASCIIRules: useSTD3ASCIIRules\n  });\n  var labels = result.string.split(\".\");\n  labels = labels.map(function (l) {\n    if (containsNonASCII(l)) {\n      try {\n        return \"xn--\" + punycode.encode(l);\n      } catch (e) {\n        result.error = true;\n      }\n    }\n\n    return l;\n  });\n\n  if (verifyDNSLength) {\n    var total = labels.join(\".\").length;\n\n    if (total > 253 || total === 0) {\n      result.error = true;\n    }\n\n    for (var i = 0; i < labels.length; ++i) {\n      if (labels[i].length > 63 || labels[i].length === 0) {\n        result.error = true;\n        break;\n      }\n    }\n  }\n\n  if (result.error) {\n    return null;\n  }\n\n  return labels.join(\".\");\n}\n\nfunction toUnicode(domainName) {\n  var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref5$checkHyphens = _ref5.checkHyphens,\n      checkHyphens = _ref5$checkHyphens === void 0 ? false : _ref5$checkHyphens,\n      _ref5$checkBidi = _ref5.checkBidi,\n      checkBidi = _ref5$checkBidi === void 0 ? false : _ref5$checkBidi,\n      _ref5$checkJoiners = _ref5.checkJoiners,\n      checkJoiners = _ref5$checkJoiners === void 0 ? false : _ref5$checkJoiners,\n      _ref5$useSTD3ASCIIRul = _ref5.useSTD3ASCIIRules,\n      useSTD3ASCIIRules = _ref5$useSTD3ASCIIRul === void 0 ? false : _ref5$useSTD3ASCIIRul;\n\n  var result = processing(domainName, {\n    processingOption: \"nontransitional\",\n    checkHyphens: checkHyphens,\n    checkBidi: checkBidi,\n    checkJoiners: checkJoiners,\n    useSTD3ASCIIRules: useSTD3ASCIIRules\n  });\n  return {\n    domain: result.string,\n    error: result.error\n  };\n}\n\nmodule.exports = {\n  toASCII: toASCII,\n  toUnicode: toUnicode\n};","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/tr46/index.js"],"names":["punycode","require","regexes","mappingTable","containsNonASCII","str","test","findStatus","val","useSTD3ASCIIRules","start","end","length","mid","Math","floor","target","startsWith","newStatus","slice","mapChars","domainName","processingOption","hasError","processed","ch","codePointAt","status","mapping","string","error","validateLabel","label","checkHyphens","checkBidi","checkJoiners","normalize","codePoints","Array","from","endsWith","includes","combiningMarks","last","entries","i","combiningClassVirama","next","indexOf","validZWNJ","join","rtl","bidiS1LTR","bidiS1RTL","bidiS2","bidiS3","bidiS4EN","bidiS4AN","bidiS5","bidiS6","isBidiDomain","labels","domain","map","decode","substring","err","bidiDomain","processing","options","split","isBidi","origLabel","curProcessing","validation","Object","assign","toASCII","verifyDNSLength","RangeError","result","l","encode","e","total","toUnicode","module","exports"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,kBAAD,CAAvB;;AACA,IAAME,YAAY,GAAGF,OAAO,CAAC,yBAAD,CAA5B;;AAEA,SAASG,gBAAT,CAA0BC,GAA1B,EAA+B;AAC7B,SAAO,eAAeC,IAAf,CAAoBD,GAApB,CAAP;AACD;;AAED,SAASE,UAAT,CAAoBC,GAApB,QAAgD;AAAA,MAArBC,iBAAqB,QAArBA,iBAAqB;AAC9C,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,GAAG,GAAGR,YAAY,CAACS,MAAb,GAAsB,CAAhC;;AAEA,SAAOF,KAAK,IAAIC,GAAhB,EAAqB;AACnB,QAAME,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACL,KAAK,GAAGC,GAAT,IAAgB,CAA3B,CAAZ;AAEA,QAAMK,MAAM,GAAGb,YAAY,CAACU,GAAD,CAA3B;;AACA,QAAIG,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,KAAgBR,GAAhB,IAAuBQ,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,KAAgBR,GAA3C,EAAgD;AAC9C,UAAIQ,MAAM,CAAC,CAAD,CAAN,CAAUC,UAAV,CAAqB,kBAArB,CAAJ,EAA8C;AAC5C,YAAMC,SAAS,GAAGT,iBAAiB,GAAG,YAAH,GAAkBO,MAAM,CAAC,CAAD,CAAN,CAAUG,KAAV,CAAgB,EAAhB,CAArD;AACA,gBAAQD,SAAR,4BAAsBF,MAAM,CAACG,KAAP,CAAa,CAAb,CAAtB;AACD;;AACD,aAAOH,MAAM,CAACG,KAAP,CAAa,CAAb,CAAP;AACD,KAND,MAMO,IAAIH,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,IAAeR,GAAnB,EAAwB;AAC7BG,MAAAA,GAAG,GAAGE,GAAG,GAAG,CAAZ;AACD,KAFM,MAEA;AACLH,MAAAA,KAAK,GAAGG,GAAG,GAAG,CAAd;AACD;AACF;;AAED,SAAO,IAAP;AACD;;AAED,SAASO,QAAT,CAAkBC,UAAlB,SAAuE;AAAA,MAAvCZ,iBAAuC,SAAvCA,iBAAuC;AAAA,MAApBa,gBAAoB,SAApBA,gBAAoB;AACrE,MAAIC,QAAQ,GAAG,KAAf;AACA,MAAIC,SAAS,GAAG,EAAhB;;AAFqE,6CAIpDH,UAJoD;AAAA;;AAAA;AAIrE,wDAA6B;AAAA,UAAlBI,EAAkB;;AAAA,wBACDlB,UAAU,CAACkB,EAAE,CAACC,WAAH,CAAe,CAAf,CAAD,EAAoB;AAAEjB,QAAAA,iBAAiB,EAAjBA;AAAF,OAApB,CADT;AAAA;AAAA,UACpBkB,MADoB;AAAA,UACZC,OADY;;AAG3B,cAAQD,MAAR;AACE,aAAK,YAAL;AACEJ,UAAAA,QAAQ,GAAG,IAAX;AACAC,UAAAA,SAAS,IAAIC,EAAb;AACA;;AACF,aAAK,SAAL;AACE;;AACF,aAAK,QAAL;AACED,UAAAA,SAAS,IAAII,OAAb;AACA;;AACF,aAAK,WAAL;AACE,cAAIN,gBAAgB,KAAK,cAAzB,EAAyC;AACvCE,YAAAA,SAAS,IAAII,OAAb;AACD,WAFD,MAEO;AACLJ,YAAAA,SAAS,IAAIC,EAAb;AACD;;AACD;;AACF,aAAK,OAAL;AACED,UAAAA,SAAS,IAAIC,EAAb;AACA;AAnBJ;AAqBD;AA5BoE;AAAA;AAAA;AAAA;AAAA;;AA8BrE,SAAO;AACLI,IAAAA,MAAM,EAAEL,SADH;AAELM,IAAAA,KAAK,EAAEP;AAFF,GAAP;AAID;;AAED,SAASQ,aAAT,CAAuBC,KAAvB,SAA8G;AAAA,MAA9EC,YAA8E,SAA9EA,YAA8E;AAAA,MAAhEC,SAAgE,SAAhEA,SAAgE;AAAA,MAArDC,YAAqD,SAArDA,YAAqD;AAAA,MAAvCb,gBAAuC,SAAvCA,gBAAuC;AAAA,MAArBb,iBAAqB,SAArBA,iBAAqB;;AAC5G,MAAIuB,KAAK,CAACI,SAAN,CAAgB,KAAhB,MAA2BJ,KAA/B,EAAsC;AACpC,WAAO,KAAP;AACD;;AAED,MAAMK,UAAU,GAAGC,KAAK,CAACC,IAAN,CAAWP,KAAX,CAAnB;;AAEA,MAAIC,YAAJ,EAAkB;AAChB,QAAKI,UAAU,CAAC,CAAD,CAAV,KAAkB,GAAlB,IAAyBA,UAAU,CAAC,CAAD,CAAV,KAAkB,GAA5C,IACCL,KAAK,CAACf,UAAN,CAAiB,GAAjB,KAAyBe,KAAK,CAACQ,QAAN,CAAe,GAAf,CAD9B,EACoD;AAClD,aAAO,KAAP;AACD;AACF;;AAED,MAAIR,KAAK,CAACS,QAAN,CAAe,GAAf,KACCJ,UAAU,CAACzB,MAAX,GAAoB,CAApB,IAAyBV,OAAO,CAACwC,cAAR,CAAuBpC,IAAvB,CAA4B+B,UAAU,CAAC,CAAD,CAAtC,CAD9B,EAC2E;AACzE,WAAO,KAAP;AACD;;AAED,iCAAiBA,UAAjB,iCAA6B;AAAxB,QAAMZ,EAAE,kBAAR;;AAAwB,uBACVlB,UAAU,CAACkB,EAAE,CAACC,WAAH,CAAe,CAAf,CAAD,EAAoB;AAAEjB,MAAAA,iBAAiB,EAAjBA;AAAF,KAApB,CADA;AAAA;AAAA,QACpBkB,MADoB;;AAE3B,QAAKL,gBAAgB,KAAK,cAArB,IAAuCK,MAAM,KAAK,OAAnD,IACCL,gBAAgB,KAAK,iBAArB,IACAK,MAAM,KAAK,OADX,IACsBA,MAAM,KAAK,WAFtC,EAEoD;AAClD,aAAO,KAAP;AACD;AACF,GA1B2G,CA4B5G;;;AACA,MAAIQ,YAAJ,EAAkB;AAChB,QAAIQ,IAAI,GAAG,CAAX;;AADgB,gDAEMN,UAAU,CAACO,OAAX,EAFN;AAAA;;AAAA;AAEhB,6DAA4C;AAAA;AAAA,YAAhCC,CAAgC;AAAA,YAA7BpB,GAA6B;;AAC1C,YAAIA,GAAE,KAAK,QAAP,IAAmBA,GAAE,KAAK,QAA9B,EAAwC;AACtC,cAAIoB,CAAC,GAAG,CAAR,EAAW;AACT,gBAAI3C,OAAO,CAAC4C,oBAAR,CAA6BxC,IAA7B,CAAkC+B,UAAU,CAACQ,CAAC,GAAG,CAAL,CAA5C,CAAJ,EAA0D;AACxD;AACD;;AACD,gBAAIpB,GAAE,KAAK,QAAX,EAAqB;AACnB;AACA,kBAAMsB,IAAI,GAAGV,UAAU,CAACW,OAAX,CAAmB,QAAnB,EAA6BH,CAAC,GAAG,CAAjC,CAAb;AACA,kBAAMvC,IAAI,GAAGyC,IAAI,GAAG,CAAP,GAAWV,UAAU,CAAClB,KAAX,CAAiBwB,IAAjB,CAAX,GAAoCN,UAAU,CAAClB,KAAX,CAAiBwB,IAAjB,EAAuBI,IAAvB,CAAjD;;AACA,kBAAI7C,OAAO,CAAC+C,SAAR,CAAkB3C,IAAlB,CAAuBA,IAAI,CAAC4C,IAAL,CAAU,EAAV,CAAvB,CAAJ,EAA2C;AACzCP,gBAAAA,IAAI,GAAGE,CAAC,GAAG,CAAX;AACA;AACD;AACF;AACF;;AACD,iBAAO,KAAP;AACD;AACF;AApBe;AAAA;AAAA;AAAA;AAAA;AAqBjB,GAlD2G,CAoD5G;;;AACA,MAAIX,SAAJ,EAAe;AACb,QAAIiB,GAAJ,CADa,CAGb;;AACA,QAAIjD,OAAO,CAACkD,SAAR,CAAkB9C,IAAlB,CAAuB+B,UAAU,CAAC,CAAD,CAAjC,CAAJ,EAA2C;AACzCc,MAAAA,GAAG,GAAG,KAAN;AACD,KAFD,MAEO,IAAIjD,OAAO,CAACmD,SAAR,CAAkB/C,IAAlB,CAAuB+B,UAAU,CAAC,CAAD,CAAjC,CAAJ,EAA2C;AAChDc,MAAAA,GAAG,GAAG,IAAN;AACD,KAFM,MAEA;AACL,aAAO,KAAP;AACD;;AAED,QAAIA,GAAJ,EAAS;AACP;AACA,UAAI,CAACjD,OAAO,CAACoD,MAAR,CAAehD,IAAf,CAAoB0B,KAApB,CAAD,IACA,CAAC9B,OAAO,CAACqD,MAAR,CAAejD,IAAf,CAAoB0B,KAApB,CADD,IAEC9B,OAAO,CAACsD,QAAR,CAAiBlD,IAAjB,CAAsB0B,KAAtB,KAAgC9B,OAAO,CAACuD,QAAR,CAAiBnD,IAAjB,CAAsB0B,KAAtB,CAFrC,EAEoE;AAClE,eAAO,KAAP;AACD;AACF,KAPD,MAOO,IAAI,CAAC9B,OAAO,CAACwD,MAAR,CAAepD,IAAf,CAAoB0B,KAApB,CAAD,IACA,CAAC9B,OAAO,CAACyD,MAAR,CAAerD,IAAf,CAAoB0B,KAApB,CADL,EACiC;AAAE;AACxC,aAAO,KAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD;;AAED,SAAS4B,YAAT,CAAsBC,MAAtB,EAA8B;AAC5B,MAAMC,MAAM,GAAGD,MAAM,CAACE,GAAP,CAAW,UAAA/B,KAAK,EAAI;AACjC,QAAIA,KAAK,CAACf,UAAN,CAAiB,MAAjB,CAAJ,EAA8B;AAC5B,UAAI;AACF,eAAOjB,QAAQ,CAACgE,MAAT,CAAgBhC,KAAK,CAACiC,SAAN,CAAgB,CAAhB,CAAhB,CAAP;AACD,OAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,eAAO,EAAP;AACD;AACF;;AACD,WAAOlC,KAAP;AACD,GATc,EASZkB,IATY,CASP,GATO,CAAf;AAUA,SAAOhD,OAAO,CAACiE,UAAR,CAAmB7D,IAAnB,CAAwBwD,MAAxB,CAAP;AACD;;AAED,SAASM,UAAT,CAAoB/C,UAApB,EAAgCgD,OAAhC,EAAyC;AAAA,MAC/B/C,gBAD+B,GACV+C,OADU,CAC/B/C,gBAD+B,EAGvC;;AAHuC,kBAIfF,QAAQ,CAACC,UAAD,EAAagD,OAAb,CAJO;AAAA,MAIjCxC,MAJiC,aAIjCA,MAJiC;AAAA,MAIzBC,KAJyB,aAIzBA,KAJyB,EAMvC;;;AACAD,EAAAA,MAAM,GAAGA,MAAM,CAACO,SAAP,CAAiB,KAAjB,CAAT,CAPuC,CASvC;;AACA,MAAMyB,MAAM,GAAGhC,MAAM,CAACyC,KAAP,CAAa,GAAb,CAAf;AACA,MAAMC,MAAM,GAAGX,YAAY,CAACC,MAAD,CAA3B,CAXuC,CAavC;;AAbuC,8CAcVA,MAAM,CAACjB,OAAP,EAdU;AAAA;;AAAA;AAcvC,2DAA+C;AAAA;AAAA,UAAnCC,CAAmC;AAAA,UAAhC2B,SAAgC;;AAC7C,UAAIxC,KAAK,GAAGwC,SAAZ;AACA,UAAIC,aAAa,GAAGnD,gBAApB;;AACA,UAAIU,KAAK,CAACf,UAAN,CAAiB,MAAjB,CAAJ,EAA8B;AAC5B,YAAI;AACFe,UAAAA,KAAK,GAAGhC,QAAQ,CAACgE,MAAT,CAAgBhC,KAAK,CAACiC,SAAN,CAAgB,CAAhB,CAAhB,CAAR;AACAJ,UAAAA,MAAM,CAAChB,CAAD,CAAN,GAAYb,KAAZ;AACD,SAHD,CAGE,OAAOkC,GAAP,EAAY;AACZpC,UAAAA,KAAK,GAAG,IAAR;AACA;AACD;;AACD2C,QAAAA,aAAa,GAAG,iBAAhB;AACD,OAZ4C,CAc7C;;;AACA,UAAI3C,KAAJ,EAAW;AACT;AACD;;AACD,UAAM4C,UAAU,GAAG3C,aAAa,CAACC,KAAD,EAAQ2C,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,OAAlB,EAA2B;AACjE/C,QAAAA,gBAAgB,EAAEmD,aAD+C;AAEjEvC,QAAAA,SAAS,EAAEmC,OAAO,CAACnC,SAAR,IAAqBqC;AAFiC,OAA3B,CAAR,CAAhC;;AAIA,UAAI,CAACG,UAAL,EAAiB;AACf5C,QAAAA,KAAK,GAAG,IAAR;AACD;AACF;AAvCsC;AAAA;AAAA;AAAA;AAAA;;AAyCvC,SAAO;AACLD,IAAAA,MAAM,EAAEgC,MAAM,CAACX,IAAP,CAAY,GAAZ,CADH;AAELpB,IAAAA,KAAK,EAALA;AAFK,GAAP;AAID;;AAED,SAAS+C,OAAT,CAAiBxD,UAAjB,EAOQ;AAAA,kFAAJ,EAAI;AAAA,iCANNY,YAMM;AAAA,MANNA,YAMM,mCANS,KAMT;AAAA,8BALNC,SAKM;AAAA,MALNA,SAKM,gCALM,KAKN;AAAA,iCAJNC,YAIM;AAAA,MAJNA,YAIM,mCAJS,KAIT;AAAA,oCAHN1B,iBAGM;AAAA,MAHNA,iBAGM,sCAHc,KAGd;AAAA,oCAFNa,gBAEM;AAAA,MAFNA,gBAEM,sCAFa,iBAEb;AAAA,oCADNwD,eACM;AAAA,MADNA,eACM,sCADY,KACZ;;AACN,MAAIxD,gBAAgB,KAAK,cAArB,IAAuCA,gBAAgB,KAAK,iBAAhE,EAAmF;AACjF,UAAM,IAAIyD,UAAJ,CAAe,iEAAf,CAAN;AACD;;AAED,MAAMC,MAAM,GAAGZ,UAAU,CAAC/C,UAAD,EAAa;AACpCC,IAAAA,gBAAgB,EAAhBA,gBADoC;AAEpCW,IAAAA,YAAY,EAAZA,YAFoC;AAGpCC,IAAAA,SAAS,EAATA,SAHoC;AAIpCC,IAAAA,YAAY,EAAZA,YAJoC;AAKpC1B,IAAAA,iBAAiB,EAAjBA;AALoC,GAAb,CAAzB;AAOA,MAAIoD,MAAM,GAAGmB,MAAM,CAACnD,MAAP,CAAcyC,KAAd,CAAoB,GAApB,CAAb;AACAT,EAAAA,MAAM,GAAGA,MAAM,CAACE,GAAP,CAAW,UAAAkB,CAAC,EAAI;AACvB,QAAI7E,gBAAgB,CAAC6E,CAAD,CAApB,EAAyB;AACvB,UAAI;AACF,eAAO,SAASjF,QAAQ,CAACkF,MAAT,CAAgBD,CAAhB,CAAhB;AACD,OAFD,CAEE,OAAOE,CAAP,EAAU;AACVH,QAAAA,MAAM,CAAClD,KAAP,GAAe,IAAf;AACD;AACF;;AACD,WAAOmD,CAAP;AACD,GATQ,CAAT;;AAWA,MAAIH,eAAJ,EAAqB;AACnB,QAAMM,KAAK,GAAGvB,MAAM,CAACX,IAAP,CAAY,GAAZ,EAAiBtC,MAA/B;;AACA,QAAIwE,KAAK,GAAG,GAAR,IAAeA,KAAK,KAAK,CAA7B,EAAgC;AAC9BJ,MAAAA,MAAM,CAAClD,KAAP,GAAe,IAAf;AACD;;AAED,SAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgB,MAAM,CAACjD,MAA3B,EAAmC,EAAEiC,CAArC,EAAwC;AACtC,UAAIgB,MAAM,CAAChB,CAAD,CAAN,CAAUjC,MAAV,GAAmB,EAAnB,IAAyBiD,MAAM,CAAChB,CAAD,CAAN,CAAUjC,MAAV,KAAqB,CAAlD,EAAqD;AACnDoE,QAAAA,MAAM,CAAClD,KAAP,GAAe,IAAf;AACA;AACD;AACF;AACF;;AAED,MAAIkD,MAAM,CAAClD,KAAX,EAAkB;AAChB,WAAO,IAAP;AACD;;AACD,SAAO+B,MAAM,CAACX,IAAP,CAAY,GAAZ,CAAP;AACD;;AAED,SAASmC,SAAT,CAAmBhE,UAAnB,EAKQ;AAAA,kFAAJ,EAAI;AAAA,iCAJNY,YAIM;AAAA,MAJNA,YAIM,mCAJS,KAIT;AAAA,8BAHNC,SAGM;AAAA,MAHNA,SAGM,gCAHM,KAGN;AAAA,iCAFNC,YAEM;AAAA,MAFNA,YAEM,mCAFS,KAET;AAAA,oCADN1B,iBACM;AAAA,MADNA,iBACM,sCADc,KACd;;AACN,MAAMuE,MAAM,GAAGZ,UAAU,CAAC/C,UAAD,EAAa;AACpCC,IAAAA,gBAAgB,EAAE,iBADkB;AAEpCW,IAAAA,YAAY,EAAZA,YAFoC;AAGpCC,IAAAA,SAAS,EAATA,SAHoC;AAIpCC,IAAAA,YAAY,EAAZA,YAJoC;AAKpC1B,IAAAA,iBAAiB,EAAjBA;AALoC,GAAb,CAAzB;AAQA,SAAO;AACLqD,IAAAA,MAAM,EAAEkB,MAAM,CAACnD,MADV;AAELC,IAAAA,KAAK,EAAEkD,MAAM,CAAClD;AAFT,GAAP;AAID;;AAEDwD,MAAM,CAACC,OAAP,GAAiB;AACfV,EAAAA,OAAO,EAAPA,OADe;AAEfQ,EAAAA,SAAS,EAATA;AAFe,CAAjB","sourcesContent":["\"use strict\";\n\nconst punycode = require(\"punycode\");\nconst regexes = require(\"./lib/regexes.js\");\nconst mappingTable = require(\"./lib/mappingTable.json\");\n\nfunction containsNonASCII(str) {\n  return /[^\\x00-\\x7F]/.test(str);\n}\n\nfunction findStatus(val, { useSTD3ASCIIRules }) {\n  let start = 0;\n  let end = mappingTable.length - 1;\n\n  while (start <= end) {\n    const mid = Math.floor((start + end) / 2);\n\n    const target = mappingTable[mid];\n    if (target[0][0] <= val && target[0][1] >= val) {\n      if (target[1].startsWith(\"disallowed_STD3_\")) {\n        const newStatus = useSTD3ASCIIRules ? \"disallowed\" : target[1].slice(16);\n        return [newStatus, ...target.slice(2)];\n      }\n      return target.slice(1);\n    } else if (target[0][0] > val) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n\n  return null;\n}\n\nfunction mapChars(domainName, { useSTD3ASCIIRules, processingOption }) {\n  let hasError = false;\n  let processed = \"\";\n\n  for (const ch of domainName) {\n    const [status, mapping] = findStatus(ch.codePointAt(0), { useSTD3ASCIIRules });\n\n    switch (status) {\n      case \"disallowed\":\n        hasError = true;\n        processed += ch;\n        break;\n      case \"ignored\":\n        break;\n      case \"mapped\":\n        processed += mapping;\n        break;\n      case \"deviation\":\n        if (processingOption === \"transitional\") {\n          processed += mapping;\n        } else {\n          processed += ch;\n        }\n        break;\n      case \"valid\":\n        processed += ch;\n        break;\n    }\n  }\n\n  return {\n    string: processed,\n    error: hasError\n  };\n}\n\nfunction validateLabel(label, { checkHyphens, checkBidi, checkJoiners, processingOption, useSTD3ASCIIRules }) {\n  if (label.normalize(\"NFC\") !== label) {\n    return false;\n  }\n\n  const codePoints = Array.from(label);\n\n  if (checkHyphens) {\n    if ((codePoints[2] === \"-\" && codePoints[3] === \"-\") ||\n        (label.startsWith(\"-\") || label.endsWith(\"-\"))) {\n      return false;\n    }\n  }\n\n  if (label.includes(\".\") ||\n      (codePoints.length > 0 && regexes.combiningMarks.test(codePoints[0]))) {\n    return false;\n  }\n\n  for (const ch of codePoints) {\n    const [status] = findStatus(ch.codePointAt(0), { useSTD3ASCIIRules });\n    if ((processingOption === \"transitional\" && status !== \"valid\") ||\n        (processingOption === \"nontransitional\" &&\n         status !== \"valid\" && status !== \"deviation\")) {\n      return false;\n    }\n  }\n\n  // https://tools.ietf.org/html/rfc5892#appendix-A\n  if (checkJoiners) {\n    let last = 0;\n    for (const [i, ch] of codePoints.entries()) {\n      if (ch === \"\\u200C\" || ch === \"\\u200D\") {\n        if (i > 0) {\n          if (regexes.combiningClassVirama.test(codePoints[i - 1])) {\n            continue;\n          }\n          if (ch === \"\\u200C\") {\n            // TODO: make this more efficient\n            const next = codePoints.indexOf(\"\\u200C\", i + 1);\n            const test = next < 0 ? codePoints.slice(last) : codePoints.slice(last, next);\n            if (regexes.validZWNJ.test(test.join(\"\"))) {\n              last = i + 1;\n              continue;\n            }\n          }\n        }\n        return false;\n      }\n    }\n  }\n\n  // https://tools.ietf.org/html/rfc5893#section-2\n  if (checkBidi) {\n    let rtl;\n\n    // 1\n    if (regexes.bidiS1LTR.test(codePoints[0])) {\n      rtl = false;\n    } else if (regexes.bidiS1RTL.test(codePoints[0])) {\n      rtl = true;\n    } else {\n      return false;\n    }\n\n    if (rtl) {\n      // 2-4\n      if (!regexes.bidiS2.test(label) ||\n          !regexes.bidiS3.test(label) ||\n          (regexes.bidiS4EN.test(label) && regexes.bidiS4AN.test(label))) {\n        return false;\n      }\n    } else if (!regexes.bidiS5.test(label) ||\n               !regexes.bidiS6.test(label)) { // 5-6\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isBidiDomain(labels) {\n  const domain = labels.map(label => {\n    if (label.startsWith(\"xn--\")) {\n      try {\n        return punycode.decode(label.substring(4));\n      } catch (err) {\n        return \"\";\n      }\n    }\n    return label;\n  }).join(\".\");\n  return regexes.bidiDomain.test(domain);\n}\n\nfunction processing(domainName, options) {\n  const { processingOption } = options;\n\n  // 1. Map.\n  let { string, error } = mapChars(domainName, options);\n\n  // 2. Normalize.\n  string = string.normalize(\"NFC\");\n\n  // 3. Break.\n  const labels = string.split(\".\");\n  const isBidi = isBidiDomain(labels);\n\n  // 4. Convert/Validate.\n  for (const [i, origLabel] of labels.entries()) {\n    let label = origLabel;\n    let curProcessing = processingOption;\n    if (label.startsWith(\"xn--\")) {\n      try {\n        label = punycode.decode(label.substring(4));\n        labels[i] = label;\n      } catch (err) {\n        error = true;\n        continue;\n      }\n      curProcessing = \"nontransitional\";\n    }\n\n    // No need to validate if we already know there is an error.\n    if (error) {\n      continue;\n    }\n    const validation = validateLabel(label, Object.assign({}, options, {\n      processingOption: curProcessing,\n      checkBidi: options.checkBidi && isBidi\n    }));\n    if (!validation) {\n      error = true;\n    }\n  }\n\n  return {\n    string: labels.join(\".\"),\n    error\n  };\n}\n\nfunction toASCII(domainName, {\n  checkHyphens = false,\n  checkBidi = false,\n  checkJoiners = false,\n  useSTD3ASCIIRules = false,\n  processingOption = \"nontransitional\",\n  verifyDNSLength = false\n} = {}) {\n  if (processingOption !== \"transitional\" && processingOption !== \"nontransitional\") {\n    throw new RangeError(\"processingOption must be either transitional or nontransitional\");\n  }\n\n  const result = processing(domainName, {\n    processingOption,\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    useSTD3ASCIIRules\n  });\n  let labels = result.string.split(\".\");\n  labels = labels.map(l => {\n    if (containsNonASCII(l)) {\n      try {\n        return \"xn--\" + punycode.encode(l);\n      } catch (e) {\n        result.error = true;\n      }\n    }\n    return l;\n  });\n\n  if (verifyDNSLength) {\n    const total = labels.join(\".\").length;\n    if (total > 253 || total === 0) {\n      result.error = true;\n    }\n\n    for (let i = 0; i < labels.length; ++i) {\n      if (labels[i].length > 63 || labels[i].length === 0) {\n        result.error = true;\n        break;\n      }\n    }\n  }\n\n  if (result.error) {\n    return null;\n  }\n  return labels.join(\".\");\n}\n\nfunction toUnicode(domainName, {\n  checkHyphens = false,\n  checkBidi = false,\n  checkJoiners = false,\n  useSTD3ASCIIRules = false\n} = {}) {\n  const result = processing(domainName, {\n    processingOption: \"nontransitional\",\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    useSTD3ASCIIRules\n  });\n\n  return {\n    domain: result.string,\n    error: result.error\n  };\n}\n\nmodule.exports = {\n  toASCII,\n  toUnicode\n};\n"]},"metadata":{},"sourceType":"script"}