{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar DefaultConstraintValidationImpl = require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\n\nvar ValidityState = require(\"../generated/ValidityState\");\n\nvar _require = require(\"../../utils\"),\n    mixin = _require.mixin;\n\nvar DOMException = require(\"domexception\");\n\nvar _require2 = require(\"../helpers/traversal\"),\n    closest = _require2.closest;\n\nvar _require3 = require(\"../helpers/form-controls\"),\n    normalizeToCRLF = _require3.normalizeToCRLF,\n    getLabelsForLabelable = _require3.getLabelsForLabelable;\n\nvar _require4 = require(\"../helpers/text\"),\n    childTextContent = _require4.childTextContent;\n\nvar HTMLTextAreaElementImpl = /*#__PURE__*/function (_HTMLElementImpl) {\n  _inherits(HTMLTextAreaElementImpl, _HTMLElementImpl);\n\n  var _super = _createSuper(HTMLTextAreaElementImpl);\n\n  function HTMLTextAreaElementImpl(args, privateData) {\n    var _this;\n\n    _classCallCheck(this, HTMLTextAreaElementImpl);\n\n    _this = _super.call(this, args, privateData);\n    _this._rawValue = \"\";\n    _this._dirtyValue = false;\n    _this._customValidityErrorMessage = \"\";\n    _this._labels = null;\n    return _this;\n  }\n\n  _createClass(HTMLTextAreaElementImpl, [{\n    key: \"_formReset\",\n    value: function _formReset() {\n      this._rawValue = childTextContent(this);\n      this._dirtyValue = false;\n    }\n  }, {\n    key: \"_getAPIValue\",\n    value: function _getAPIValue() {\n      return this._rawValue.replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\");\n    }\n  }, {\n    key: \"_getValue\",\n    value: function _getValue() {\n      // Hard-wrapping omitted, for now.\n      return normalizeToCRLF(this._rawValue);\n    }\n  }, {\n    key: \"_childTextContentChangeSteps\",\n    value: function _childTextContentChangeSteps() {\n      if (this._dirtyValue === false) {\n        this._rawValue = childTextContent(this);\n      }\n    }\n  }, {\n    key: \"_dispatchSelectEvent\",\n    value: function _dispatchSelectEvent() {\n      var event = this._ownerDocument.createEvent(\"HTMLEvents\");\n\n      event.initEvent(\"select\", true, true);\n      this.dispatchEvent(event);\n    }\n  }, {\n    key: \"_getValueLength\",\n    value: function _getValueLength() {\n      return typeof this.value === \"string\" ? this.value.length : 0;\n    }\n  }, {\n    key: \"select\",\n    value: function select() {\n      this._selectionStart = 0;\n      this._selectionEnd = this._getValueLength();\n      this._selectionDirection = \"none\";\n\n      this._dispatchSelectEvent();\n    }\n  }, {\n    key: \"setSelectionRange\",\n    value: function setSelectionRange(start, end, dir) {\n      this._selectionEnd = Math.min(end, this._getValueLength());\n      this._selectionStart = Math.min(start, this._selectionEnd);\n      this._selectionDirection = dir === \"forward\" || dir === \"backward\" ? dir : \"none\";\n\n      this._dispatchSelectEvent();\n    }\n  }, {\n    key: \"setRangeText\",\n    value: function setRangeText(repl, start, end) {\n      var selectionMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"preserve\";\n\n      if (arguments.length < 2) {\n        start = this._selectionStart;\n        end = this._selectionEnd;\n      } else if (start > end) {\n        throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n      }\n\n      start = Math.min(start, this._getValueLength());\n      end = Math.min(end, this._getValueLength());\n      var val = this.value;\n      var selStart = this._selectionStart;\n      var selEnd = this._selectionEnd;\n      this.value = val.slice(0, start) + repl + val.slice(end);\n      var newEnd = start + this.value.length;\n\n      if (selectionMode === \"select\") {\n        this.setSelectionRange(start, newEnd);\n      } else if (selectionMode === \"start\") {\n        this.setSelectionRange(start, start);\n      } else if (selectionMode === \"end\") {\n        this.setSelectionRange(newEnd, newEnd);\n      } else {\n        // preserve\n        var delta = repl.length - (end - start);\n\n        if (selStart > end) {\n          selStart += delta;\n        } else if (selStart > start) {\n          selStart = start;\n        }\n\n        if (selEnd > end) {\n          selEnd += delta;\n        } else if (selEnd > start) {\n          selEnd = newEnd;\n        }\n\n        this.setSelectionRange(selStart, selEnd);\n      }\n    }\n  }, {\n    key: \"_barredFromConstraintValidationSpecialization\",\n    value: function _barredFromConstraintValidationSpecialization() {\n      return this.hasAttribute(\"readonly\");\n    } // https://html.spec.whatwg.org/multipage/form-elements.html#attr-textarea-required\n\n  }, {\n    key: \"labels\",\n    get: function get() {\n      return getLabelsForLabelable(this);\n    }\n  }, {\n    key: \"form\",\n    get: function get() {\n      return closest(this, \"form\");\n    }\n  }, {\n    key: \"defaultValue\",\n    get: function get() {\n      return childTextContent(this);\n    },\n    set: function set(val) {\n      this.textContent = val;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._getAPIValue();\n    },\n    set: function set(val) {\n      this._rawValue = val;\n      this._dirtyValue = true;\n      this._selectionStart = 0;\n      this._selectionEnd = 0;\n      this._selectionDirection = \"none\";\n    }\n  }, {\n    key: \"textLength\",\n    get: function get() {\n      return this.value.length; // code unit length (16 bit)\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"textarea\";\n    }\n  }, {\n    key: \"selectionStart\",\n    get: function get() {\n      return this._selectionStart;\n    },\n    set: function set(start) {\n      this.setSelectionRange(start, Math.max(start, this._selectionEnd), this._selectionDirection);\n    }\n  }, {\n    key: \"selectionEnd\",\n    get: function get() {\n      return this._selectionEnd;\n    },\n    set: function set(end) {\n      this.setSelectionRange(this._selectionStart, end, this._selectionDirection);\n    }\n  }, {\n    key: \"selectionDirection\",\n    get: function get() {\n      return this._selectionDirection;\n    },\n    set: function set(dir) {\n      this.setSelectionRange(this._selectionStart, this._selectionEnd, dir);\n    }\n  }, {\n    key: \"cols\",\n    get: function get() {\n      if (!this.hasAttribute(\"cols\")) {\n        return 20;\n      }\n\n      return parseInt(this.getAttribute(\"cols\"));\n    },\n    set: function set(value) {\n      if (value <= 0) {\n        throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n      }\n\n      this.setAttribute(\"cols\", String(value));\n    }\n  }, {\n    key: \"rows\",\n    get: function get() {\n      if (!this.hasAttribute(\"rows\")) {\n        return 2;\n      }\n\n      return parseInt(this.getAttribute(\"rows\"));\n    },\n    set: function set(value) {\n      if (value <= 0) {\n        throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n      }\n\n      this.setAttribute(\"rows\", String(value));\n    }\n  }, {\n    key: \"validity\",\n    get: function get() {\n      var _this2 = this;\n\n      if (!this._validity) {\n        this._validity = ValidityState.createImpl(this, {\n          valueMissing: function valueMissing() {\n            return _this2.hasAttribute(\"required\") && _this2.value === \"\";\n          }\n        });\n      }\n\n      return this._validity;\n    }\n  }]);\n\n  return HTMLTextAreaElementImpl;\n}(HTMLElementImpl);\n\nmixin(HTMLTextAreaElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\nmodule.exports = {\n  implementation: HTMLTextAreaElementImpl\n};","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTextAreaElement-impl.js"],"names":["HTMLElementImpl","require","implementation","DefaultConstraintValidationImpl","ValidityState","mixin","DOMException","closest","normalizeToCRLF","getLabelsForLabelable","childTextContent","HTMLTextAreaElementImpl","args","privateData","_rawValue","_dirtyValue","_customValidityErrorMessage","_labels","replace","event","_ownerDocument","createEvent","initEvent","dispatchEvent","value","length","_selectionStart","_selectionEnd","_getValueLength","_selectionDirection","_dispatchSelectEvent","start","end","dir","Math","min","repl","selectionMode","arguments","val","selStart","selEnd","slice","newEnd","setSelectionRange","delta","hasAttribute","textContent","_getAPIValue","max","parseInt","getAttribute","setAttribute","String","_validity","createImpl","valueMissing","prototype","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst DefaultConstraintValidationImpl =\n  require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\nconst ValidityState = require(\"../generated/ValidityState\");\nconst { mixin } = require(\"../../utils\");\n\nconst DOMException = require(\"domexception\");\nconst { closest } = require(\"../helpers/traversal\");\nconst { normalizeToCRLF, getLabelsForLabelable } = require(\"../helpers/form-controls\");\nconst { childTextContent } = require(\"../helpers/text\");\n\nclass HTMLTextAreaElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n\n    this._rawValue = \"\";\n    this._dirtyValue = false;\n\n    this._customValidityErrorMessage = \"\";\n\n    this._labels = null;\n  }\n\n  _formReset() {\n    this._rawValue = childTextContent(this);\n    this._dirtyValue = false;\n  }\n\n  _getAPIValue() {\n    return this._rawValue.replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\");\n  }\n\n  _getValue() {\n    // Hard-wrapping omitted, for now.\n    return normalizeToCRLF(this._rawValue);\n  }\n\n  _childTextContentChangeSteps() {\n    if (this._dirtyValue === false) {\n      this._rawValue = childTextContent(this);\n    }\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get form() {\n    return closest(this, \"form\");\n  }\n\n  get defaultValue() {\n    return childTextContent(this);\n  }\n\n  set defaultValue(val) {\n    this.textContent = val;\n  }\n\n  get value() {\n    return this._getAPIValue();\n  }\n\n  set value(val) {\n    this._rawValue = val;\n    this._dirtyValue = true;\n\n    this._selectionStart = 0;\n    this._selectionEnd = 0;\n    this._selectionDirection = \"none\";\n  }\n\n  get textLength() {\n    return this.value.length; // code unit length (16 bit)\n  }\n\n  get type() {\n    return \"textarea\";\n  }\n\n  _dispatchSelectEvent() {\n    const event = this._ownerDocument.createEvent(\"HTMLEvents\");\n    event.initEvent(\"select\", true, true);\n    this.dispatchEvent(event);\n  }\n\n  _getValueLength() {\n    return typeof this.value === \"string\" ? this.value.length : 0;\n  }\n\n  select() {\n    this._selectionStart = 0;\n    this._selectionEnd = this._getValueLength();\n    this._selectionDirection = \"none\";\n    this._dispatchSelectEvent();\n  }\n\n  get selectionStart() {\n    return this._selectionStart;\n  }\n\n  set selectionStart(start) {\n    this.setSelectionRange(start, Math.max(start, this._selectionEnd), this._selectionDirection);\n  }\n\n  get selectionEnd() {\n    return this._selectionEnd;\n  }\n\n  set selectionEnd(end) {\n    this.setSelectionRange(this._selectionStart, end, this._selectionDirection);\n  }\n\n  get selectionDirection() {\n    return this._selectionDirection;\n  }\n\n  set selectionDirection(dir) {\n    this.setSelectionRange(this._selectionStart, this._selectionEnd, dir);\n  }\n\n  setSelectionRange(start, end, dir) {\n    this._selectionEnd = Math.min(end, this._getValueLength());\n    this._selectionStart = Math.min(start, this._selectionEnd);\n    this._selectionDirection = dir === \"forward\" || dir === \"backward\" ? dir : \"none\";\n    this._dispatchSelectEvent();\n  }\n\n  setRangeText(repl, start, end, selectionMode = \"preserve\") {\n    if (arguments.length < 2) {\n      start = this._selectionStart;\n      end = this._selectionEnd;\n    } else if (start > end) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    start = Math.min(start, this._getValueLength());\n    end = Math.min(end, this._getValueLength());\n\n    const val = this.value;\n    let selStart = this._selectionStart;\n    let selEnd = this._selectionEnd;\n\n    this.value = val.slice(0, start) + repl + val.slice(end);\n\n    const newEnd = start + this.value.length;\n\n    if (selectionMode === \"select\") {\n      this.setSelectionRange(start, newEnd);\n    } else if (selectionMode === \"start\") {\n      this.setSelectionRange(start, start);\n    } else if (selectionMode === \"end\") {\n      this.setSelectionRange(newEnd, newEnd);\n    } else { // preserve\n      const delta = repl.length - (end - start);\n\n      if (selStart > end) {\n        selStart += delta;\n      } else if (selStart > start) {\n        selStart = start;\n      }\n\n      if (selEnd > end) {\n        selEnd += delta;\n      } else if (selEnd > start) {\n        selEnd = newEnd;\n      }\n\n      this.setSelectionRange(selStart, selEnd);\n    }\n  }\n\n  get cols() {\n    if (!this.hasAttribute(\"cols\")) {\n      return 20;\n    }\n    return parseInt(this.getAttribute(\"cols\"));\n  }\n\n  set cols(value) {\n    if (value <= 0) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n    this.setAttribute(\"cols\", String(value));\n  }\n\n  get rows() {\n    if (!this.hasAttribute(\"rows\")) {\n      return 2;\n    }\n    return parseInt(this.getAttribute(\"rows\"));\n  }\n\n  set rows(value) {\n    if (value <= 0) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n    this.setAttribute(\"rows\", String(value));\n  }\n\n  _barredFromConstraintValidationSpecialization() {\n    return this.hasAttribute(\"readonly\");\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#attr-textarea-required\n  get validity() {\n    if (!this._validity) {\n      this._validity = ValidityState.createImpl(this, {\n        valueMissing: () => this.hasAttribute(\"required\") && this.value === \"\"\n      });\n    }\n    return this._validity;\n  }\n}\n\nmixin(HTMLTextAreaElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\n\nmodule.exports = {\n  implementation: HTMLTextAreaElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}