{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar impl = utils.implSymbol;\n\nfunction ElementContentEditable() {\n  throw new TypeError(\"Illegal constructor\");\n}\n\nObject.defineProperty(ElementContentEditable, \"prototype\", {\n  value: ElementContentEditable.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\nObject.defineProperty(ElementContentEditable.prototype, Symbol.toStringTag, {\n  value: \"ElementContentEditable\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nvar iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is: function is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      var _iterator = _createForOfIteratorHelper(module.exports._mixedIntoPredicates),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var isMixedInto = _step.value;\n\n          if (isMixedInto(obj)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    return false;\n  },\n  isImpl: function isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      var wrapper = utils.wrapperForImpl(obj);\n\n      var _iterator2 = _createForOfIteratorHelper(module.exports._mixedIntoPredicates),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var isMixedInto = _step2.value;\n\n          if (isMixedInto(wrapper)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n\n    return false;\n  },\n  convert: function convert(obj) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'ElementContentEditable'.\"));\n  },\n  create: function create(constructorArgs, privateData) {\n    var obj = Object.create(ElementContentEditable.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl: function createImpl(constructorArgs, privateData) {\n    var obj = Object.create(ElementContentEditable.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup: function _internalSetup(obj) {},\n  setup: function setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n  interface: ElementContentEditable,\n  expose: {}\n}; // iface\n\nmodule.exports = iface;\n\nvar Impl = require(\"../nodes/ElementContentEditable-impl.js\");","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/generated/ElementContentEditable.js"],"names":["conversions","require","utils","impl","implSymbol","ElementContentEditable","TypeError","Object","defineProperty","value","prototype","writable","enumerable","configurable","Symbol","toStringTag","iface","_mixedIntoPredicates","is","obj","hasOwn","Impl","implementation","module","exports","isMixedInto","isImpl","wrapper","wrapperForImpl","convert","context","implForWrapper","create","constructorArgs","privateData","setup","createImpl","_internalSetup","wrapperSymbol","init","interface","expose"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst impl = utils.implSymbol;\n\nfunction ElementContentEditable() {\n  throw new TypeError(\"Illegal constructor\");\n}\n\nObject.defineProperty(ElementContentEditable, \"prototype\", {\n  value: ElementContentEditable.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nObject.defineProperty(ElementContentEditable.prototype, Symbol.toStringTag, {\n  value: \"ElementContentEditable\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\n\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  convert(obj, { context = \"The provided value\" } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n    throw new TypeError(`${context} is not of type 'ElementContentEditable'.`);\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(ElementContentEditable.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(ElementContentEditable.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup(obj) {},\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n\n    obj[impl][utils.wrapperSymbol] = obj;\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n    return obj;\n  },\n  interface: ElementContentEditable,\n  expose: {}\n}; // iface\nmodule.exports = iface;\n\nconst Impl = require(\"../nodes/ElementContentEditable-impl.js\");\n"]},"metadata":{},"sourceType":"script"}