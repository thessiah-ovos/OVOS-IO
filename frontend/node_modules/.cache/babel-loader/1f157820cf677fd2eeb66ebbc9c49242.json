{"ast":null,"code":"\"use strict\";\n\nvar asciiWhitespaceRe = /^[\\t\\n\\f\\r ]$/;\nexports.asciiWhitespaceRe = asciiWhitespaceRe; // https://infra.spec.whatwg.org/#ascii-lowercase\n\nexports.asciiLowercase = function (s) {\n  return s.replace(/[A-Z]/g, function (l) {\n    return l.toLowerCase();\n  });\n}; // https://infra.spec.whatwg.org/#strip-newlines\n\n\nexports.stripNewlines = function (s) {\n  return s.replace(/[\\n\\r]+/g, \"\");\n}; // https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace\n\n\nexports.stripLeadingAndTrailingASCIIWhitespace = function (s) {\n  return s.replace(/^[ \\t\\n\\f\\r]+/, \"\").replace(/[ \\t\\n\\f\\r]+$/, \"\");\n}; // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\n\nexports.stripAndCollapseASCIIWhitespace = function (s) {\n  return s.replace(/[ \\t\\n\\f\\r]+/g, \" \").replace(/^[ \\t\\n\\f\\r]+/, \"\").replace(/[ \\t\\n\\f\\r]+$/, \"\");\n}; // https://html.spec.whatwg.org/multipage/infrastructure.html#valid-simple-colour\n\n\nexports.isValidSimpleColor = function (s) {\n  return /^#[a-fA-F\\d]{6}$/.test(s);\n}; // https://infra.spec.whatwg.org/#ascii-case-insensitive\n\n\nexports.asciiCaseInsensitiveMatch = function (a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (var i = 0; i < a.length; ++i) {\n    if ((a.charCodeAt(i) | 32) !== (b.charCodeAt(i) | 32)) {\n      return false;\n    }\n  }\n\n  return true;\n}; // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-floating-point-number\n\n\nvar floatingPointNumRe = /^-?(?:\\d+|\\d*\\.\\d+)(?:[eE][-+]?\\d+)?$/;\n\nexports.isValidFloatingPointNumber = function (str) {\n  return floatingPointNumRe.test(str);\n}; // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values\n\n\nexports.parseFloatingPointNumber = function (str) {\n  var parsed = parseFloat(str);\n  return isFinite(parsed) ? parsed : NaN;\n}; // https://infra.spec.whatwg.org/#split-on-ascii-whitespace\n\n\nexports.splitOnASCIIWhitespace = function (str) {\n  var position = 0;\n  var tokens = [];\n\n  while (position < str.length && asciiWhitespaceRe.test(str[position])) {\n    position++;\n  }\n\n  if (position === str.length) {\n    return tokens;\n  }\n\n  while (position < str.length) {\n    var start = position;\n\n    while (position < str.length && !asciiWhitespaceRe.test(str[position])) {\n      position++;\n    }\n\n    tokens.push(str.slice(start, position));\n\n    while (position < str.length && asciiWhitespaceRe.test(str[position])) {\n      position++;\n    }\n  }\n\n  return tokens;\n}; // https://infra.spec.whatwg.org/#split-on-commas\n\n\nexports.splitOnCommas = function (str) {\n  var position = 0;\n  var tokens = [];\n\n  while (position < str.length) {\n    var start = position;\n\n    while (position < str.length && str[position] !== \",\") {\n      position++;\n    }\n\n    var end = position;\n\n    while (start < str.length && asciiWhitespaceRe.test(str[start])) {\n      start++;\n    }\n\n    while (end > start && asciiWhitespaceRe.test(str[end - 1])) {\n      end--;\n    }\n\n    tokens.push(str.slice(start, end));\n\n    if (position < str.length) {\n      position++;\n    }\n  }\n\n  return tokens;\n};","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/helpers/strings.js"],"names":["asciiWhitespaceRe","exports","asciiLowercase","s","replace","l","toLowerCase","stripNewlines","stripLeadingAndTrailingASCIIWhitespace","stripAndCollapseASCIIWhitespace","isValidSimpleColor","test","asciiCaseInsensitiveMatch","a","b","length","i","charCodeAt","floatingPointNumRe","isValidFloatingPointNumber","str","parseFloatingPointNumber","parsed","parseFloat","isFinite","NaN","splitOnASCIIWhitespace","position","tokens","start","push","slice","splitOnCommas","end"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst asciiWhitespaceRe = /^[\\t\\n\\f\\r ]$/;\nexports.asciiWhitespaceRe = asciiWhitespaceRe;\n\n// https://infra.spec.whatwg.org/#ascii-lowercase\nexports.asciiLowercase = s => {\n  return s.replace(/[A-Z]/g, l => l.toLowerCase());\n};\n\n// https://infra.spec.whatwg.org/#strip-newlines\nexports.stripNewlines = s => {\n  return s.replace(/[\\n\\r]+/g, \"\");\n};\n\n// https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace\nexports.stripLeadingAndTrailingASCIIWhitespace = s => {\n  return s.replace(/^[ \\t\\n\\f\\r]+/, \"\").replace(/[ \\t\\n\\f\\r]+$/, \"\");\n};\n\n// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\nexports.stripAndCollapseASCIIWhitespace = s => {\n  return s.replace(/[ \\t\\n\\f\\r]+/g, \" \").replace(/^[ \\t\\n\\f\\r]+/, \"\").replace(/[ \\t\\n\\f\\r]+$/, \"\");\n};\n\n// https://html.spec.whatwg.org/multipage/infrastructure.html#valid-simple-colour\nexports.isValidSimpleColor = s => {\n  return /^#[a-fA-F\\d]{6}$/.test(s);\n};\n\n// https://infra.spec.whatwg.org/#ascii-case-insensitive\nexports.asciiCaseInsensitiveMatch = (a, b) => {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (let i = 0; i < a.length; ++i) {\n    if ((a.charCodeAt(i) | 32) !== (b.charCodeAt(i) | 32)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n// https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-floating-point-number\nconst floatingPointNumRe = /^-?(?:\\d+|\\d*\\.\\d+)(?:[eE][-+]?\\d+)?$/;\nexports.isValidFloatingPointNumber = str => floatingPointNumRe.test(str);\n\n// https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values\nexports.parseFloatingPointNumber = str => {\n  const parsed = parseFloat(str);\n  return isFinite(parsed) ? parsed : NaN;\n};\n\n// https://infra.spec.whatwg.org/#split-on-ascii-whitespace\nexports.splitOnASCIIWhitespace = str => {\n  let position = 0;\n  const tokens = [];\n  while (position < str.length && asciiWhitespaceRe.test(str[position])) {\n    position++;\n  }\n  if (position === str.length) {\n    return tokens;\n  }\n  while (position < str.length) {\n    const start = position;\n    while (position < str.length && !asciiWhitespaceRe.test(str[position])) {\n      position++;\n    }\n    tokens.push(str.slice(start, position));\n    while (position < str.length && asciiWhitespaceRe.test(str[position])) {\n      position++;\n    }\n  }\n  return tokens;\n};\n\n// https://infra.spec.whatwg.org/#split-on-commas\nexports.splitOnCommas = str => {\n  let position = 0;\n  const tokens = [];\n  while (position < str.length) {\n    let start = position;\n    while (position < str.length && str[position] !== \",\") {\n      position++;\n    }\n    let end = position;\n    while (start < str.length && asciiWhitespaceRe.test(str[start])) {\n      start++;\n    }\n    while (end > start && asciiWhitespaceRe.test(str[end - 1])) {\n      end--;\n    }\n    tokens.push(str.slice(start, end));\n    if (position < str.length) {\n      position++;\n    }\n  }\n  return tokens;\n};\n"]},"metadata":{},"sourceType":"script"}