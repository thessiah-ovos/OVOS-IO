{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar idlUtils = require(\"../generated/utils\");\n\nvar UIEventInit = require(\"../generated/UIEventInit\");\n\nvar EventImpl = require(\"./Event-impl\").implementation; // Until webidl2js gains support for checking for Window, this would have to do.\n\n\nfunction isWindow(val) {\n  if (typeof val !== \"object\") {\n    return false;\n  }\n\n  var wrapper = idlUtils.wrapperForImpl(val);\n\n  if (typeof wrapper === \"object\") {\n    return wrapper === wrapper._globalProxy;\n  } // `val` may be either impl or wrapper currently, because webidl2js currently unwraps Window objects (and their global\n  // proxies) to their underlying EventTargetImpl during conversion, which is not what we want. But at the same time,\n  // some internal usage call this constructor with the actual global proxy.\n\n\n  return isWindow(idlUtils.implForWrapper(val));\n}\n\nvar UIEventImpl = /*#__PURE__*/function (_EventImpl) {\n  _inherits(UIEventImpl, _EventImpl);\n\n  var _super = _createSuper(UIEventImpl);\n\n  function UIEventImpl(args, privateData) {\n    _classCallCheck(this, UIEventImpl);\n\n    var eventInitDict = args[1]; // undefined check included so that we can omit the property in internal usage.\n\n    if (eventInitDict && eventInitDict.view !== null && eventInitDict.view !== undefined) {\n      if (!isWindow(eventInitDict.view)) {\n        throw new TypeError(\"Failed to construct '\".concat((this instanceof UIEventImpl ? this.constructor : void 0).name.replace(/Impl$/, \"\"), \"': member view is not of \") + \"type Window.\");\n      }\n    }\n\n    return _super.call(this, args, privateData);\n  }\n\n  _createClass(UIEventImpl, [{\n    key: \"initUIEvent\",\n    value: function initUIEvent(type, bubbles, cancelable, view, detail) {\n      if (view !== null) {\n        if (!isWindow(view)) {\n          throw new TypeError(\"Failed to execute 'initUIEvent' on '\".concat(this.constructor.name.replace(/Impl$/, \"\"), \"': \") + \"parameter 4 is not of type 'Window'.\");\n        }\n      }\n\n      if (this._dispatchFlag) {\n        return;\n      }\n\n      this.initEvent(type, bubbles, cancelable);\n      this.view = view;\n      this.detail = detail;\n    }\n  }]);\n\n  return UIEventImpl;\n}(EventImpl);\n\nUIEventImpl.defaultInit = UIEventInit.convert(undefined);\nmodule.exports = {\n  implementation: UIEventImpl\n};","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/events/UIEvent-impl.js"],"names":["idlUtils","require","UIEventInit","EventImpl","implementation","isWindow","val","wrapper","wrapperForImpl","_globalProxy","implForWrapper","UIEventImpl","args","privateData","eventInitDict","view","undefined","TypeError","name","replace","type","bubbles","cancelable","detail","constructor","_dispatchFlag","initEvent","defaultInit","convert","module","exports"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,oBAAD,CAAxB;;AACA,IAAMC,WAAW,GAAGD,OAAO,CAAC,0BAAD,CAA3B;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,cAAD,CAAP,CAAwBG,cAA1C,C,CAEA;;;AACA,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3B,WAAO,KAAP;AACD;;AACD,MAAMC,OAAO,GAAGP,QAAQ,CAACQ,cAAT,CAAwBF,GAAxB,CAAhB;;AACA,MAAI,OAAOC,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,WAAOA,OAAO,KAAKA,OAAO,CAACE,YAA3B;AACD,GAPoB,CASrB;AACA;AACA;;;AACA,SAAOJ,QAAQ,CAACL,QAAQ,CAACU,cAAT,CAAwBJ,GAAxB,CAAD,CAAf;AACD;;IAEKK,W;;;;;AACJ,uBAAYC,IAAZ,EAAkBC,WAAlB,EAA+B;AAAA;;AAC7B,QAAMC,aAAa,GAAGF,IAAI,CAAC,CAAD,CAA1B,CAD6B,CAG7B;;AACA,QAAIE,aAAa,IAAIA,aAAa,CAACC,IAAd,KAAuB,IAAxC,IAAgDD,aAAa,CAACC,IAAd,KAAuBC,SAA3E,EAAsF;AACpF,UAAI,CAACX,QAAQ,CAACS,aAAa,CAACC,IAAf,CAAb,EAAmC;AACjC,cAAM,IAAIE,SAAJ,CAAc,+BAAwB,0DAAWC,IAAX,CAAgBC,OAAhB,CAAwB,OAAxB,EAAiC,EAAjC,CAAxB,iCACA,cADd,CAAN;AAED;AACF;;AAT4B,6BAWvBP,IAXuB,EAWjBC,WAXiB;AAY9B;;;;gCAEWO,I,EAAMC,O,EAASC,U,EAAYP,I,EAAMQ,M,EAAQ;AACnD,UAAIR,IAAI,KAAK,IAAb,EAAmB;AACjB,YAAI,CAACV,QAAQ,CAACU,IAAD,CAAb,EAAqB;AACnB,gBAAM,IAAIE,SAAJ,CAAc,8CAAuC,KAAKO,WAAL,CAAiBN,IAAjB,CAAsBC,OAAtB,CAA8B,OAA9B,EAAuC,EAAvC,CAAvC,WACA,sCADd,CAAN;AAED;AACF;;AAED,UAAI,KAAKM,aAAT,EAAwB;AACtB;AACD;;AAED,WAAKC,SAAL,CAAeN,IAAf,EAAqBC,OAArB,EAA8BC,UAA9B;AACA,WAAKP,IAAL,GAAYA,IAAZ;AACA,WAAKQ,MAAL,GAAcA,MAAd;AACD;;;;EA9BuBpB,S;;AAgC1BQ,WAAW,CAACgB,WAAZ,GAA0BzB,WAAW,CAAC0B,OAAZ,CAAoBZ,SAApB,CAA1B;AAEAa,MAAM,CAACC,OAAP,GAAiB;AACf1B,EAAAA,cAAc,EAAEO;AADD,CAAjB","sourcesContent":["\"use strict\";\n\nconst idlUtils = require(\"../generated/utils\");\nconst UIEventInit = require(\"../generated/UIEventInit\");\nconst EventImpl = require(\"./Event-impl\").implementation;\n\n// Until webidl2js gains support for checking for Window, this would have to do.\nfunction isWindow(val) {\n  if (typeof val !== \"object\") {\n    return false;\n  }\n  const wrapper = idlUtils.wrapperForImpl(val);\n  if (typeof wrapper === \"object\") {\n    return wrapper === wrapper._globalProxy;\n  }\n\n  // `val` may be either impl or wrapper currently, because webidl2js currently unwraps Window objects (and their global\n  // proxies) to their underlying EventTargetImpl during conversion, which is not what we want. But at the same time,\n  // some internal usage call this constructor with the actual global proxy.\n  return isWindow(idlUtils.implForWrapper(val));\n}\n\nclass UIEventImpl extends EventImpl {\n  constructor(args, privateData) {\n    const eventInitDict = args[1];\n\n    // undefined check included so that we can omit the property in internal usage.\n    if (eventInitDict && eventInitDict.view !== null && eventInitDict.view !== undefined) {\n      if (!isWindow(eventInitDict.view)) {\n        throw new TypeError(`Failed to construct '${new.target.name.replace(/Impl$/, \"\")}': member view is not of ` +\n                            \"type Window.\");\n      }\n    }\n\n    super(args, privateData);\n  }\n\n  initUIEvent(type, bubbles, cancelable, view, detail) {\n    if (view !== null) {\n      if (!isWindow(view)) {\n        throw new TypeError(`Failed to execute 'initUIEvent' on '${this.constructor.name.replace(/Impl$/, \"\")}': ` +\n                            \"parameter 4 is not of type 'Window'.\");\n      }\n    }\n\n    if (this._dispatchFlag) {\n      return;\n    }\n\n    this.initEvent(type, bubbles, cancelable);\n    this.view = view;\n    this.detail = detail;\n  }\n}\nUIEventImpl.defaultInit = UIEventInit.convert(undefined);\n\nmodule.exports = {\n  implementation: UIEventImpl\n};\n"]},"metadata":{},"sourceType":"script"}