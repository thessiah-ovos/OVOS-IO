{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _require = require(\"../../utils\"),\n    reflectURLAttribute = _require.reflectURLAttribute;\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar idlUtils = require(\"../generated/utils\");\n\nvar _require2 = require(\"../helpers/stylesheets\"),\n    fetchStylesheet = _require2.fetchStylesheet;\n\nvar _require3 = require(\"../helpers/document-base-url\"),\n    parseURLToResultingURLRecord = _require3.parseURLToResultingURLRecord;\n\nvar whatwgURL = require(\"whatwg-url\"); // Important reading: \"appropriate times to obtain the resource\" in\n// https://html.spec.whatwg.org/multipage/semantics.html#link-type-stylesheet\n\n\nvar HTMLLinkElementImpl = /*#__PURE__*/function (_HTMLElementImpl) {\n  _inherits(HTMLLinkElementImpl, _HTMLElementImpl);\n\n  var _super = _createSuper(HTMLLinkElementImpl);\n\n  function HTMLLinkElementImpl(args, privateData) {\n    var _this;\n\n    _classCallCheck(this, HTMLLinkElementImpl);\n\n    _this = _super.call(this, args, privateData);\n    _this.sheet = null;\n    return _this;\n  }\n\n  _createClass(HTMLLinkElementImpl, [{\n    key: \"_attach\",\n    value: function _attach() {\n      _get(_getPrototypeOf(HTMLLinkElementImpl.prototype), \"_attach\", this).call(this);\n\n      if (isExternalResourceLink(this)) {\n        obtainTheResource(this);\n      }\n    }\n  }, {\n    key: \"_attrModified\",\n    value: function _attrModified(name, value, oldValue) {\n      _get(_getPrototypeOf(HTMLLinkElementImpl.prototype), \"_attrModified\", this).call(this, name, value, oldValue);\n\n      if (name === \"href\" && this._attached && isExternalResourceLink(this)) {\n        obtainTheResource(this);\n      }\n    }\n  }, {\n    key: \"_accept\",\n    get: function get() {\n      return \"text/css,*/*;q=0.1\";\n    }\n  }, {\n    key: \"href\",\n    get: function get() {\n      return reflectURLAttribute(this, \"href\");\n    },\n    set: function set(value) {\n      this.setAttribute(\"href\", value);\n    }\n  }]);\n\n  return HTMLLinkElementImpl;\n}(HTMLElementImpl);\n\nmodule.exports = {\n  implementation: HTMLLinkElementImpl\n};\n\nfunction obtainTheResource(el) {\n  var href = el.getAttribute(\"href\");\n\n  if (href === null || href === \"\") {\n    return;\n  }\n\n  var url = parseURLToResultingURLRecord(href, el._ownerDocument);\n\n  if (url === null) {\n    return;\n  }\n\n  var serialized = whatwgURL.serializeURL(url);\n  fetchStylesheet(el, serialized);\n}\n\nfunction isExternalResourceLink(el) {\n  // for our purposes, only stylesheets can be external resource links\n  var wrapper = idlUtils.wrapperForImpl(el);\n\n  if (!/(?:[ \\t\\n\\r\\f]|^)stylesheet(?:[ \\t\\n\\r\\f]|$)/i.test(wrapper.rel)) {\n    // rel is a space-separated list of tokens, and the original rel types\n    // are case-insensitive.\n    return false;\n  }\n\n  return Boolean(el.href);\n}","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/nodes/HTMLLinkElement-impl.js"],"names":["require","reflectURLAttribute","HTMLElementImpl","implementation","idlUtils","fetchStylesheet","parseURLToResultingURLRecord","whatwgURL","HTMLLinkElementImpl","args","privateData","sheet","isExternalResourceLink","obtainTheResource","name","value","oldValue","_attached","setAttribute","module","exports","el","href","getAttribute","url","_ownerDocument","serialized","serializeURL","wrapper","wrapperForImpl","test","rel","Boolean"],"mappings":"AAAA;;;;;;;;;;;;;;eACgCA,OAAO,CAAC,aAAD,C;IAA/BC,mB,YAAAA,mB;;AACR,IAAMC,eAAe,GAAGF,OAAO,CAAC,oBAAD,CAAP,CAA8BG,cAAtD;;AACA,IAAMC,QAAQ,GAAGJ,OAAO,CAAC,oBAAD,CAAxB;;gBAC4BA,OAAO,CAAC,wBAAD,C;IAA3BK,e,aAAAA,e;;gBACiCL,OAAO,CAAC,8BAAD,C;IAAxCM,4B,aAAAA,4B;;AACR,IAAMC,SAAS,GAAGP,OAAO,CAAC,YAAD,CAAzB,C,CAEA;AACA;;;IAEMQ,mB;;;;;AACJ,+BAAYC,IAAZ,EAAkBC,WAAlB,EAA+B;AAAA;;AAAA;;AAC7B,8BAAMD,IAAN,EAAYC,WAAZ;AAEA,UAAKC,KAAL,GAAa,IAAb;AAH6B;AAI9B;;;;8BAES;AACR;;AAEA,UAAIC,sBAAsB,CAAC,IAAD,CAA1B,EAAkC;AAChCC,QAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD;AACF;;;kCAEaC,I,EAAMC,K,EAAOC,Q,EAAU;AACnC,6FAAoBF,IAApB,EAA0BC,KAA1B,EAAiCC,QAAjC;;AAEA,UAAIF,IAAI,KAAK,MAAT,IAAmB,KAAKG,SAAxB,IAAqCL,sBAAsB,CAAC,IAAD,CAA/D,EAAuE;AACrEC,QAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD;AACF;;;wBAEa;AACZ,aAAO,oBAAP;AACD;;;wBAEU;AACT,aAAOZ,mBAAmB,CAAC,IAAD,EAAO,MAAP,CAA1B;AACD,K;sBAEQc,K,EAAO;AACd,WAAKG,YAAL,CAAkB,MAAlB,EAA0BH,KAA1B;AACD;;;;EAjC+Bb,e;;AAoClCiB,MAAM,CAACC,OAAP,GAAiB;AACfjB,EAAAA,cAAc,EAAEK;AADD,CAAjB;;AAIA,SAASK,iBAAT,CAA2BQ,EAA3B,EAA+B;AAC7B,MAAMC,IAAI,GAAGD,EAAE,CAACE,YAAH,CAAgB,MAAhB,CAAb;;AAEA,MAAID,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,EAA9B,EAAkC;AAChC;AACD;;AAED,MAAME,GAAG,GAAGlB,4BAA4B,CAACgB,IAAD,EAAOD,EAAE,CAACI,cAAV,CAAxC;;AACA,MAAID,GAAG,KAAK,IAAZ,EAAkB;AAChB;AACD;;AAED,MAAME,UAAU,GAAGnB,SAAS,CAACoB,YAAV,CAAuBH,GAAvB,CAAnB;AAEAnB,EAAAA,eAAe,CAACgB,EAAD,EAAKK,UAAL,CAAf;AACD;;AAED,SAASd,sBAAT,CAAgCS,EAAhC,EAAoC;AAClC;AACA,MAAMO,OAAO,GAAGxB,QAAQ,CAACyB,cAAT,CAAwBR,EAAxB,CAAhB;;AACA,MAAI,CAAC,gDAAgDS,IAAhD,CAAqDF,OAAO,CAACG,GAA7D,CAAL,EAAwE;AACtE;AACA;AACA,WAAO,KAAP;AACD;;AAED,SAAOC,OAAO,CAACX,EAAE,CAACC,IAAJ,CAAd;AACD","sourcesContent":["\"use strict\";\nconst { reflectURLAttribute } = require(\"../../utils\");\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst idlUtils = require(\"../generated/utils\");\nconst { fetchStylesheet } = require(\"../helpers/stylesheets\");\nconst { parseURLToResultingURLRecord } = require(\"../helpers/document-base-url\");\nconst whatwgURL = require(\"whatwg-url\");\n\n// Important reading: \"appropriate times to obtain the resource\" in\n// https://html.spec.whatwg.org/multipage/semantics.html#link-type-stylesheet\n\nclass HTMLLinkElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n\n    this.sheet = null;\n  }\n\n  _attach() {\n    super._attach();\n\n    if (isExternalResourceLink(this)) {\n      obtainTheResource(this);\n    }\n  }\n\n  _attrModified(name, value, oldValue) {\n    super._attrModified(name, value, oldValue);\n\n    if (name === \"href\" && this._attached && isExternalResourceLink(this)) {\n      obtainTheResource(this);\n    }\n  }\n\n  get _accept() {\n    return \"text/css,*/*;q=0.1\";\n  }\n\n  get href() {\n    return reflectURLAttribute(this, \"href\");\n  }\n\n  set href(value) {\n    this.setAttribute(\"href\", value);\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLLinkElementImpl\n};\n\nfunction obtainTheResource(el) {\n  const href = el.getAttribute(\"href\");\n\n  if (href === null || href === \"\") {\n    return;\n  }\n\n  const url = parseURLToResultingURLRecord(href, el._ownerDocument);\n  if (url === null) {\n    return;\n  }\n\n  const serialized = whatwgURL.serializeURL(url);\n\n  fetchStylesheet(el, serialized);\n}\n\nfunction isExternalResourceLink(el) {\n  // for our purposes, only stylesheets can be external resource links\n  const wrapper = idlUtils.wrapperForImpl(el);\n  if (!/(?:[ \\t\\n\\r\\f]|^)stylesheet(?:[ \\t\\n\\r\\f]|$)/i.test(wrapper.rel)) {\n    // rel is a space-separated list of tokens, and the original rel types\n    // are case-insensitive.\n    return false;\n  }\n\n  return Boolean(el.href);\n}\n"]},"metadata":{},"sourceType":"script"}