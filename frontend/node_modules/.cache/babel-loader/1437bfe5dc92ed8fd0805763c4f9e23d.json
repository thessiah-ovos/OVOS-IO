{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar impl = utils.implSymbol;\n\nvar CharacterData = require(\"./CharacterData.js\");\n\nfunction Comment() {\n  if ((this instanceof Comment ? this.constructor : void 0) === undefined) {\n    throw new TypeError(\"Failed to construct 'Comment'. Please use the 'new' operator; this constructor \" + \"cannot be called as a function.\");\n  }\n\n  var args = [];\n  {\n    var curArg = arguments[0];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to construct 'Comment': parameter 1\"\n      });\n    } else {\n      curArg = \"\";\n    }\n\n    args.push(curArg);\n  }\n  iface.setup(this, args);\n}\n\nObject.setPrototypeOf(Comment.prototype, CharacterData.interface.prototype);\nObject.setPrototypeOf(Comment, CharacterData.interface);\nObject.defineProperty(Comment, \"prototype\", {\n  value: Comment.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\nObject.defineProperty(Comment.prototype, Symbol.toStringTag, {\n  value: \"Comment\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nvar iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is: function is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      var _iterator = _createForOfIteratorHelper(module.exports._mixedIntoPredicates),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var isMixedInto = _step.value;\n\n          if (isMixedInto(obj)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    return false;\n  },\n  isImpl: function isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      var wrapper = utils.wrapperForImpl(obj);\n\n      var _iterator2 = _createForOfIteratorHelper(module.exports._mixedIntoPredicates),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var isMixedInto = _step2.value;\n\n          if (isMixedInto(wrapper)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n\n    return false;\n  },\n  convert: function convert(obj) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$context = _ref.context,\n        context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'Comment'.\"));\n  },\n  create: function create(constructorArgs, privateData) {\n    var obj = Object.create(Comment.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl: function createImpl(constructorArgs, privateData) {\n    var obj = Object.create(Comment.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup: function _internalSetup(obj) {\n    CharacterData._internalSetup(obj);\n  },\n  setup: function setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n  interface: Comment,\n  expose: {\n    Window: {\n      Comment: Comment\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nvar Impl = require(\"../nodes/Comment-impl.js\");","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/generated/Comment.js"],"names":["conversions","require","utils","impl","implSymbol","CharacterData","Comment","undefined","TypeError","args","curArg","arguments","context","push","iface","setup","Object","setPrototypeOf","prototype","interface","defineProperty","value","writable","enumerable","configurable","Symbol","toStringTag","_mixedIntoPredicates","is","obj","hasOwn","Impl","implementation","module","exports","isMixedInto","isImpl","wrapper","wrapperForImpl","convert","implForWrapper","create","constructorArgs","privateData","createImpl","_internalSetup","wrapperSymbol","init","expose","Window"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst impl = utils.implSymbol;\nconst CharacterData = require(\"./CharacterData.js\");\n\nfunction Comment() {\n  if (new.target === undefined) {\n    throw new TypeError(\n      \"Failed to construct 'Comment'. Please use the 'new' operator; this constructor \" +\n        \"cannot be called as a function.\"\n    );\n  }\n  const args = [];\n  {\n    let curArg = arguments[0];\n    if (curArg !== undefined) {\n      curArg = conversions[\"DOMString\"](curArg, { context: \"Failed to construct 'Comment': parameter 1\" });\n    } else {\n      curArg = \"\";\n    }\n    args.push(curArg);\n  }\n\n  iface.setup(this, args);\n}\n\nObject.setPrototypeOf(Comment.prototype, CharacterData.interface.prototype);\nObject.setPrototypeOf(Comment, CharacterData.interface);\n\nObject.defineProperty(Comment, \"prototype\", {\n  value: Comment.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nObject.defineProperty(Comment.prototype, Symbol.toStringTag, {\n  value: \"Comment\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\n\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  convert(obj, { context = \"The provided value\" } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n    throw new TypeError(`${context} is not of type 'Comment'.`);\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(Comment.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(Comment.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup(obj) {\n    CharacterData._internalSetup(obj);\n  },\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n\n    obj[impl][utils.wrapperSymbol] = obj;\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n    return obj;\n  },\n  interface: Comment,\n  expose: {\n    Window: { Comment }\n  }\n}; // iface\nmodule.exports = iface;\n\nconst Impl = require(\"../nodes/Comment-impl.js\");\n"]},"metadata":{},"sourceType":"script"}