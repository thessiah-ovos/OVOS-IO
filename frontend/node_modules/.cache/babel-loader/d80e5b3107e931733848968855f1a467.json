{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar vm = require(\"vm\");\n\nvar whatwgEncoding = require(\"whatwg-encoding\");\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar _require = require(\"../../utils\"),\n    reflectURLAttribute = _require.reflectURLAttribute;\n\nvar resourceLoader = require(\"../../browser/resource-loader\");\n\nvar reportException = require(\"../helpers/runtime-script-errors\");\n\nvar _require2 = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require2.domSymbolTree;\n\nvar _require3 = require(\"../helpers/strings\"),\n    asciiLowercase = _require3.asciiLowercase;\n\nvar _require4 = require(\"../helpers/text\"),\n    childTextContent = _require4.childTextContent;\n\nvar nodeTypes = require(\"../node-type\");\n\nvar jsMIMETypes = new Set([\"application/ecmascript\", \"application/javascript\", \"application/x-ecmascript\", \"application/x-javascript\", \"text/ecmascript\", \"text/javascript\", \"text/javascript1.0\", \"text/javascript1.1\", \"text/javascript1.2\", \"text/javascript1.3\", \"text/javascript1.4\", \"text/javascript1.5\", \"text/jscript\", \"text/livescript\", \"text/x-ecmascript\", \"text/x-javascript\"]);\n\nvar HTMLScriptElementImpl = /*#__PURE__*/function (_HTMLElementImpl) {\n  _inherits(HTMLScriptElementImpl, _HTMLElementImpl);\n\n  var _super = _createSuper(HTMLScriptElementImpl);\n\n  function HTMLScriptElementImpl(args, privateData) {\n    var _this;\n\n    _classCallCheck(this, HTMLScriptElementImpl);\n\n    _this = _super.call(this, args, privateData);\n    _this._alreadyStarted = false;\n    _this._parserInserted = false; // set by the parser\n\n    return _this;\n  }\n\n  _createClass(HTMLScriptElementImpl, [{\n    key: \"_attach\",\n    value: function _attach() {\n      _get(_getPrototypeOf(HTMLScriptElementImpl.prototype), \"_attach\", this).call(this); // In our current terribly-hacky document.write() implementation, we parse in a div them move elements into the main\n      // document. Thus _eval() will bail early when it gets in _poppedOffStackOfOpenElements(), since we're not attached\n      // then. Instead, we'll let it eval here.\n\n\n      if (!this._parserInserted || this._isMovingDueToDocumentWrite) {\n        this._eval();\n      }\n    }\n  }, {\n    key: \"_attrModified\",\n    value: function _attrModified(name, value, oldValue) {\n      _get(_getPrototypeOf(HTMLScriptElementImpl.prototype), \"_attrModified\", this).call(this, name, value, oldValue);\n\n      if (this._attached && !this._startedEval && name === \"src\" && oldValue === null && value !== null) {\n        resourceLoader.load(this, this.src, {\n          defaultEncoding: whatwgEncoding.labelToName(this.getAttribute(\"charset\")) || this._ownerDocument._encoding\n        }, this._innerEval);\n      }\n    }\n  }, {\n    key: \"_poppedOffStackOfOpenElements\",\n    value: function _poppedOffStackOfOpenElements() {\n      // This seems to roughly correspond to\n      // https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-incdata:prepare-a-script, although we certainly\n      // don't implement the full semantics.\n      this._eval();\n    } // Vaguely similar to https://html.spec.whatwg.org/multipage/scripting.html#prepare-a-script, but we have a long way\n    // to go before it's aligned.\n\n  }, {\n    key: \"_eval\",\n    value: function _eval() {\n      if (this._alreadyStarted) {\n        return;\n      } // TODO: this text check doesn't seem completely the same as the spec, which e.g. will try to execute scripts with\n      // child element nodes. Spec bug? https://github.com/whatwg/html/issues/3419\n\n\n      if (!this.hasAttribute(\"src\") && this.text.length === 0) {\n        return;\n      }\n\n      if (!this._attached) {\n        return;\n      }\n\n      var scriptBlocksTypeString = this._getTypeString();\n\n      var type = getType(scriptBlocksTypeString);\n\n      if (type !== \"classic\") {\n        // TODO: implement modules, and then change the check to `type === null`.\n        return;\n      }\n\n      this._alreadyStarted = true; // Equivalent to the spec's \"scripting is disabled\" check.\n\n      if (!this._ownerDocument._defaultView || this._ownerDocument._defaultView._runScripts !== \"dangerously\") {\n        return;\n      } // TODO: implement nomodule here, **but only after we support modules**.\n      // At this point we completely depart from the spec.\n\n\n      if (this.hasAttribute(\"src\")) {\n        resourceLoader.load(this, this.src, {\n          defaultEncoding: whatwgEncoding.labelToName(this.getAttribute(\"charset\")) || this._ownerDocument._encoding\n        }, this._innerEval);\n      } else {\n        resourceLoader.enqueue(this, this._ownerDocument.URL, this._innerEval)(null, this.text);\n      }\n    }\n  }, {\n    key: \"_innerEval\",\n    value: function _innerEval(text, filename) {\n      this._ownerDocument._writeAfterElement = this;\n      processJavaScript(this, text, filename);\n      delete this._ownerDocument._writeAfterElement;\n    }\n  }, {\n    key: \"_getTypeString\",\n    value: function _getTypeString() {\n      var typeAttr = this.getAttribute(\"type\");\n      var langAttr = this.getAttribute(\"language\");\n\n      if (typeAttr === \"\") {\n        return \"text/javascript\";\n      }\n\n      if (typeAttr === null && langAttr === \"\") {\n        return \"text/javascript\";\n      }\n\n      if (typeAttr === null && langAttr === null) {\n        return \"text/javascript\";\n      }\n\n      if (typeAttr !== null) {\n        return typeAttr.trim();\n      }\n\n      if (langAttr !== null) {\n        return \"text/\" + langAttr;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"text\",\n    get: function get() {\n      return childTextContent(this);\n    },\n    set: function set(text) {\n      this.textContent = text;\n    }\n  }, {\n    key: \"src\",\n    get: function get() {\n      return reflectURLAttribute(this, \"src\");\n    },\n    set: function set(V) {\n      this.setAttribute(\"src\", V);\n    }\n  }]);\n\n  return HTMLScriptElementImpl;\n}(HTMLElementImpl);\n\nfunction processJavaScript(element, code, filename) {\n  var document = element.ownerDocument;\n  var window = document && document._global;\n\n  if (window) {\n    document._currentScript = element;\n    var lineOffset = 0;\n\n    if (!element.src) {\n      var _iterator = _createForOfIteratorHelper(domSymbolTree.childrenIterator(element)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var child = _step.value;\n\n          if (child.nodeType === nodeTypes.TEXT_NODE) {\n            if (child.__location) {\n              lineOffset = child.__location.line - 1;\n            }\n\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    try {\n      vm.runInContext(code, window, {\n        filename: filename,\n        lineOffset: lineOffset,\n        displayErrors: false\n      });\n    } catch (e) {\n      reportException(window, e, filename);\n    } finally {\n      document._currentScript = null;\n    }\n  }\n}\n\nfunction getType(typeString) {\n  var lowercased = asciiLowercase(typeString); // Cannot use whatwg-mimetype parsing because that strips whitespace. The spec demands a strict string comparison.\n  // That is, the type=\"\" attribute is not really related to MIME types at all.\n\n  if (jsMIMETypes.has(lowercased)) {\n    return \"classic\";\n  }\n\n  if (lowercased === \"module\") {\n    return \"module\";\n  }\n\n  return null;\n}\n\nmodule.exports = {\n  implementation: HTMLScriptElementImpl\n};","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/nodes/HTMLScriptElement-impl.js"],"names":["vm","require","whatwgEncoding","HTMLElementImpl","implementation","reflectURLAttribute","resourceLoader","reportException","domSymbolTree","asciiLowercase","childTextContent","nodeTypes","jsMIMETypes","Set","HTMLScriptElementImpl","args","privateData","_alreadyStarted","_parserInserted","_isMovingDueToDocumentWrite","_eval","name","value","oldValue","_attached","_startedEval","load","src","defaultEncoding","labelToName","getAttribute","_ownerDocument","_encoding","_innerEval","hasAttribute","text","length","scriptBlocksTypeString","_getTypeString","type","getType","_defaultView","_runScripts","enqueue","URL","filename","_writeAfterElement","processJavaScript","typeAttr","langAttr","trim","textContent","V","setAttribute","element","code","document","ownerDocument","window","_global","_currentScript","lineOffset","childrenIterator","child","nodeType","TEXT_NODE","__location","line","runInContext","displayErrors","e","typeString","lowercased","has","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nconst vm = require(\"vm\");\nconst whatwgEncoding = require(\"whatwg-encoding\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst { reflectURLAttribute } = require(\"../../utils\");\nconst resourceLoader = require(\"../../browser/resource-loader\");\nconst reportException = require(\"../helpers/runtime-script-errors\");\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst { asciiLowercase } = require(\"../helpers/strings\");\nconst { childTextContent } = require(\"../helpers/text\");\nconst nodeTypes = require(\"../node-type\");\n\nconst jsMIMETypes = new Set([\n  \"application/ecmascript\",\n  \"application/javascript\",\n  \"application/x-ecmascript\",\n  \"application/x-javascript\",\n  \"text/ecmascript\",\n  \"text/javascript\",\n  \"text/javascript1.0\",\n  \"text/javascript1.1\",\n  \"text/javascript1.2\",\n  \"text/javascript1.3\",\n  \"text/javascript1.4\",\n  \"text/javascript1.5\",\n  \"text/jscript\",\n  \"text/livescript\",\n  \"text/x-ecmascript\",\n  \"text/x-javascript\"\n]);\n\nclass HTMLScriptElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._alreadyStarted = false;\n    this._parserInserted = false; // set by the parser\n  }\n\n  _attach() {\n    super._attach();\n\n\n    // In our current terribly-hacky document.write() implementation, we parse in a div them move elements into the main\n    // document. Thus _eval() will bail early when it gets in _poppedOffStackOfOpenElements(), since we're not attached\n    // then. Instead, we'll let it eval here.\n    if (!this._parserInserted || this._isMovingDueToDocumentWrite) {\n      this._eval();\n    }\n  }\n\n  _attrModified(name, value, oldValue) {\n    super._attrModified(name, value, oldValue);\n\n    if (this._attached && !this._startedEval && name === \"src\" && oldValue === null && value !== null) {\n      resourceLoader.load(\n        this,\n        this.src,\n        { defaultEncoding: whatwgEncoding.labelToName(this.getAttribute(\"charset\")) || this._ownerDocument._encoding },\n        this._innerEval\n      );\n    }\n  }\n\n  _poppedOffStackOfOpenElements() {\n    // This seems to roughly correspond to\n    // https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-incdata:prepare-a-script, although we certainly\n    // don't implement the full semantics.\n    this._eval();\n  }\n\n  // Vaguely similar to https://html.spec.whatwg.org/multipage/scripting.html#prepare-a-script, but we have a long way\n  // to go before it's aligned.\n  _eval() {\n    if (this._alreadyStarted) {\n      return;\n    }\n\n    // TODO: this text check doesn't seem completely the same as the spec, which e.g. will try to execute scripts with\n    // child element nodes. Spec bug? https://github.com/whatwg/html/issues/3419\n    if (!this.hasAttribute(\"src\") && this.text.length === 0) {\n      return;\n    }\n\n    if (!this._attached) {\n      return;\n    }\n\n    const scriptBlocksTypeString = this._getTypeString();\n    const type = getType(scriptBlocksTypeString);\n\n    if (type !== \"classic\") {\n      // TODO: implement modules, and then change the check to `type === null`.\n      return;\n    }\n\n    this._alreadyStarted = true;\n\n    // Equivalent to the spec's \"scripting is disabled\" check.\n    if (!this._ownerDocument._defaultView || this._ownerDocument._defaultView._runScripts !== \"dangerously\") {\n      return;\n    }\n\n    // TODO: implement nomodule here, **but only after we support modules**.\n\n    // At this point we completely depart from the spec.\n\n    if (this.hasAttribute(\"src\")) {\n      resourceLoader.load(\n        this,\n        this.src,\n        { defaultEncoding: whatwgEncoding.labelToName(this.getAttribute(\"charset\")) || this._ownerDocument._encoding },\n        this._innerEval\n      );\n    } else {\n      resourceLoader.enqueue(this, this._ownerDocument.URL, this._innerEval)(null, this.text);\n    }\n  }\n\n  _innerEval(text, filename) {\n    this._ownerDocument._writeAfterElement = this;\n    processJavaScript(this, text, filename);\n    delete this._ownerDocument._writeAfterElement;\n  }\n\n  _getTypeString() {\n    const typeAttr = this.getAttribute(\"type\");\n    const langAttr = this.getAttribute(\"language\");\n\n    if (typeAttr === \"\") {\n      return \"text/javascript\";\n    }\n\n    if (typeAttr === null && langAttr === \"\") {\n      return \"text/javascript\";\n    }\n\n    if (typeAttr === null && langAttr === null) {\n      return \"text/javascript\";\n    }\n\n    if (typeAttr !== null) {\n      return typeAttr.trim();\n    }\n\n    if (langAttr !== null) {\n      return \"text/\" + langAttr;\n    }\n\n    return null;\n  }\n\n  get text() {\n    return childTextContent(this);\n  }\n\n  set text(text) {\n    this.textContent = text;\n  }\n\n  get src() {\n    return reflectURLAttribute(this, \"src\");\n  }\n\n  set src(V) {\n    this.setAttribute(\"src\", V);\n  }\n}\n\nfunction processJavaScript(element, code, filename) {\n  const document = element.ownerDocument;\n  const window = document && document._global;\n\n  if (window) {\n    document._currentScript = element;\n\n    let lineOffset = 0;\n    if (!element.src) {\n      for (const child of domSymbolTree.childrenIterator(element)) {\n        if (child.nodeType === nodeTypes.TEXT_NODE) {\n          if (child.__location) {\n            lineOffset = child.__location.line - 1;\n          }\n          break;\n        }\n      }\n    }\n\n    try {\n      vm.runInContext(code, window, { filename, lineOffset, displayErrors: false });\n    } catch (e) {\n      reportException(window, e, filename);\n    } finally {\n      document._currentScript = null;\n    }\n  }\n}\n\nfunction getType(typeString) {\n  const lowercased = asciiLowercase(typeString);\n  // Cannot use whatwg-mimetype parsing because that strips whitespace. The spec demands a strict string comparison.\n  // That is, the type=\"\" attribute is not really related to MIME types at all.\n  if (jsMIMETypes.has(lowercased)) {\n    return \"classic\";\n  }\n  if (lowercased === \"module\") {\n    return \"module\";\n  }\n  return null;\n}\n\nmodule.exports = {\n  implementation: HTMLScriptElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}