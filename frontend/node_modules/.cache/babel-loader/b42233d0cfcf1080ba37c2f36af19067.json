{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar vm = require(\"vm\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar idlUtils = require(\"../generated/utils\");\n\nvar ErrorEvent = require(\"../generated/ErrorEvent\");\n\nvar reportException = require(\"./runtime-script-errors\");\n\nexports.appendHandler = function appendHandler(el, eventName) {\n  el.addEventListener(eventName, function (event) {\n    // https://html.spec.whatwg.org/#the-event-handler-processing-algorithm\n    event = idlUtils.implForWrapper(event);\n    var callback = el[\"on\" + eventName];\n\n    if (callback === null) {\n      return;\n    }\n\n    var specialError = ErrorEvent.isImpl(event) && event.type === \"error\" && event.currentTarget.constructor.name === \"Window\";\n    var returnValue = null;\n    var thisValue = idlUtils.tryWrapperForImpl(event.currentTarget); // https://heycam.github.io/webidl/#es-invoking-callback-functions\n\n    if (typeof callback === \"function\") {\n      if (specialError) {\n        returnValue = callback.call(thisValue, event.message, event.filename, event.lineno, event.colno, event.error);\n      } else {\n        var eventWrapper = idlUtils.wrapperForImpl(event);\n        returnValue = callback.call(thisValue, eventWrapper);\n      }\n    }\n\n    if (event.type === \"beforeunload\") {\n      // TODO: we don't implement BeforeUnloadEvent so we can't brand-check here\n      // Perform conversion which in the spec is done by the event handler return type being DOMString?\n      returnValue = returnValue === undefined || returnValue === null ? null : conversions.DOMString(returnValue);\n\n      if (returnValue !== null) {\n        event._canceledFlag = true;\n\n        if (event.returnValue === \"\") {\n          event.returnValue = returnValue;\n        }\n      }\n    } else if (specialError) {\n      if (returnValue === true) {\n        event._canceledFlag = true;\n      }\n    } else if (returnValue === false) {\n      event._canceledFlag = true;\n    }\n  });\n}; // \"Simple\" in this case means \"no content attributes involved\"\n\n\nexports.setupForSimpleEventAccessors = function (prototype, events) {\n  prototype._getEventHandlerFor = function (event) {\n    return this._eventHandlers ? this._eventHandlers[event] : undefined;\n  };\n\n  prototype._setEventHandlerFor = function (event, handler) {\n    if (!this._registeredHandlers) {\n      this._registeredHandlers = new Set();\n      this._eventHandlers = Object.create(null);\n    }\n\n    if (!this._registeredHandlers.has(event) && handler !== null) {\n      this._registeredHandlers.add(event);\n\n      exports.appendHandler(this, event);\n    }\n\n    this._eventHandlers[event] = handler;\n  };\n\n  var _iterator = _createForOfIteratorHelper(events),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var event = _step.value;\n      exports.createEventAccessor(prototype, event);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}; // https://html.spec.whatwg.org/#event-handler-idl-attributes\n\n\nexports.createEventAccessor = function createEventAccessor(obj, event) {\n  Object.defineProperty(obj, \"on\" + event, {\n    configurable: true,\n    enumerable: true,\n    get: function get() {\n      // https://html.spec.whatwg.org/#getting-the-current-value-of-the-event-handler\n      var value = this._getEventHandlerFor(event);\n\n      if (!value) {\n        return null;\n      }\n\n      if (value.body !== undefined) {\n        var element;\n        var document;\n\n        if (this.constructor.name === \"Window\") {\n          element = null;\n          document = idlUtils.implForWrapper(this.document);\n        } else {\n          element = this;\n          document = element.ownerDocument;\n        }\n\n        var body = value.body;\n        var formOwner = element !== null && element.form ? element.form : null;\n        var window = this.constructor.name === \"Window\" && this._document ? this : document.defaultView;\n\n        try {\n          // eslint-disable-next-line no-new-func\n          Function(body); // properly error out on syntax errors\n          // Note: this won't execute body; that would require `Function(body)()`.\n        } catch (e) {\n          if (window) {\n            reportException(window, e);\n          }\n\n          this._setEventHandlerFor(event, null);\n\n          return null;\n        } // Note: the with (window) { } is not necessary in Node, but is necessary in a browserified environment.\n\n\n        var fn;\n        var createFunction = vm.isContext(document._global) ? document.defaultView._globalProxy.Function : Function;\n\n        if (event === \"error\" && element === null) {\n          var wrapperBody = document ? body + \"\\n//# sourceURL=\".concat(document.URL) : body; // eslint-disable-next-line no-new-func\n\n          fn = createFunction(\"window\", \"with (window) { return function onerror(event, source, lineno, colno, error) {\\n  \".concat(wrapperBody, \"\\n}; }\"))(window);\n        } else {\n          var argNames = [];\n          var args = [];\n          argNames.push(\"window\");\n          args.push(window);\n\n          if (element !== null) {\n            argNames.push(\"document\");\n            args.push(idlUtils.wrapperForImpl(document));\n          }\n\n          if (formOwner !== null) {\n            argNames.push(\"formOwner\");\n            args.push(idlUtils.wrapperForImpl(formOwner));\n          }\n\n          if (element !== null) {\n            argNames.push(\"element\");\n            args.push(idlUtils.wrapperForImpl(element));\n          }\n\n          var _wrapperBody = \"\\nreturn function on\".concat(event, \"(event) {\\n  \").concat(body, \"\\n};\");\n\n          for (var i = argNames.length - 1; i >= 0; --i) {\n            _wrapperBody = \"with (\".concat(argNames[i], \") { \").concat(_wrapperBody, \" }\");\n          }\n\n          if (document) {\n            _wrapperBody += \"\\n//# sourceURL=\".concat(document.URL);\n          }\n\n          argNames.push(_wrapperBody);\n          fn = createFunction.apply(void 0, argNames).apply(void 0, args);\n        }\n\n        this._setEventHandlerFor(event, fn);\n      }\n\n      return this._getEventHandlerFor(event);\n    },\n    set: function set(val) {\n      val = eventHandlerArgCoercion(val);\n\n      this._setEventHandlerFor(event, val);\n    }\n  });\n};\n\nfunction typeIsObject(v) {\n  return typeof v === \"object\" && v !== null || typeof v === \"function\";\n} // Implements:\n//     [TreatNonObjectAsNull]\n//     callback EventHandlerNonNull = any (Event event);\n//     typedef EventHandlerNonNull? EventHandler;\n// Also implements the part of https://heycam.github.io/webidl/#es-invoking-callback-functions which treats\n// non-callable callback functions as callback functions that return undefined.\n// TODO: replace with webidl2js typechecking when it has sufficient callback support\n\n\nfunction eventHandlerArgCoercion(val) {\n  if (!typeIsObject(val)) {\n    return null;\n  }\n\n  return val;\n}","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/helpers/create-event-accessor.js"],"names":["vm","require","conversions","idlUtils","ErrorEvent","reportException","exports","appendHandler","el","eventName","addEventListener","event","implForWrapper","callback","specialError","isImpl","type","currentTarget","constructor","name","returnValue","thisValue","tryWrapperForImpl","call","message","filename","lineno","colno","error","eventWrapper","wrapperForImpl","undefined","DOMString","_canceledFlag","setupForSimpleEventAccessors","prototype","events","_getEventHandlerFor","_eventHandlers","_setEventHandlerFor","handler","_registeredHandlers","Set","Object","create","has","add","createEventAccessor","obj","defineProperty","configurable","enumerable","get","value","body","element","document","ownerDocument","formOwner","form","window","_document","defaultView","Function","e","fn","createFunction","isContext","_global","_globalProxy","wrapperBody","URL","argNames","args","push","i","length","set","val","eventHandlerArgCoercion","typeIsObject","v"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst vm = require(\"vm\");\nconst conversions = require(\"webidl-conversions\");\nconst idlUtils = require(\"../generated/utils\");\nconst ErrorEvent = require(\"../generated/ErrorEvent\");\nconst reportException = require(\"./runtime-script-errors\");\n\nexports.appendHandler = function appendHandler(el, eventName) {\n  el.addEventListener(eventName, event => {\n    // https://html.spec.whatwg.org/#the-event-handler-processing-algorithm\n    event = idlUtils.implForWrapper(event);\n\n    const callback = el[\"on\" + eventName];\n    if (callback === null) {\n      return;\n    }\n\n    const specialError = ErrorEvent.isImpl(event) && event.type === \"error\" &&\n      event.currentTarget.constructor.name === \"Window\";\n\n    let returnValue = null;\n    const thisValue = idlUtils.tryWrapperForImpl(event.currentTarget);\n    // https://heycam.github.io/webidl/#es-invoking-callback-functions\n    if (typeof callback === \"function\") {\n      if (specialError) {\n        returnValue = callback.call(\n          thisValue, event.message,\n          event.filename, event.lineno, event.colno, event.error\n        );\n      } else {\n        const eventWrapper = idlUtils.wrapperForImpl(event);\n        returnValue = callback.call(thisValue, eventWrapper);\n      }\n    }\n\n    if (event.type === \"beforeunload\") { // TODO: we don't implement BeforeUnloadEvent so we can't brand-check here\n      // Perform conversion which in the spec is done by the event handler return type being DOMString?\n      returnValue = returnValue === undefined || returnValue === null ? null : conversions.DOMString(returnValue);\n\n      if (returnValue !== null) {\n        event._canceledFlag = true;\n        if (event.returnValue === \"\") {\n          event.returnValue = returnValue;\n        }\n      }\n    } else if (specialError) {\n      if (returnValue === true) {\n        event._canceledFlag = true;\n      }\n    } else if (returnValue === false) {\n      event._canceledFlag = true;\n    }\n  });\n};\n\n// \"Simple\" in this case means \"no content attributes involved\"\nexports.setupForSimpleEventAccessors = (prototype, events) => {\n  prototype._getEventHandlerFor = function (event) {\n    return this._eventHandlers ? this._eventHandlers[event] : undefined;\n  };\n\n  prototype._setEventHandlerFor = function (event, handler) {\n    if (!this._registeredHandlers) {\n      this._registeredHandlers = new Set();\n      this._eventHandlers = Object.create(null);\n    }\n\n    if (!this._registeredHandlers.has(event) && handler !== null) {\n      this._registeredHandlers.add(event);\n      exports.appendHandler(this, event);\n    }\n    this._eventHandlers[event] = handler;\n  };\n\n  for (const event of events) {\n    exports.createEventAccessor(prototype, event);\n  }\n};\n\n// https://html.spec.whatwg.org/#event-handler-idl-attributes\nexports.createEventAccessor = function createEventAccessor(obj, event) {\n  Object.defineProperty(obj, \"on\" + event, {\n    configurable: true,\n    enumerable: true,\n    get() { // https://html.spec.whatwg.org/#getting-the-current-value-of-the-event-handler\n      const value = this._getEventHandlerFor(event);\n      if (!value) {\n        return null;\n      }\n\n      if (value.body !== undefined) {\n        let element;\n        let document;\n        if (this.constructor.name === \"Window\") {\n          element = null;\n          document = idlUtils.implForWrapper(this.document);\n        } else {\n          element = this;\n          document = element.ownerDocument;\n        }\n        const { body } = value;\n\n        const formOwner = element !== null && element.form ? element.form : null;\n        const window = this.constructor.name === \"Window\" && this._document ? this : document.defaultView;\n\n        try {\n          // eslint-disable-next-line no-new-func\n          Function(body); // properly error out on syntax errors\n          // Note: this won't execute body; that would require `Function(body)()`.\n        } catch (e) {\n          if (window) {\n            reportException(window, e);\n          }\n          this._setEventHandlerFor(event, null);\n          return null;\n        }\n\n        // Note: the with (window) { } is not necessary in Node, but is necessary in a browserified environment.\n\n        let fn;\n        const createFunction = vm.isContext(document._global) ? document.defaultView._globalProxy.Function : Function;\n        if (event === \"error\" && element === null) {\n          const wrapperBody = document ? body + `\\n//# sourceURL=${document.URL}` : body;\n\n          // eslint-disable-next-line no-new-func\n          fn = createFunction(\"window\", `with (window) { return function onerror(event, source, lineno, colno, error) {\n  ${wrapperBody}\n}; }`)(window);\n        } else {\n          const argNames = [];\n          const args = [];\n\n          argNames.push(\"window\");\n          args.push(window);\n\n          if (element !== null) {\n            argNames.push(\"document\");\n            args.push(idlUtils.wrapperForImpl(document));\n          }\n          if (formOwner !== null) {\n            argNames.push(\"formOwner\");\n            args.push(idlUtils.wrapperForImpl(formOwner));\n          }\n          if (element !== null) {\n            argNames.push(\"element\");\n            args.push(idlUtils.wrapperForImpl(element));\n          }\n          let wrapperBody = `\nreturn function on${event}(event) {\n  ${body}\n};`;\n          for (let i = argNames.length - 1; i >= 0; --i) {\n            wrapperBody = `with (${argNames[i]}) { ${wrapperBody} }`;\n          }\n          if (document) {\n            wrapperBody += `\\n//# sourceURL=${document.URL}`;\n          }\n          argNames.push(wrapperBody);\n          fn = createFunction(...argNames)(...args);\n        }\n\n        this._setEventHandlerFor(event, fn);\n      }\n      return this._getEventHandlerFor(event);\n    },\n    set(val) {\n      val = eventHandlerArgCoercion(val);\n      this._setEventHandlerFor(event, val);\n    }\n  });\n};\n\nfunction typeIsObject(v) {\n  return (typeof v === \"object\" && v !== null) || typeof v === \"function\";\n}\n\n// Implements:\n//     [TreatNonObjectAsNull]\n//     callback EventHandlerNonNull = any (Event event);\n//     typedef EventHandlerNonNull? EventHandler;\n// Also implements the part of https://heycam.github.io/webidl/#es-invoking-callback-functions which treats\n// non-callable callback functions as callback functions that return undefined.\n// TODO: replace with webidl2js typechecking when it has sufficient callback support\nfunction eventHandlerArgCoercion(val) {\n  if (!typeIsObject(val)) {\n    return null;\n  }\n\n  return val;\n}\n"]},"metadata":{},"sourceType":"script"}