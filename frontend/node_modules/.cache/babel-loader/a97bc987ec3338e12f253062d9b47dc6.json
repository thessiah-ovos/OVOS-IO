{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _require = require(\"events\"),\n    EventEmitter = _require.EventEmitter;\n\nmodule.exports = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(VirtualConsole, _EventEmitter);\n\n  var _super = _createSuper(VirtualConsole);\n\n  function VirtualConsole() {\n    var _this;\n\n    _classCallCheck(this, VirtualConsole);\n\n    _this = _super.call(this);\n\n    _this.on(\"error\", function () {// If \"error\" event has no listeners,\n      // EventEmitter throws an exception\n    });\n\n    return _this;\n  }\n\n  _createClass(VirtualConsole, [{\n    key: \"sendTo\",\n    value: function sendTo(anyConsole, options) {\n      var _this2 = this;\n\n      if (options === undefined) {\n        options = {};\n      }\n\n      var _loop = function _loop() {\n        var method = _Object$keys[_i];\n\n        if (typeof anyConsole[method] === \"function\") {\n          var onMethodCall = function onMethodCall() {\n            anyConsole[method].apply(anyConsole, arguments);\n          };\n\n          _this2.on(method, onMethodCall);\n        }\n      };\n\n      for (var _i = 0, _Object$keys = Object.keys(anyConsole); _i < _Object$keys.length; _i++) {\n        _loop();\n      }\n\n      if (!options.omitJSDOMErrors) {\n        this.on(\"jsdomError\", function (e) {\n          return anyConsole.error(e.stack, e.detail);\n        });\n      }\n\n      return this;\n    }\n  }]);\n\n  return VirtualConsole;\n}(EventEmitter);","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/virtual-console.js"],"names":["require","EventEmitter","module","exports","on","anyConsole","options","undefined","method","onMethodCall","arguments","Object","keys","omitJSDOMErrors","e","error","stack","detail"],"mappings":"AAAA;;;;;;;;;;eACyBA,OAAO,CAAC,QAAD,C;IAAxBC,Y,YAAAA,Y;;AAERC,MAAM,CAACC,OAAP;AAAA;;AAAA;;AACE,4BAAc;AAAA;;AAAA;;AACZ;;AAEA,UAAKC,EAAL,CAAQ,OAAR,EAAiB,YAAM,CACrB;AACA;AACD,KAHD;;AAHY;AAOb;;AARH;AAAA;AAAA,2BAUSC,UAVT,EAUqBC,OAVrB,EAU8B;AAAA;;AAC1B,UAAIA,OAAO,KAAKC,SAAhB,EAA2B;AACzBD,QAAAA,OAAO,GAAG,EAAV;AACD;;AAHyB;AAKrB,YAAME,MAAM,mBAAZ;;AACH,YAAI,OAAOH,UAAU,CAACG,MAAD,CAAjB,KAA8B,UAAlC,EAA8C;AAAA,cACnCC,YADmC,GAC5C,SAASA,YAAT,GAAwB;AACtBJ,YAAAA,UAAU,CAACG,MAAD,CAAV,OAAAH,UAAU,EAAYK,SAAZ,CAAV;AACD,WAH2C;;AAI5C,UAAA,MAAI,CAACN,EAAL,CAAQI,MAAR,EAAgBC,YAAhB;AACD;AAXuB;;AAK1B,sCAAqBE,MAAM,CAACC,IAAP,CAAYP,UAAZ,CAArB,kCAA8C;AAAA;AAO7C;;AAED,UAAI,CAACC,OAAO,CAACO,eAAb,EAA8B;AAC5B,aAAKT,EAAL,CAAQ,YAAR,EAAsB,UAAAU,CAAC;AAAA,iBAAIT,UAAU,CAACU,KAAX,CAAiBD,CAAC,CAACE,KAAnB,EAA0BF,CAAC,CAACG,MAA5B,CAAJ;AAAA,SAAvB;AACD;;AAED,aAAO,IAAP;AACD;AA7BH;;AAAA;AAAA,EAA8ChB,YAA9C","sourcesContent":["\"use strict\";\nconst { EventEmitter } = require(\"events\");\n\nmodule.exports = class VirtualConsole extends EventEmitter {\n  constructor() {\n    super();\n\n    this.on(\"error\", () => {\n      // If \"error\" event has no listeners,\n      // EventEmitter throws an exception\n    });\n  }\n\n  sendTo(anyConsole, options) {\n    if (options === undefined) {\n      options = {};\n    }\n\n    for (const method of Object.keys(anyConsole)) {\n      if (typeof anyConsole[method] === \"function\") {\n        function onMethodCall() {\n          anyConsole[method](...arguments);\n        }\n        this.on(method, onMethodCall);\n      }\n    }\n\n    if (!options.omitJSDOMErrors) {\n      this.on(\"jsdomError\", e => anyConsole.error(e.stack, e.detail));\n    }\n\n    return this;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}