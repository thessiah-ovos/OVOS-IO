{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar focusing = require(\"../helpers/focusing\");\n\nvar DOMStringMap = require(\"../generated/DOMStringMap\");\n\nvar HTMLAndSVGElementSharedImpl = /*#__PURE__*/function () {\n  function HTMLAndSVGElementSharedImpl() {\n    _classCallCheck(this, HTMLAndSVGElementSharedImpl);\n  }\n\n  _createClass(HTMLAndSVGElementSharedImpl, [{\n    key: \"_initHTMLAndSVGElement\",\n    value: function _initHTMLAndSVGElement() {\n      this._tabIndex = 0;\n      this._dataset = DOMStringMap.createImpl([], {\n        element: this\n      });\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      if (!focusing.isFocusableAreaElement(this)) {\n        return;\n      }\n\n      var previous = this._ownerDocument._lastFocusedElement;\n      focusing.fireFocusEventWithTargetAdjustment(\"blur\", previous, this);\n      this._ownerDocument._lastFocusedElement = this;\n      focusing.fireFocusEventWithTargetAdjustment(\"focus\", this, previous);\n\n      if (this._ownerDocument._defaultView._frameElement) {\n        this._ownerDocument._defaultView._frameElement.focus();\n      }\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      if (this._ownerDocument._lastFocusedElement !== this || !focusing.isFocusableAreaElement(this)) {\n        return;\n      }\n\n      focusing.fireFocusEventWithTargetAdjustment(\"blur\", this, this._ownerDocument);\n      this._ownerDocument._lastFocusedElement = null;\n      focusing.fireFocusEventWithTargetAdjustment(\"focus\", this._ownerDocument, this);\n    }\n  }, {\n    key: \"dataset\",\n    get: function get() {\n      return this._dataset;\n    } // TODO this should be [Reflect]able if we added default value support to webidl2js's [Reflect]\n\n  }, {\n    key: \"tabIndex\",\n    get: function get() {\n      if (!this.hasAttribute(\"tabindex\")) {\n        return focusing.isFocusableAreaElement(this) ? 0 : -1;\n      }\n\n      return conversions.long(this.getAttribute(\"tabindex\"));\n    },\n    set: function set(value) {\n      this.setAttribute(\"tabindex\", String(value));\n    }\n  }]);\n\n  return HTMLAndSVGElementSharedImpl;\n}();\n\nexports.implementation = HTMLAndSVGElementSharedImpl;","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/nodes/HTMLAndSVGElementShared-impl.js"],"names":["conversions","require","focusing","DOMStringMap","HTMLAndSVGElementSharedImpl","_tabIndex","_dataset","createImpl","element","isFocusableAreaElement","previous","_ownerDocument","_lastFocusedElement","fireFocusEventWithTargetAdjustment","_defaultView","_frameElement","focus","hasAttribute","long","getAttribute","value","setAttribute","String","exports","implementation"],"mappings":"AAAA;;;;;;AAEA,IAAMA,WAAW,GAAGC,OAAO,CAAC,oBAAD,CAA3B;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,qBAAD,CAAxB;;AACA,IAAME,YAAY,GAAGF,OAAO,CAAC,2BAAD,CAA5B;;IAEMG,2B;;;;;;;6CACqB;AACvB,WAAKC,SAAL,GAAiB,CAAjB;AACA,WAAKC,QAAL,GAAgBH,YAAY,CAACI,UAAb,CAAwB,EAAxB,EAA4B;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAA5B,CAAhB;AACD;;;4BAkBO;AACN,UAAI,CAACN,QAAQ,CAACO,sBAAT,CAAgC,IAAhC,CAAL,EAA4C;AAC1C;AACD;;AAED,UAAMC,QAAQ,GAAG,KAAKC,cAAL,CAAoBC,mBAArC;AAEAV,MAAAA,QAAQ,CAACW,kCAAT,CAA4C,MAA5C,EAAoDH,QAApD,EAA8D,IAA9D;AACA,WAAKC,cAAL,CAAoBC,mBAApB,GAA0C,IAA1C;AACAV,MAAAA,QAAQ,CAACW,kCAAT,CAA4C,OAA5C,EAAqD,IAArD,EAA2DH,QAA3D;;AAEA,UAAI,KAAKC,cAAL,CAAoBG,YAApB,CAAiCC,aAArC,EAAoD;AAClD,aAAKJ,cAAL,CAAoBG,YAApB,CAAiCC,aAAjC,CAA+CC,KAA/C;AACD;AACF;;;2BAEM;AACL,UAAI,KAAKL,cAAL,CAAoBC,mBAApB,KAA4C,IAA5C,IAAoD,CAACV,QAAQ,CAACO,sBAAT,CAAgC,IAAhC,CAAzD,EAAgG;AAC9F;AACD;;AAEDP,MAAAA,QAAQ,CAACW,kCAAT,CAA4C,MAA5C,EAAoD,IAApD,EAA0D,KAAKF,cAA/D;AACA,WAAKA,cAAL,CAAoBC,mBAApB,GAA0C,IAA1C;AACAV,MAAAA,QAAQ,CAACW,kCAAT,CAA4C,OAA5C,EAAqD,KAAKF,cAA1D,EAA0E,IAA1E;AACD;;;wBAxCa;AACZ,aAAO,KAAKL,QAAZ;AACD,K,CAED;;;;wBACe;AACb,UAAI,CAAC,KAAKW,YAAL,CAAkB,UAAlB,CAAL,EAAoC;AAClC,eAAOf,QAAQ,CAACO,sBAAT,CAAgC,IAAhC,IAAwC,CAAxC,GAA4C,CAAC,CAApD;AACD;;AACD,aAAOT,WAAW,CAACkB,IAAZ,CAAiB,KAAKC,YAAL,CAAkB,UAAlB,CAAjB,CAAP;AACD,K;sBAEYC,K,EAAO;AAClB,WAAKC,YAAL,CAAkB,UAAlB,EAA8BC,MAAM,CAACF,KAAD,CAApC;AACD;;;;;;AA6BHG,OAAO,CAACC,cAAR,GAAyBpB,2BAAzB","sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst focusing = require(\"../helpers/focusing\");\nconst DOMStringMap = require(\"../generated/DOMStringMap\");\n\nclass HTMLAndSVGElementSharedImpl {\n  _initHTMLAndSVGElement() {\n    this._tabIndex = 0;\n    this._dataset = DOMStringMap.createImpl([], { element: this });\n  }\n\n  get dataset() {\n    return this._dataset;\n  }\n\n  // TODO this should be [Reflect]able if we added default value support to webidl2js's [Reflect]\n  get tabIndex() {\n    if (!this.hasAttribute(\"tabindex\")) {\n      return focusing.isFocusableAreaElement(this) ? 0 : -1;\n    }\n    return conversions.long(this.getAttribute(\"tabindex\"));\n  }\n\n  set tabIndex(value) {\n    this.setAttribute(\"tabindex\", String(value));\n  }\n\n  focus() {\n    if (!focusing.isFocusableAreaElement(this)) {\n      return;\n    }\n\n    const previous = this._ownerDocument._lastFocusedElement;\n\n    focusing.fireFocusEventWithTargetAdjustment(\"blur\", previous, this);\n    this._ownerDocument._lastFocusedElement = this;\n    focusing.fireFocusEventWithTargetAdjustment(\"focus\", this, previous);\n\n    if (this._ownerDocument._defaultView._frameElement) {\n      this._ownerDocument._defaultView._frameElement.focus();\n    }\n  }\n\n  blur() {\n    if (this._ownerDocument._lastFocusedElement !== this || !focusing.isFocusableAreaElement(this)) {\n      return;\n    }\n\n    focusing.fireFocusEventWithTargetAdjustment(\"blur\", this, this._ownerDocument);\n    this._ownerDocument._lastFocusedElement = null;\n    focusing.fireFocusEventWithTargetAdjustment(\"focus\", this._ownerDocument, this);\n  }\n}\n\nexports.implementation = HTMLAndSVGElementSharedImpl;\n"]},"metadata":{},"sourceType":"script"}