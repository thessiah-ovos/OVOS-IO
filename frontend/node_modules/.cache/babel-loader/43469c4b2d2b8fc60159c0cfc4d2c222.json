{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar path = require(\"path\");\n\nvar fs = require(\"pn/fs\");\n\nvar vm = require(\"vm\");\n\nvar toughCookie = require(\"tough-cookie\");\n\nvar request = require(\"request-promise-native\");\n\nvar sniffHTMLEncoding = require(\"html-encoding-sniffer\");\n\nvar whatwgURL = require(\"whatwg-url\");\n\nvar whatwgEncoding = require(\"whatwg-encoding\");\n\nvar _require = require(\"whatwg-url\"),\n    URL = _require.URL;\n\nvar MIMEType = require(\"whatwg-mimetype\");\n\nvar idlUtils = require(\"./jsdom/living/generated/utils.js\");\n\nvar VirtualConsole = require(\"./jsdom/virtual-console.js\");\n\nvar Window = require(\"./jsdom/browser/Window.js\");\n\nvar _require2 = require(\"./jsdom/browser/domtohtml.js\"),\n    domToHtml = _require2.domToHtml;\n\nvar _require3 = require(\"./jsdom/browser/documentfeatures.js\"),\n    applyDocumentFeatures = _require3.applyDocumentFeatures;\n\nvar _require4 = require(\"./jsdom/browser/resource-loader.js\"),\n    wrapCookieJarForRequest = _require4.wrapCookieJarForRequest;\n\nvar _require5 = require(\"../package.json\"),\n    packageVersion = _require5.version;\n\nvar DEFAULT_USER_AGENT = \"Mozilla/5.0 (\".concat(process.platform, \") AppleWebKit/537.36 (KHTML, like Gecko) \") + \"jsdom/\".concat(packageVersion); // This symbol allows us to smuggle a non-public option through to the JSDOM constructor, for use by JSDOM.fromURL.\n\nvar transportLayerEncodingLabelHiddenOption = Symbol(\"transportLayerEncodingLabel\");\n\nvar CookieJar = /*#__PURE__*/function (_toughCookie$CookieJa) {\n  _inherits(CookieJar, _toughCookie$CookieJa);\n\n  var _super = _createSuper(CookieJar);\n\n  function CookieJar(store, options) {\n    _classCallCheck(this, CookieJar);\n\n    // jsdom cookie jars must be loose by default\n    return _super.call(this, store, Object.assign({\n      looseMode: true\n    }, options));\n  }\n\n  return CookieJar;\n}(toughCookie.CookieJar);\n\nvar window = Symbol(\"window\");\nvar sharedFragmentDocument = null;\n\nvar JSDOM = /*#__PURE__*/function () {\n  function JSDOM(input) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, JSDOM);\n\n    var _normalizeHTML = normalizeHTML(input, options[transportLayerEncodingLabelHiddenOption]),\n        html = _normalizeHTML.html,\n        encoding = _normalizeHTML.encoding;\n\n    options = transformOptions(options, encoding);\n    this[window] = new Window(options.windowOptions); // TODO NEWAPI: the whole \"features\" infrastructure is horrible and should be re-built. When we switch to newapi\n    // wholesale, or perhaps before, we should re-do it. For now, just adapt the new, nice, public API into the old,\n    // ugly, internal API.\n\n    var features = {\n      FetchExternalResources: [],\n      SkipExternalResources: false\n    };\n\n    if (options.resources === \"usable\") {\n      features.FetchExternalResources = [\"link\", \"img\", \"frame\", \"iframe\"];\n\n      if (options.windowOptions.runScripts === \"dangerously\") {\n        features.FetchExternalResources.push(\"script\");\n      } // Note that \"img\" will be ignored by the code in HTMLImageElement-impl.js if canvas is not installed.\n      // TODO NEWAPI: clean that up and centralize the logic here.\n\n    }\n\n    var documentImpl = idlUtils.implForWrapper(this[window]._document);\n    applyDocumentFeatures(documentImpl, features);\n    options.beforeParse(this[window]._globalProxy); // TODO NEWAPI: this is still pretty hacky. It's also different than jsdom.jsdom. Does it work? Can it be better?\n\n    documentImpl._htmlToDom.appendToDocument(html, documentImpl);\n\n    documentImpl.close();\n  }\n\n  _createClass(JSDOM, [{\n    key: \"serialize\",\n    value: function serialize() {\n      return domToHtml([idlUtils.implForWrapper(this[window]._document)]);\n    }\n  }, {\n    key: \"nodeLocation\",\n    value: function nodeLocation(node) {\n      if (!idlUtils.implForWrapper(this[window]._document)._parseOptions.locationInfo) {\n        throw new Error(\"Location information was not saved for this jsdom. Use includeNodeLocations during creation.\");\n      }\n\n      return idlUtils.implForWrapper(node).__location;\n    }\n  }, {\n    key: \"runVMScript\",\n    value: function runVMScript(script) {\n      if (!vm.isContext(this[window])) {\n        throw new TypeError(\"This jsdom was not configured to allow script running. \" + \"Use the runScripts option during creation.\");\n      }\n\n      return script.runInContext(this[window]);\n    }\n  }, {\n    key: \"reconfigure\",\n    value: function reconfigure(settings) {\n      if (\"windowTop\" in settings) {\n        this[window]._top = settings.windowTop;\n      }\n\n      if (\"url\" in settings) {\n        var document = idlUtils.implForWrapper(this[window]._document);\n        var url = whatwgURL.parseURL(settings.url);\n\n        if (url === null) {\n          throw new TypeError(\"Could not parse \\\"\".concat(settings.url, \"\\\" as a URL\"));\n        }\n\n        document._URL = url;\n        document.origin = whatwgURL.serializeURLOrigin(document._URL);\n      }\n    }\n  }, {\n    key: \"window\",\n    get: function get() {\n      // It's important to grab the global proxy, instead of just the result of `new Window(...)`, since otherwise things\n      // like `window.eval` don't exist.\n      return this[window]._globalProxy;\n    }\n  }, {\n    key: \"virtualConsole\",\n    get: function get() {\n      return this[window]._virtualConsole;\n    }\n  }, {\n    key: \"cookieJar\",\n    get: function get() {\n      // TODO NEWAPI move _cookieJar to window probably\n      return idlUtils.implForWrapper(this[window]._document)._cookieJar;\n    }\n  }], [{\n    key: \"fragment\",\n    value: function fragment(string) {\n      if (!sharedFragmentDocument) {\n        sharedFragmentDocument = new JSDOM().window.document;\n      }\n\n      var template = sharedFragmentDocument.createElement(\"template\");\n      template.innerHTML = string;\n      return template.content;\n    }\n  }, {\n    key: \"fromURL\",\n    value: function fromURL(url) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return Promise.resolve().then(function () {\n        var parsedURL = new URL(url);\n        url = parsedURL.href;\n        options = normalizeFromURLOptions(options);\n        var requestOptions = {\n          resolveWithFullResponse: true,\n          encoding: null,\n          // i.e., give me the raw Buffer\n          gzip: true,\n          headers: {\n            \"User-Agent\": options.userAgent,\n            Referer: options.referrer,\n            Accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n            \"Accept-Language\": \"en\"\n          },\n          jar: wrapCookieJarForRequest(options.cookieJar)\n        };\n        return request(url, requestOptions).then(function (res) {\n          var transportLayerEncodingLabel;\n\n          if (\"content-type\" in res.headers) {\n            var mimeType = new MIMEType(res.headers[\"content-type\"]);\n            transportLayerEncodingLabel = mimeType.parameters.get(\"charset\");\n          }\n\n          options = Object.assign(options, _defineProperty({\n            url: res.request.href + parsedURL.hash,\n            contentType: res.headers[\"content-type\"],\n            referrer: res.request.getHeader(\"referer\")\n          }, transportLayerEncodingLabelHiddenOption, transportLayerEncodingLabel));\n          return new JSDOM(res.body, options);\n        });\n      });\n    }\n  }, {\n    key: \"fromFile\",\n    value: function fromFile(filename) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return Promise.resolve().then(function () {\n        options = normalizeFromFileOptions(filename, options);\n        return fs.readFile(filename).then(function (buffer) {\n          return new JSDOM(buffer, options);\n        });\n      });\n    }\n  }]);\n\n  return JSDOM;\n}();\n\nfunction normalizeFromURLOptions(options) {\n  // Checks on options that are invalid for `fromURL`\n  if (options.url !== undefined) {\n    throw new TypeError(\"Cannot supply a url option when using fromURL\");\n  }\n\n  if (options.contentType !== undefined) {\n    throw new TypeError(\"Cannot supply a contentType option when using fromURL\");\n  } // Normalization of options which must be done before the rest of the fromURL code can use them, because they are\n  // given to request()\n\n\n  var normalized = Object.assign({}, options);\n\n  if (options.userAgent === undefined) {\n    normalized.userAgent = DEFAULT_USER_AGENT;\n  }\n\n  if (options.referrer !== undefined) {\n    normalized.referrer = new URL(options.referrer).href;\n  }\n\n  if (options.cookieJar === undefined) {\n    normalized.cookieJar = new CookieJar();\n  }\n\n  return normalized; // All other options don't need to be processed yet, and can be taken care of in the normal course of things when\n  // `fromURL` calls `new JSDOM(html, options)`.\n}\n\nfunction normalizeFromFileOptions(filename, options) {\n  var normalized = Object.assign({}, options);\n\n  if (normalized.contentType === undefined) {\n    var extname = path.extname(filename);\n\n    if (extname === \".xhtml\" || extname === \".xml\") {\n      normalized.contentType = \"application/xhtml+xml\";\n    }\n  }\n\n  if (normalized.url === undefined) {\n    normalized.url = new URL(\"file:\" + path.resolve(filename));\n  }\n\n  return normalized;\n}\n\nfunction transformOptions(options, encoding) {\n  var transformed = {\n    windowOptions: {\n      // Defaults\n      url: \"about:blank\",\n      referrer: \"\",\n      contentType: \"text/html\",\n      parsingMode: \"html\",\n      userAgent: DEFAULT_USER_AGENT,\n      parseOptions: {\n        locationInfo: false\n      },\n      runScripts: undefined,\n      encoding: encoding,\n      pretendToBeVisual: false,\n      storageQuota: 5000000,\n      // Defaults filled in later\n      virtualConsole: undefined,\n      cookieJar: undefined\n    },\n    // Defaults\n    resources: undefined,\n    beforeParse: function beforeParse() {}\n  };\n\n  if (options.contentType !== undefined) {\n    var mimeType = new MIMEType(options.contentType);\n\n    if (!mimeType.isHTML() && !mimeType.isXML()) {\n      throw new RangeError(\"The given content type of \\\"\".concat(options.contentType, \"\\\" was not a HTML or XML content type\"));\n    }\n\n    transformed.windowOptions.contentType = mimeType.essence;\n    transformed.windowOptions.parsingMode = mimeType.isHTML() ? \"html\" : \"xml\";\n  }\n\n  if (options.url !== undefined) {\n    transformed.windowOptions.url = new URL(options.url).href;\n  }\n\n  if (options.referrer !== undefined) {\n    transformed.windowOptions.referrer = new URL(options.referrer).href;\n  }\n\n  if (options.userAgent !== undefined) {\n    transformed.windowOptions.userAgent = String(options.userAgent);\n  }\n\n  if (options.includeNodeLocations) {\n    if (transformed.windowOptions.parsingMode === \"xml\") {\n      throw new TypeError(\"Cannot set includeNodeLocations to true with an XML content type\");\n    }\n\n    transformed.windowOptions.parseOptions = {\n      locationInfo: true\n    };\n  }\n\n  transformed.windowOptions.cookieJar = options.cookieJar === undefined ? new CookieJar() : options.cookieJar;\n  transformed.windowOptions.virtualConsole = options.virtualConsole === undefined ? new VirtualConsole().sendTo(console) : options.virtualConsole;\n\n  if (options.resources !== undefined) {\n    transformed.resources = String(options.resources);\n\n    if (transformed.resources !== \"usable\") {\n      throw new RangeError(\"resources must be undefined or \\\"usable\\\"\");\n    }\n  }\n\n  if (options.runScripts !== undefined) {\n    transformed.windowOptions.runScripts = String(options.runScripts);\n\n    if (transformed.windowOptions.runScripts !== \"dangerously\" && transformed.windowOptions.runScripts !== \"outside-only\") {\n      throw new RangeError(\"runScripts must be undefined, \\\"dangerously\\\", or \\\"outside-only\\\"\");\n    }\n  }\n\n  if (options.beforeParse !== undefined) {\n    transformed.beforeParse = options.beforeParse;\n  }\n\n  if (options.pretendToBeVisual !== undefined) {\n    transformed.windowOptions.pretendToBeVisual = Boolean(options.pretendToBeVisual);\n  }\n\n  if (options.storageQuota !== undefined) {\n    transformed.windowOptions.storageQuota = Number(options.storageQuota);\n  } // concurrentNodeIterators??\n\n\n  return transformed;\n}\n\nfunction normalizeHTML() {\n  var html = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var transportLayerEncodingLabel = arguments.length > 1 ? arguments[1] : undefined;\n  var encoding = \"UTF-8\";\n\n  if (ArrayBuffer.isView(html)) {\n    html = Buffer.from(html.buffer, html.byteOffset, html.byteLength);\n  } else if (html instanceof ArrayBuffer) {\n    html = Buffer.from(html);\n  }\n\n  if (Buffer.isBuffer(html)) {\n    encoding = sniffHTMLEncoding(html, {\n      defaultEncoding: \"windows-1252\",\n      transportLayerEncodingLabel: transportLayerEncodingLabel\n    });\n    html = whatwgEncoding.decode(html, encoding);\n  } else {\n    html = String(html);\n  }\n\n  return {\n    html: html,\n    encoding: encoding\n  };\n}\n\nexports.JSDOM = JSDOM;\nexports.VirtualConsole = VirtualConsole;\nexports.CookieJar = CookieJar;\nexports.toughCookie = toughCookie;","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/api.js"],"names":["path","require","fs","vm","toughCookie","request","sniffHTMLEncoding","whatwgURL","whatwgEncoding","URL","MIMEType","idlUtils","VirtualConsole","Window","domToHtml","applyDocumentFeatures","wrapCookieJarForRequest","packageVersion","version","DEFAULT_USER_AGENT","process","platform","transportLayerEncodingLabelHiddenOption","Symbol","CookieJar","store","options","Object","assign","looseMode","window","sharedFragmentDocument","JSDOM","input","normalizeHTML","html","encoding","transformOptions","windowOptions","features","FetchExternalResources","SkipExternalResources","resources","runScripts","push","documentImpl","implForWrapper","_document","beforeParse","_globalProxy","_htmlToDom","appendToDocument","close","node","_parseOptions","locationInfo","Error","__location","script","isContext","TypeError","runInContext","settings","_top","windowTop","document","url","parseURL","_URL","origin","serializeURLOrigin","_virtualConsole","_cookieJar","string","template","createElement","innerHTML","content","Promise","resolve","then","parsedURL","href","normalizeFromURLOptions","requestOptions","resolveWithFullResponse","gzip","headers","userAgent","Referer","referrer","Accept","jar","cookieJar","res","transportLayerEncodingLabel","mimeType","parameters","get","hash","contentType","getHeader","body","filename","normalizeFromFileOptions","readFile","buffer","undefined","normalized","extname","transformed","parsingMode","parseOptions","pretendToBeVisual","storageQuota","virtualConsole","isHTML","isXML","RangeError","essence","String","includeNodeLocations","sendTo","console","Boolean","Number","ArrayBuffer","isView","Buffer","from","byteOffset","byteLength","isBuffer","defaultEncoding","decode","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nconst path = require(\"path\");\nconst fs = require(\"pn/fs\");\nconst vm = require(\"vm\");\nconst toughCookie = require(\"tough-cookie\");\nconst request = require(\"request-promise-native\");\nconst sniffHTMLEncoding = require(\"html-encoding-sniffer\");\nconst whatwgURL = require(\"whatwg-url\");\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst { URL } = require(\"whatwg-url\");\nconst MIMEType = require(\"whatwg-mimetype\");\nconst idlUtils = require(\"./jsdom/living/generated/utils.js\");\nconst VirtualConsole = require(\"./jsdom/virtual-console.js\");\nconst Window = require(\"./jsdom/browser/Window.js\");\nconst { domToHtml } = require(\"./jsdom/browser/domtohtml.js\");\nconst { applyDocumentFeatures } = require(\"./jsdom/browser/documentfeatures.js\");\nconst { wrapCookieJarForRequest } = require(\"./jsdom/browser/resource-loader.js\");\nconst { version: packageVersion } = require(\"../package.json\");\n\nconst DEFAULT_USER_AGENT = `Mozilla/5.0 (${process.platform}) AppleWebKit/537.36 (KHTML, like Gecko) ` +\n                           `jsdom/${packageVersion}`;\n\n// This symbol allows us to smuggle a non-public option through to the JSDOM constructor, for use by JSDOM.fromURL.\nconst transportLayerEncodingLabelHiddenOption = Symbol(\"transportLayerEncodingLabel\");\n\nclass CookieJar extends toughCookie.CookieJar {\n  constructor(store, options) {\n    // jsdom cookie jars must be loose by default\n    super(store, Object.assign({ looseMode: true }, options));\n  }\n}\n\nconst window = Symbol(\"window\");\nlet sharedFragmentDocument = null;\n\nclass JSDOM {\n  constructor(input, options = {}) {\n    const { html, encoding } = normalizeHTML(input, options[transportLayerEncodingLabelHiddenOption]);\n    options = transformOptions(options, encoding);\n\n    this[window] = new Window(options.windowOptions);\n\n    // TODO NEWAPI: the whole \"features\" infrastructure is horrible and should be re-built. When we switch to newapi\n    // wholesale, or perhaps before, we should re-do it. For now, just adapt the new, nice, public API into the old,\n    // ugly, internal API.\n    const features = {\n      FetchExternalResources: [],\n      SkipExternalResources: false\n    };\n\n    if (options.resources === \"usable\") {\n      features.FetchExternalResources = [\"link\", \"img\", \"frame\", \"iframe\"];\n      if (options.windowOptions.runScripts === \"dangerously\") {\n        features.FetchExternalResources.push(\"script\");\n      }\n\n      // Note that \"img\" will be ignored by the code in HTMLImageElement-impl.js if canvas is not installed.\n      // TODO NEWAPI: clean that up and centralize the logic here.\n    }\n\n    const documentImpl = idlUtils.implForWrapper(this[window]._document);\n    applyDocumentFeatures(documentImpl, features);\n\n    options.beforeParse(this[window]._globalProxy);\n\n    // TODO NEWAPI: this is still pretty hacky. It's also different than jsdom.jsdom. Does it work? Can it be better?\n    documentImpl._htmlToDom.appendToDocument(html, documentImpl);\n    documentImpl.close();\n  }\n\n  get window() {\n    // It's important to grab the global proxy, instead of just the result of `new Window(...)`, since otherwise things\n    // like `window.eval` don't exist.\n    return this[window]._globalProxy;\n  }\n\n  get virtualConsole() {\n    return this[window]._virtualConsole;\n  }\n\n  get cookieJar() {\n    // TODO NEWAPI move _cookieJar to window probably\n    return idlUtils.implForWrapper(this[window]._document)._cookieJar;\n  }\n\n  serialize() {\n    return domToHtml([idlUtils.implForWrapper(this[window]._document)]);\n  }\n\n  nodeLocation(node) {\n    if (!idlUtils.implForWrapper(this[window]._document)._parseOptions.locationInfo) {\n      throw new Error(\"Location information was not saved for this jsdom. Use includeNodeLocations during creation.\");\n    }\n\n    return idlUtils.implForWrapper(node).__location;\n  }\n\n  runVMScript(script) {\n    if (!vm.isContext(this[window])) {\n      throw new TypeError(\"This jsdom was not configured to allow script running. \" +\n        \"Use the runScripts option during creation.\");\n    }\n\n    return script.runInContext(this[window]);\n  }\n\n  reconfigure(settings) {\n    if (\"windowTop\" in settings) {\n      this[window]._top = settings.windowTop;\n    }\n\n    if (\"url\" in settings) {\n      const document = idlUtils.implForWrapper(this[window]._document);\n\n      const url = whatwgURL.parseURL(settings.url);\n      if (url === null) {\n        throw new TypeError(`Could not parse \"${settings.url}\" as a URL`);\n      }\n\n      document._URL = url;\n      document.origin = whatwgURL.serializeURLOrigin(document._URL);\n    }\n  }\n\n  static fragment(string) {\n    if (!sharedFragmentDocument) {\n      sharedFragmentDocument = (new JSDOM()).window.document;\n    }\n\n    const template = sharedFragmentDocument.createElement(\"template\");\n    template.innerHTML = string;\n    return template.content;\n  }\n\n  static fromURL(url, options = {}) {\n    return Promise.resolve().then(() => {\n      const parsedURL = new URL(url);\n      url = parsedURL.href;\n      options = normalizeFromURLOptions(options);\n\n      const requestOptions = {\n        resolveWithFullResponse: true,\n        encoding: null, // i.e., give me the raw Buffer\n        gzip: true,\n        headers: {\n          \"User-Agent\": options.userAgent,\n          Referer: options.referrer,\n          Accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n          \"Accept-Language\": \"en\"\n        },\n        jar: wrapCookieJarForRequest(options.cookieJar)\n      };\n\n      return request(url, requestOptions).then(res => {\n        let transportLayerEncodingLabel;\n        if (\"content-type\" in res.headers) {\n          const mimeType = new MIMEType(res.headers[\"content-type\"]);\n          transportLayerEncodingLabel = mimeType.parameters.get(\"charset\");\n        }\n\n        options = Object.assign(options, {\n          url: res.request.href + parsedURL.hash,\n          contentType: res.headers[\"content-type\"],\n          referrer: res.request.getHeader(\"referer\"),\n          [transportLayerEncodingLabelHiddenOption]: transportLayerEncodingLabel\n        });\n\n        return new JSDOM(res.body, options);\n      });\n    });\n  }\n\n  static fromFile(filename, options = {}) {\n    return Promise.resolve().then(() => {\n      options = normalizeFromFileOptions(filename, options);\n\n      return fs.readFile(filename).then(buffer => {\n        return new JSDOM(buffer, options);\n      });\n    });\n  }\n}\n\nfunction normalizeFromURLOptions(options) {\n  // Checks on options that are invalid for `fromURL`\n  if (options.url !== undefined) {\n    throw new TypeError(\"Cannot supply a url option when using fromURL\");\n  }\n  if (options.contentType !== undefined) {\n    throw new TypeError(\"Cannot supply a contentType option when using fromURL\");\n  }\n\n  // Normalization of options which must be done before the rest of the fromURL code can use them, because they are\n  // given to request()\n  const normalized = Object.assign({}, options);\n  if (options.userAgent === undefined) {\n    normalized.userAgent = DEFAULT_USER_AGENT;\n  }\n\n  if (options.referrer !== undefined) {\n    normalized.referrer = (new URL(options.referrer)).href;\n  }\n\n  if (options.cookieJar === undefined) {\n    normalized.cookieJar = new CookieJar();\n  }\n\n  return normalized;\n\n  // All other options don't need to be processed yet, and can be taken care of in the normal course of things when\n  // `fromURL` calls `new JSDOM(html, options)`.\n}\n\nfunction normalizeFromFileOptions(filename, options) {\n  const normalized = Object.assign({}, options);\n\n  if (normalized.contentType === undefined) {\n    const extname = path.extname(filename);\n    if (extname === \".xhtml\" || extname === \".xml\") {\n      normalized.contentType = \"application/xhtml+xml\";\n    }\n  }\n\n  if (normalized.url === undefined) {\n    normalized.url = new URL(\"file:\" + path.resolve(filename));\n  }\n\n  return normalized;\n}\n\nfunction transformOptions(options, encoding) {\n  const transformed = {\n    windowOptions: {\n      // Defaults\n      url: \"about:blank\",\n      referrer: \"\",\n      contentType: \"text/html\",\n      parsingMode: \"html\",\n      userAgent: DEFAULT_USER_AGENT,\n      parseOptions: { locationInfo: false },\n      runScripts: undefined,\n      encoding,\n      pretendToBeVisual: false,\n      storageQuota: 5000000,\n\n      // Defaults filled in later\n      virtualConsole: undefined,\n      cookieJar: undefined\n    },\n\n    // Defaults\n    resources: undefined,\n    beforeParse() { }\n  };\n\n  if (options.contentType !== undefined) {\n    const mimeType = new MIMEType(options.contentType);\n\n    if (!mimeType.isHTML() && !mimeType.isXML()) {\n      throw new RangeError(`The given content type of \"${options.contentType}\" was not a HTML or XML content type`);\n    }\n\n    transformed.windowOptions.contentType = mimeType.essence;\n    transformed.windowOptions.parsingMode = mimeType.isHTML() ? \"html\" : \"xml\";\n  }\n\n  if (options.url !== undefined) {\n    transformed.windowOptions.url = (new URL(options.url)).href;\n  }\n\n  if (options.referrer !== undefined) {\n    transformed.windowOptions.referrer = (new URL(options.referrer)).href;\n  }\n\n  if (options.userAgent !== undefined) {\n    transformed.windowOptions.userAgent = String(options.userAgent);\n  }\n\n  if (options.includeNodeLocations) {\n    if (transformed.windowOptions.parsingMode === \"xml\") {\n      throw new TypeError(\"Cannot set includeNodeLocations to true with an XML content type\");\n    }\n\n    transformed.windowOptions.parseOptions = { locationInfo: true };\n  }\n\n  transformed.windowOptions.cookieJar = options.cookieJar === undefined ?\n                                       new CookieJar() :\n                                       options.cookieJar;\n\n  transformed.windowOptions.virtualConsole = options.virtualConsole === undefined ?\n                                            (new VirtualConsole()).sendTo(console) :\n                                            options.virtualConsole;\n\n  if (options.resources !== undefined) {\n    transformed.resources = String(options.resources);\n    if (transformed.resources !== \"usable\") {\n      throw new RangeError(`resources must be undefined or \"usable\"`);\n    }\n  }\n\n  if (options.runScripts !== undefined) {\n    transformed.windowOptions.runScripts = String(options.runScripts);\n    if (transformed.windowOptions.runScripts !== \"dangerously\" &&\n        transformed.windowOptions.runScripts !== \"outside-only\") {\n      throw new RangeError(`runScripts must be undefined, \"dangerously\", or \"outside-only\"`);\n    }\n  }\n\n  if (options.beforeParse !== undefined) {\n    transformed.beforeParse = options.beforeParse;\n  }\n\n  if (options.pretendToBeVisual !== undefined) {\n    transformed.windowOptions.pretendToBeVisual = Boolean(options.pretendToBeVisual);\n  }\n\n  if (options.storageQuota !== undefined) {\n    transformed.windowOptions.storageQuota = Number(options.storageQuota);\n  }\n\n  // concurrentNodeIterators??\n\n  return transformed;\n}\n\nfunction normalizeHTML(html = \"\", transportLayerEncodingLabel) {\n  let encoding = \"UTF-8\";\n\n  if (ArrayBuffer.isView(html)) {\n    html = Buffer.from(html.buffer, html.byteOffset, html.byteLength);\n  } else if (html instanceof ArrayBuffer) {\n    html = Buffer.from(html);\n  }\n\n  if (Buffer.isBuffer(html)) {\n    encoding = sniffHTMLEncoding(html, { defaultEncoding: \"windows-1252\", transportLayerEncodingLabel });\n    html = whatwgEncoding.decode(html, encoding);\n  } else {\n    html = String(html);\n  }\n\n  return { html, encoding };\n}\n\nexports.JSDOM = JSDOM;\n\nexports.VirtualConsole = VirtualConsole;\nexports.CookieJar = CookieJar;\n\nexports.toughCookie = toughCookie;\n"]},"metadata":{},"sourceType":"script"}