{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar whatwgURL = require(\"whatwg-url\");\n\nvar _require = require(\"../helpers/document-base-url\"),\n    parseURLToResultingURLRecord = _require.parseURLToResultingURLRecord;\n\nexports.implementation = /*#__PURE__*/function () {\n  function HTMLHyperlinkElementUtilsImpl() {\n    _classCallCheck(this, HTMLHyperlinkElementUtilsImpl);\n  }\n\n  _createClass(HTMLHyperlinkElementUtilsImpl, [{\n    key: \"_htmlHyperlinkElementUtilsSetup\",\n    value: function _htmlHyperlinkElementUtilsSetup() {\n      this.url = null;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.href;\n    }\n  }, {\n    key: \"href\",\n    get: function get() {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null) {\n        var href = this.getAttribute(\"href\");\n        return href === null ? \"\" : href;\n      }\n\n      return whatwgURL.serializeURL(url);\n    },\n    set: function set(v) {\n      this.setAttribute(\"href\", v);\n    }\n  }, {\n    key: \"origin\",\n    get: function get() {\n      reinitializeURL(this);\n\n      if (this.url === null) {\n        return \"\";\n      }\n\n      return whatwgURL.serializeURLOrigin(this.url);\n    }\n  }, {\n    key: \"protocol\",\n    get: function get() {\n      reinitializeURL(this);\n\n      if (this.url === null) {\n        return \":\";\n      }\n\n      return this.url.scheme + \":\";\n    },\n    set: function set(v) {\n      reinitializeURL(this);\n\n      if (this.url === null) {\n        return;\n      }\n\n      whatwgURL.basicURLParse(v + \":\", {\n        url: this.url,\n        stateOverride: \"scheme start\"\n      });\n      updateHref(this);\n    }\n  }, {\n    key: \"username\",\n    get: function get() {\n      reinitializeURL(this);\n\n      if (this.url === null) {\n        return \"\";\n      }\n\n      return this.url.username;\n    },\n    set: function set(v) {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.host === null || url.host === \"\" || url.cannotBeABaseURL || url.scheme === \"file\") {\n        return;\n      }\n\n      whatwgURL.setTheUsername(url, v);\n      updateHref(this);\n    }\n  }, {\n    key: \"password\",\n    get: function get() {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null) {\n        return \"\";\n      }\n\n      return url.password;\n    },\n    set: function set(v) {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.host === null || url.host === \"\" || url.cannotBeABaseURL || url.scheme === \"file\") {\n        return;\n      }\n\n      whatwgURL.setThePassword(url, v);\n      updateHref(this);\n    }\n  }, {\n    key: \"host\",\n    get: function get() {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.host === null) {\n        return \"\";\n      }\n\n      if (url.port === null) {\n        return whatwgURL.serializeHost(url.host);\n      }\n\n      return whatwgURL.serializeHost(url.host) + \":\" + whatwgURL.serializeInteger(url.port);\n    },\n    set: function set(v) {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.cannotBeABaseURL) {\n        return;\n      }\n\n      whatwgURL.basicURLParse(v, {\n        url: url,\n        stateOverride: \"host\"\n      });\n      updateHref(this);\n    }\n  }, {\n    key: \"hostname\",\n    get: function get() {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.host === null) {\n        return \"\";\n      }\n\n      return whatwgURL.serializeHost(url.host);\n    },\n    set: function set(v) {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.cannotBeABaseURL) {\n        return;\n      }\n\n      whatwgURL.basicURLParse(v, {\n        url: url,\n        stateOverride: \"hostname\"\n      });\n      updateHref(this);\n    }\n  }, {\n    key: \"port\",\n    get: function get() {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.port === null) {\n        return \"\";\n      }\n\n      return whatwgURL.serializeInteger(url.port);\n    },\n    set: function set(v) {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.host === null || url.host === \"\" || url.cannotBeABaseURL || url.scheme === \"file\") {\n        return;\n      }\n\n      if (v === \"\") {\n        url.port = null;\n      } else {\n        whatwgURL.basicURLParse(v, {\n          url: url,\n          stateOverride: \"port\"\n        });\n      }\n\n      updateHref(this);\n    }\n  }, {\n    key: \"pathname\",\n    get: function get() {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null) {\n        return \"\";\n      }\n\n      if (url.cannotBeABaseURL) {\n        return url.path[0];\n      }\n\n      return \"/\" + url.path.join(\"/\");\n    },\n    set: function set(v) {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.cannotBeABaseURL) {\n        return;\n      }\n\n      url.path = [];\n      whatwgURL.basicURLParse(v, {\n        url: url,\n        stateOverride: \"path start\"\n      });\n      updateHref(this);\n    }\n  }, {\n    key: \"search\",\n    get: function get() {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.query === null || url.query === \"\") {\n        return \"\";\n      }\n\n      return \"?\" + url.query;\n    },\n    set: function set(v) {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null) {\n        return;\n      }\n\n      if (v === \"\") {\n        url.query = null;\n      } else {\n        var input = v[0] === \"?\" ? v.substring(1) : v;\n        url.query = \"\";\n        whatwgURL.basicURLParse(input, {\n          url: url,\n          stateOverride: \"query\",\n          encodingOverride: this._ownerDocument.charset\n        });\n      }\n\n      updateHref(this);\n    }\n  }, {\n    key: \"hash\",\n    get: function get() {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.fragment === null || url.fragment === \"\") {\n        return \"\";\n      }\n\n      return \"#\" + url.fragment;\n    },\n    set: function set(v) {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null) {\n        return;\n      }\n\n      if (v === \"\") {\n        url.fragment = null;\n      } else {\n        var input = v[0] === \"#\" ? v.substring(1) : v;\n        url.fragment = \"\";\n        whatwgURL.basicURLParse(input, {\n          url: url,\n          stateOverride: \"fragment\"\n        });\n      }\n\n      updateHref(this);\n    }\n  }]);\n\n  return HTMLHyperlinkElementUtilsImpl;\n}();\n\nfunction reinitializeURL(hheu) {\n  if (hheu.url !== null && hheu.url.scheme === \"blob\" && hheu.url.cannotBeABaseURL) {\n    return;\n  }\n\n  setTheURL(hheu);\n}\n\nfunction setTheURL(hheu) {\n  var href = hheu.getAttribute(\"href\");\n\n  if (href === null) {\n    hheu.url = null;\n    return;\n  }\n\n  var parsed = parseURLToResultingURLRecord(href, hheu._ownerDocument);\n  hheu.url = parsed === null ? null : parsed;\n}\n\nfunction updateHref(hheu) {\n  hheu.setAttribute(\"href\", whatwgURL.serializeURL(hheu.url));\n}","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/nodes/HTMLHyperlinkElementUtils-impl.js"],"names":["whatwgURL","require","parseURLToResultingURLRecord","exports","implementation","url","href","reinitializeURL","getAttribute","serializeURL","v","setAttribute","serializeURLOrigin","scheme","basicURLParse","stateOverride","updateHref","username","host","cannotBeABaseURL","setTheUsername","password","setThePassword","port","serializeHost","serializeInteger","path","join","query","input","substring","encodingOverride","_ownerDocument","charset","fragment","hheu","setTheURL","parsed"],"mappings":"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","sourcesContent":["\"use strict\";\nconst whatwgURL = require(\"whatwg-url\");\nconst { parseURLToResultingURLRecord } = require(\"../helpers/document-base-url\");\n\nexports.implementation = class HTMLHyperlinkElementUtilsImpl {\n  _htmlHyperlinkElementUtilsSetup() {\n    this.url = null;\n  }\n\n  toString() {\n    return this.href;\n  }\n\n  get href() {\n    reinitializeURL(this);\n    const { url } = this;\n\n    if (url === null) {\n      const href = this.getAttribute(\"href\");\n      return href === null ? \"\" : href;\n    }\n\n    return whatwgURL.serializeURL(url);\n  }\n\n  set href(v) {\n    this.setAttribute(\"href\", v);\n  }\n\n  get origin() {\n    reinitializeURL(this);\n\n    if (this.url === null) {\n      return \"\";\n    }\n\n    return whatwgURL.serializeURLOrigin(this.url);\n  }\n\n  get protocol() {\n    reinitializeURL(this);\n\n    if (this.url === null) {\n      return \":\";\n    }\n\n    return this.url.scheme + \":\";\n  }\n\n  set protocol(v) {\n    reinitializeURL(this);\n\n    if (this.url === null) {\n      return;\n    }\n\n    whatwgURL.basicURLParse(v + \":\", { url: this.url, stateOverride: \"scheme start\" });\n    updateHref(this);\n  }\n\n  get username() {\n    reinitializeURL(this);\n\n    if (this.url === null) {\n      return \"\";\n    }\n\n    return this.url.username;\n  }\n\n  set username(v) {\n    reinitializeURL(this);\n    const { url } = this;\n\n    if (url === null || url.host === null || url.host === \"\" || url.cannotBeABaseURL || url.scheme === \"file\") {\n      return;\n    }\n\n    whatwgURL.setTheUsername(url, v);\n    updateHref(this);\n  }\n\n  get password() {\n    reinitializeURL(this);\n    const { url } = this;\n\n    if (url === null) {\n      return \"\";\n    }\n\n    return url.password;\n  }\n\n  set password(v) {\n    reinitializeURL(this);\n    const { url } = this;\n\n    if (url === null || url.host === null || url.host === \"\" || url.cannotBeABaseURL || url.scheme === \"file\") {\n      return;\n    }\n\n    whatwgURL.setThePassword(url, v);\n    updateHref(this);\n  }\n\n  get host() {\n    reinitializeURL(this);\n    const { url } = this;\n\n    if (url === null || url.host === null) {\n      return \"\";\n    }\n\n    if (url.port === null) {\n      return whatwgURL.serializeHost(url.host);\n    }\n\n    return whatwgURL.serializeHost(url.host) + \":\" + whatwgURL.serializeInteger(url.port);\n  }\n\n  set host(v) {\n    reinitializeURL(this);\n    const { url } = this;\n\n    if (url === null || url.cannotBeABaseURL) {\n      return;\n    }\n\n    whatwgURL.basicURLParse(v, { url, stateOverride: \"host\" });\n    updateHref(this);\n  }\n\n  get hostname() {\n    reinitializeURL(this);\n    const { url } = this;\n\n    if (url === null || url.host === null) {\n      return \"\";\n    }\n\n    return whatwgURL.serializeHost(url.host);\n  }\n\n  set hostname(v) {\n    reinitializeURL(this);\n    const { url } = this;\n\n    if (url === null || url.cannotBeABaseURL) {\n      return;\n    }\n\n    whatwgURL.basicURLParse(v, { url, stateOverride: \"hostname\" });\n    updateHref(this);\n  }\n\n  get port() {\n    reinitializeURL(this);\n    const { url } = this;\n\n    if (url === null || url.port === null) {\n      return \"\";\n    }\n\n    return whatwgURL.serializeInteger(url.port);\n  }\n\n  set port(v) {\n    reinitializeURL(this);\n    const { url } = this;\n\n    if (url === null || url.host === null || url.host === \"\" || url.cannotBeABaseURL || url.scheme === \"file\") {\n      return;\n    }\n\n    if (v === \"\") {\n      url.port = null;\n    } else {\n      whatwgURL.basicURLParse(v, { url, stateOverride: \"port\" });\n    }\n    updateHref(this);\n  }\n\n  get pathname() {\n    reinitializeURL(this);\n    const { url } = this;\n\n    if (url === null) {\n      return \"\";\n    }\n\n    if (url.cannotBeABaseURL) {\n      return url.path[0];\n    }\n\n    return \"/\" + url.path.join(\"/\");\n  }\n\n  set pathname(v) {\n    reinitializeURL(this);\n    const { url } = this;\n\n    if (url === null || url.cannotBeABaseURL) {\n      return;\n    }\n\n    url.path = [];\n    whatwgURL.basicURLParse(v, { url, stateOverride: \"path start\" });\n    updateHref(this);\n  }\n\n  get search() {\n    reinitializeURL(this);\n    const { url } = this;\n\n    if (url === null || url.query === null || url.query === \"\") {\n      return \"\";\n    }\n\n    return \"?\" + url.query;\n  }\n\n  set search(v) {\n    reinitializeURL(this);\n    const { url } = this;\n\n    if (url === null) {\n      return;\n    }\n\n    if (v === \"\") {\n      url.query = null;\n    } else {\n      const input = v[0] === \"?\" ? v.substring(1) : v;\n      url.query = \"\";\n      whatwgURL.basicURLParse(input, {\n        url,\n        stateOverride: \"query\",\n        encodingOverride: this._ownerDocument.charset\n      });\n    }\n    updateHref(this);\n  }\n\n  get hash() {\n    reinitializeURL(this);\n    const { url } = this;\n\n    if (url === null || url.fragment === null || url.fragment === \"\") {\n      return \"\";\n    }\n\n    return \"#\" + url.fragment;\n  }\n\n  set hash(v) {\n    reinitializeURL(this);\n    const { url } = this;\n\n    if (url === null) {\n      return;\n    }\n\n    if (v === \"\") {\n      url.fragment = null;\n    } else {\n      const input = v[0] === \"#\" ? v.substring(1) : v;\n      url.fragment = \"\";\n      whatwgURL.basicURLParse(input, { url, stateOverride: \"fragment\" });\n    }\n    updateHref(this);\n  }\n};\n\nfunction reinitializeURL(hheu) {\n  if (hheu.url !== null && hheu.url.scheme === \"blob\" && hheu.url.cannotBeABaseURL) {\n    return;\n  }\n\n  setTheURL(hheu);\n}\n\nfunction setTheURL(hheu) {\n  const href = hheu.getAttribute(\"href\");\n  if (href === null) {\n    hheu.url = null;\n    return;\n  }\n\n  const parsed = parseURLToResultingURLRecord(href, hheu._ownerDocument);\n\n  hheu.url = parsed === null ? null : parsed;\n}\n\nfunction updateHref(hheu) {\n  hheu.setAttribute(\"href\", whatwgURL.serializeURL(hheu.url));\n}\n"]},"metadata":{},"sourceType":"script"}