{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _require = require(\"./strings\"),\n    isValidFloatingPointNumber = _require.isValidFloatingPointNumber,\n    isValidSimpleColor = _require.isValidSimpleColor,\n    parseFloatingPointNumber = _require.parseFloatingPointNumber,\n    stripLeadingAndTrailingASCIIWhitespace = _require.stripLeadingAndTrailingASCIIWhitespace,\n    stripNewlines = _require.stripNewlines,\n    splitOnCommas = _require.splitOnCommas;\n\nvar _require2 = require(\"./dates-and-times\"),\n    isValidDateString = _require2.isValidDateString,\n    isValidMonthString = _require2.isValidMonthString,\n    isValidTimeString = _require2.isValidTimeString,\n    isValidWeekString = _require2.isValidWeekString,\n    parseLocalDateAndTimeString = _require2.parseLocalDateAndTimeString,\n    serializeNormalizedDateAndTime = _require2.serializeNormalizedDateAndTime;\n\nvar whatwgURL = require(\"whatwg-url\");\n\nvar NodeList = require(\"../generated/NodeList\");\n\nvar _require3 = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require3.domSymbolTree;\n\nvar NODE_TYPE = require(\"../node-type\");\n\nvar submittableLocalNames = new Set([\"button\", \"input\", \"keygen\", \"object\", \"select\", \"textarea\"]);\n\nexports.isDisabled = function (formControl) {\n  if (formControl.localName === \"button\" || formControl.localName === \"input\" || formControl.localName === \"select\" || formControl.localName === \"textarea\") {\n    if (formControl.hasAttribute(\"disabled\")) {\n      return true;\n    }\n  }\n\n  var e = formControl.parentNode;\n\n  while (e) {\n    if (e.localName === \"fieldset\" && e.hasAttribute(\"disabled\")) {\n      var firstLegendElementChild = e.querySelector(\"legend\");\n\n      if (!firstLegendElementChild || !firstLegendElementChild.contains(formControl)) {\n        return true;\n      }\n    }\n\n    e = e.parentNode;\n  }\n\n  return false;\n};\n\nexports.isSubmittable = function (formControl) {\n  // https://html.spec.whatwg.org/multipage/forms.html#category-submit\n  return submittableLocalNames.has(formControl.localName);\n};\n\nexports.isButton = function (formControl) {\n  // https://html.spec.whatwg.org/multipage/forms.html#concept-button\n  return formControl.type === \"button\" || formControl.type === \"submit\" || formControl.type === \"reset\" || formControl.type === \"image\" || formControl.localName === \"button\";\n};\n\nexports.normalizeToCRLF = function (string) {\n  return string.replace(/\\r([^\\n])/g, \"\\r\\n$1\").replace(/\\r$/, \"\\r\\n\").replace(/([^\\r])\\n/g, \"$1\\r\\n\").replace(/^\\n/, \"\\r\\n\");\n};\n\nexports.isLabelable = function (node) {\n  // labelable logic defined at: https://html.spec.whatwg.org/multipage/forms.html#category-label\n  if (node.nodeType !== NODE_TYPE.ELEMENT_NODE) {\n    return false;\n  }\n\n  switch (node.tagName) {\n    case \"BUTTON\":\n    case \"METER\":\n    case \"OUTPUT\":\n    case \"PROGRESS\":\n    case \"SELECT\":\n    case \"TEXTAREA\":\n      return true;\n\n    case \"INPUT\":\n      return node.type !== \"hidden\";\n  }\n\n  return false;\n};\n\nexports.getLabelsForLabelable = function (labelable) {\n  if (!exports.isLabelable(labelable)) {\n    return null;\n  }\n\n  if (!labelable._labels) {\n    var root = labelable.getRootNode();\n    labelable._labels = NodeList.create([], {\n      element: root,\n      query: function query() {\n        var nodes = [];\n\n        var _iterator = _createForOfIteratorHelper(domSymbolTree.treeIterator(root)),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var descendant = _step.value;\n\n            if (descendant.control === labelable) {\n              nodes.push(descendant);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return nodes;\n      }\n    });\n  }\n\n  return labelable._labels;\n}; // https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address\n\n\nexports.isValidEmailAddress = function (emailAddress) {\n  var multiple = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var emailAddressRegExp = new RegExp(\"^[a-zA-Z0-9.!#$%&'*+\\\\/=?^_`{|}~-]+@[a-zA-Z0-9]\" + \"(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}\" + \"[a-zA-Z0-9])?)*$\"); // A valid e-mail address list is a set of comma-separated tokens, where each token is itself\n  // a valid e - mail address.To obtain the list of tokens from a valid e - mail address list,\n  // an implementation must split the string on commas.\n\n  if (multiple) {\n    return splitOnCommas(emailAddress).every(function (value) {\n      return emailAddressRegExp.test(value);\n    });\n  }\n\n  return emailAddressRegExp.test(emailAddress);\n};\n\nexports.isValidAbsoluteURL = function (url) {\n  return whatwgURL.parseURL(url) !== null;\n};\n\nexports.sanitizeValueByType = function (input, val) {\n  switch (input.type.toLowerCase()) {\n    case \"password\":\n    case \"search\":\n    case \"tel\":\n    case \"text\":\n      val = stripNewlines(val);\n      break;\n\n    case \"color\":\n      // https://html.spec.whatwg.org/multipage/forms.html#color-state-(type=color):value-sanitization-algorithm\n      val = isValidSimpleColor(val) ? val.toLowerCase() : \"#000000\";\n      break;\n\n    case \"date\":\n      // https://html.spec.whatwg.org/multipage/input.html#date-state-(type=date):value-sanitization-algorithm\n      if (!isValidDateString(val)) {\n        val = \"\";\n      }\n\n      break;\n\n    case \"datetime-local\":\n      {\n        // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type=datetime-local):value-sanitization-algorithm\n        var dateAndTime = parseLocalDateAndTimeString(val);\n        val = dateAndTime !== null ? serializeNormalizedDateAndTime(dateAndTime) : \"\";\n        break;\n      }\n\n    case \"email\":\n      // https://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email):value-sanitization-algorithm\n      // https://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email):value-sanitization-algorithm-2\n      if (input.hasAttribute(\"multiple\")) {\n        val = val.split(\",\").map(function (token) {\n          return stripLeadingAndTrailingASCIIWhitespace(token);\n        }).join(\",\");\n      } else {\n        val = stripNewlines(val);\n        val = stripLeadingAndTrailingASCIIWhitespace(val);\n      }\n\n      break;\n\n    case \"month\":\n      // https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):value-sanitization-algorithm\n      if (!isValidMonthString(val)) {\n        val = \"\";\n      }\n\n      break;\n\n    case \"number\":\n      // https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):value-sanitization-algorithm\n      // TODO: using parseFloatingPointNumber in addition to isValidFloatingPointNumber to pass number.html WPT.\n      // Possible spec bug.\n      if (!isValidFloatingPointNumber(val) || isNaN(parseFloatingPointNumber(val))) {\n        val = \"\";\n      }\n\n      break;\n\n    case \"range\":\n      // https://html.spec.whatwg.org/multipage/input.html#range-state-(type=range):value-sanitization-algorithm\n      // TODO: using parseFloatingPointNumber in addition to isValidFloatingPointNumber to pass number.html WPT.\n      // Possible spec bug.\n      if (!isValidFloatingPointNumber(val) || isNaN(parseFloatingPointNumber(val))) {\n        var minimum = input._minimum;\n        var maximum = input._maximum;\n        var defaultValue = maximum < minimum ? minimum : (minimum + maximum) / 2;\n        val = \"\".concat(defaultValue);\n      }\n\n      break;\n\n    case \"time\":\n      // https://html.spec.whatwg.org/multipage/input.html#time-state-(type=time):value-sanitization-algorithm\n      if (!isValidTimeString(val)) {\n        val = \"\";\n      }\n\n      break;\n\n    case \"url\":\n      // https://html.spec.whatwg.org/multipage/forms.html#url-state-(type=url):value-sanitization-algorithm\n      val = stripNewlines(val);\n      val = stripLeadingAndTrailingASCIIWhitespace(val);\n      break;\n\n    case \"week\":\n      // https://html.spec.whatwg.org/multipage/input.html#week-state-(type=week):value-sanitization-algorithm\n      if (!isValidWeekString(val)) {\n        val = \"\";\n      }\n\n  }\n\n  return val;\n};","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/helpers/form-controls.js"],"names":["require","isValidFloatingPointNumber","isValidSimpleColor","parseFloatingPointNumber","stripLeadingAndTrailingASCIIWhitespace","stripNewlines","splitOnCommas","isValidDateString","isValidMonthString","isValidTimeString","isValidWeekString","parseLocalDateAndTimeString","serializeNormalizedDateAndTime","whatwgURL","NodeList","domSymbolTree","NODE_TYPE","submittableLocalNames","Set","exports","isDisabled","formControl","localName","hasAttribute","e","parentNode","firstLegendElementChild","querySelector","contains","isSubmittable","has","isButton","type","normalizeToCRLF","string","replace","isLabelable","node","nodeType","ELEMENT_NODE","tagName","getLabelsForLabelable","labelable","_labels","root","getRootNode","create","element","query","nodes","treeIterator","descendant","control","push","isValidEmailAddress","emailAddress","multiple","emailAddressRegExp","RegExp","every","value","test","isValidAbsoluteURL","url","parseURL","sanitizeValueByType","input","val","toLowerCase","dateAndTime","split","map","token","join","isNaN","minimum","_minimum","maximum","_maximum","defaultValue"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst {\n  isValidFloatingPointNumber,\n  isValidSimpleColor,\n  parseFloatingPointNumber,\n  stripLeadingAndTrailingASCIIWhitespace,\n  stripNewlines,\n  splitOnCommas\n} = require(\"./strings\");\nconst {\n  isValidDateString,\n  isValidMonthString,\n  isValidTimeString,\n  isValidWeekString,\n  parseLocalDateAndTimeString,\n  serializeNormalizedDateAndTime\n} = require(\"./dates-and-times\");\nconst whatwgURL = require(\"whatwg-url\");\n\nconst NodeList = require(\"../generated/NodeList\");\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst NODE_TYPE = require(\"../node-type\");\nconst submittableLocalNames = new Set([\"button\", \"input\", \"keygen\", \"object\", \"select\", \"textarea\"]);\n\nexports.isDisabled = formControl => {\n  if (formControl.localName === \"button\" || formControl.localName === \"input\" || formControl.localName === \"select\" ||\n      formControl.localName === \"textarea\") {\n    if (formControl.hasAttribute(\"disabled\")) {\n      return true;\n    }\n  }\n\n  let e = formControl.parentNode;\n  while (e) {\n    if (e.localName === \"fieldset\" && e.hasAttribute(\"disabled\")) {\n      const firstLegendElementChild = e.querySelector(\"legend\");\n      if (!firstLegendElementChild || !firstLegendElementChild.contains(formControl)) {\n        return true;\n      }\n    }\n    e = e.parentNode;\n  }\n\n  return false;\n};\n\nexports.isSubmittable = formControl => {\n  // https://html.spec.whatwg.org/multipage/forms.html#category-submit\n  return submittableLocalNames.has(formControl.localName);\n};\n\nexports.isButton = formControl => {\n  // https://html.spec.whatwg.org/multipage/forms.html#concept-button\n  return formControl.type === \"button\" || formControl.type === \"submit\" || formControl.type === \"reset\" ||\n         formControl.type === \"image\" || formControl.localName === \"button\";\n};\n\nexports.normalizeToCRLF = string => {\n  return string.replace(/\\r([^\\n])/g, \"\\r\\n$1\")\n    .replace(/\\r$/, \"\\r\\n\")\n    .replace(/([^\\r])\\n/g, \"$1\\r\\n\")\n    .replace(/^\\n/, \"\\r\\n\");\n};\n\nexports.isLabelable = node => {\n  // labelable logic defined at: https://html.spec.whatwg.org/multipage/forms.html#category-label\n  if (node.nodeType !== NODE_TYPE.ELEMENT_NODE) {\n    return false;\n  }\n\n  switch (node.tagName) {\n    case \"BUTTON\":\n    case \"METER\":\n    case \"OUTPUT\":\n    case \"PROGRESS\":\n    case \"SELECT\":\n    case \"TEXTAREA\":\n      return true;\n\n    case \"INPUT\":\n      return node.type !== \"hidden\";\n  }\n\n  return false;\n};\n\nexports.getLabelsForLabelable = labelable => {\n  if (!exports.isLabelable(labelable)) {\n    return null;\n  }\n  if (!labelable._labels) {\n    const root = labelable.getRootNode();\n    labelable._labels = NodeList.create([], {\n      element: root,\n      query: () => {\n        const nodes = [];\n        for (const descendant of domSymbolTree.treeIterator(root)) {\n          if (descendant.control === labelable) {\n            nodes.push(descendant);\n          }\n        }\n        return nodes;\n      }\n    });\n  }\n  return labelable._labels;\n};\n\n// https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address\nexports.isValidEmailAddress = (emailAddress, multiple = false) => {\n  const emailAddressRegExp = new RegExp(\"^[a-zA-Z0-9.!#$%&'*+\\\\/=?^_`{|}~-]+@[a-zA-Z0-9]\" +\n    \"(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}\" +\n    \"[a-zA-Z0-9])?)*$\");\n  // A valid e-mail address list is a set of comma-separated tokens, where each token is itself\n  // a valid e - mail address.To obtain the list of tokens from a valid e - mail address list,\n  // an implementation must split the string on commas.\n  if (multiple) {\n    return splitOnCommas(emailAddress).every(value => emailAddressRegExp.test(value));\n  }\n  return emailAddressRegExp.test(emailAddress);\n};\n\nexports.isValidAbsoluteURL = url => {\n  return whatwgURL.parseURL(url) !== null;\n};\n\nexports.sanitizeValueByType = (input, val) => {\n  switch (input.type.toLowerCase()) {\n    case \"password\":\n    case \"search\":\n    case \"tel\":\n    case \"text\":\n      val = stripNewlines(val);\n      break;\n\n    case \"color\":\n      // https://html.spec.whatwg.org/multipage/forms.html#color-state-(type=color):value-sanitization-algorithm\n      val = isValidSimpleColor(val) ? val.toLowerCase() : \"#000000\";\n      break;\n\n    case \"date\":\n      // https://html.spec.whatwg.org/multipage/input.html#date-state-(type=date):value-sanitization-algorithm\n      if (!isValidDateString(val)) {\n        val = \"\";\n      }\n      break;\n\n    case \"datetime-local\": {\n      // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type=datetime-local):value-sanitization-algorithm\n      const dateAndTime = parseLocalDateAndTimeString(val);\n      val = dateAndTime !== null ? serializeNormalizedDateAndTime(dateAndTime) : \"\";\n      break;\n    }\n\n    case \"email\":\n      // https://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email):value-sanitization-algorithm\n      // https://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email):value-sanitization-algorithm-2\n      if (input.hasAttribute(\"multiple\")) {\n        val = val.split(\",\").map(token => stripLeadingAndTrailingASCIIWhitespace(token)).join(\",\");\n      } else {\n        val = stripNewlines(val);\n        val = stripLeadingAndTrailingASCIIWhitespace(val);\n      }\n      break;\n\n    case \"month\":\n      // https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):value-sanitization-algorithm\n      if (!isValidMonthString(val)) {\n        val = \"\";\n      }\n      break;\n\n    case \"number\":\n      // https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):value-sanitization-algorithm\n      // TODO: using parseFloatingPointNumber in addition to isValidFloatingPointNumber to pass number.html WPT.\n      // Possible spec bug.\n      if (!isValidFloatingPointNumber(val) || isNaN(parseFloatingPointNumber(val))) {\n        val = \"\";\n      }\n      break;\n\n    case \"range\":\n      // https://html.spec.whatwg.org/multipage/input.html#range-state-(type=range):value-sanitization-algorithm\n      // TODO: using parseFloatingPointNumber in addition to isValidFloatingPointNumber to pass number.html WPT.\n      // Possible spec bug.\n      if (!isValidFloatingPointNumber(val) || isNaN(parseFloatingPointNumber(val))) {\n        const minimum = input._minimum;\n        const maximum = input._maximum;\n        const defaultValue = maximum < minimum ? minimum : (minimum + maximum) / 2;\n        val = `${defaultValue}`;\n      }\n      break;\n\n    case \"time\":\n      // https://html.spec.whatwg.org/multipage/input.html#time-state-(type=time):value-sanitization-algorithm\n      if (!isValidTimeString(val)) {\n        val = \"\";\n      }\n      break;\n\n    case \"url\":\n      // https://html.spec.whatwg.org/multipage/forms.html#url-state-(type=url):value-sanitization-algorithm\n      val = stripNewlines(val);\n      val = stripLeadingAndTrailingASCIIWhitespace(val);\n      break;\n\n    case \"week\":\n      // https://html.spec.whatwg.org/multipage/input.html#week-state-(type=week):value-sanitization-algorithm\n      if (!isValidWeekString(val)) {\n        val = \"\";\n      }\n  }\n\n  return val;\n};\n"]},"metadata":{},"sourceType":"script"}