{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar whatwgEncoding = require(\"whatwg-encoding\");\n\nvar MIMEType = require(\"whatwg-mimetype\");\n\nvar querystring = require(\"querystring\");\n\nvar DOMException = require(\"domexception\");\n\nvar EventTargetImpl = require(\"../events/EventTarget-impl\").implementation;\n\nvar ProgressEvent = require(\"../generated/ProgressEvent\");\n\nvar _require = require(\"../helpers/create-event-accessor\"),\n    setupForSimpleEventAccessors = _require.setupForSimpleEventAccessors;\n\nvar READY_STATES = Object.freeze({\n  EMPTY: 0,\n  LOADING: 1,\n  DONE: 2\n});\nvar events = [\"loadstart\", \"progress\", \"load\", \"abort\", \"error\", \"loadend\"];\n\nvar FileReaderImpl = /*#__PURE__*/function (_EventTargetImpl) {\n  _inherits(FileReaderImpl, _EventTargetImpl);\n\n  var _super = _createSuper(FileReaderImpl);\n\n  function FileReaderImpl(args, privateData) {\n    var _this;\n\n    _classCallCheck(this, FileReaderImpl);\n\n    _this = _super.call(this, [], privateData);\n    _this.error = null;\n    _this.readyState = READY_STATES.EMPTY;\n    _this.result = null;\n    _this._ownerDocument = privateData.window.document;\n    _this._terminated = false;\n    return _this;\n  }\n\n  _createClass(FileReaderImpl, [{\n    key: \"readAsArrayBuffer\",\n    value: function readAsArrayBuffer(file) {\n      this._readFile(file, \"buffer\");\n    }\n  }, {\n    key: \"readAsBinaryString\",\n    value: function readAsBinaryString(file) {\n      this._readFile(file, \"binaryString\");\n    }\n  }, {\n    key: \"readAsDataURL\",\n    value: function readAsDataURL(file) {\n      this._readFile(file, \"dataURL\");\n    }\n  }, {\n    key: \"readAsText\",\n    value: function readAsText(file, encoding) {\n      this._readFile(file, \"text\", whatwgEncoding.labelToName(encoding) || \"UTF-8\");\n    }\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      if (this.readyState === READY_STATES.EMPTY || this.readyState === READY_STATES.DONE) {\n        this.result = null;\n        return;\n      }\n\n      if (this.readyState === READY_STATES.LOADING) {\n        this.readyState = READY_STATES.DONE;\n        this.result = null;\n      }\n\n      this._terminated = true;\n\n      this._fireProgressEvent(\"abort\");\n\n      this._fireProgressEvent(\"loadend\");\n    }\n  }, {\n    key: \"_fireProgressEvent\",\n    value: function _fireProgressEvent(name, props) {\n      var event = ProgressEvent.createImpl([name, Object.assign({\n        bubbles: false,\n        cancelable: false\n      }, props)], {});\n      this.dispatchEvent(event);\n    }\n  }, {\n    key: \"_readFile\",\n    value: function _readFile(file, format, encoding) {\n      var _this2 = this;\n\n      if (this.readyState === READY_STATES.LOADING) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      this.readyState = READY_STATES.LOADING;\n      setImmediate(function () {\n        if (_this2._terminated) {\n          _this2._terminated = false;\n          return;\n        }\n\n        _this2._fireProgressEvent(\"loadstart\");\n\n        var data = file._buffer;\n\n        if (!data) {\n          data = Buffer.alloc(0);\n        }\n\n        _this2._fireProgressEvent(\"progress\", {\n          lengthComputable: !isNaN(file.size),\n          total: file.size,\n          loaded: data.length\n        });\n\n        setImmediate(function () {\n          if (_this2._terminated) {\n            _this2._terminated = false;\n            return;\n          }\n\n          switch (format) {\n            default:\n            case \"buffer\":\n              {\n                _this2.result = new Uint8Array(data).buffer;\n                break;\n              }\n\n            case \"binaryString\":\n              {\n                _this2.result = data.toString(\"binary\");\n                break;\n              }\n\n            case \"dataURL\":\n              {\n                // Spec seems very unclear here; see https://github.com/whatwg/fetch/issues/665#issuecomment-362930079.\n                var dataUrl = \"data:\";\n                var contentType = MIMEType.parse(file.type);\n\n                if (contentType && contentType.type === \"text\") {\n                  var fallbackEncoding = whatwgEncoding.getBOMEncoding(data) || whatwgEncoding.labelToName(contentType.parameters.get(\"charset\")) || \"UTF-8\";\n                  var decoded = whatwgEncoding.decode(data, fallbackEncoding);\n                  contentType.parameters.set(\"charset\", encoding);\n                  dataUrl += contentType.toString();\n                  dataUrl += \",\";\n                  dataUrl += querystring.escape(decoded);\n                } else {\n                  if (contentType) {\n                    dataUrl += contentType.toString();\n                  }\n\n                  dataUrl += \";base64,\";\n                  dataUrl += data.toString(\"base64\");\n                }\n\n                _this2.result = dataUrl;\n                break;\n              }\n\n            case \"text\":\n              {\n                _this2.result = whatwgEncoding.decode(data, encoding);\n                break;\n              }\n          }\n\n          _this2.readyState = READY_STATES.DONE;\n\n          _this2._fireProgressEvent(\"load\");\n\n          _this2._fireProgressEvent(\"loadend\");\n        });\n      });\n    }\n  }]);\n\n  return FileReaderImpl;\n}(EventTargetImpl);\n\nsetupForSimpleEventAccessors(FileReaderImpl.prototype, events);\nexports.implementation = FileReaderImpl;","map":{"version":3,"sources":["/mnt/c/Users/riche/ThessianSound/ThessianSoundLLC/frontend/node_modules/jsdom/lib/jsdom/living/file-api/FileReader-impl.js"],"names":["whatwgEncoding","require","MIMEType","querystring","DOMException","EventTargetImpl","implementation","ProgressEvent","setupForSimpleEventAccessors","READY_STATES","Object","freeze","EMPTY","LOADING","DONE","events","FileReaderImpl","args","privateData","error","readyState","result","_ownerDocument","window","document","_terminated","file","_readFile","encoding","labelToName","_fireProgressEvent","name","props","event","createImpl","assign","bubbles","cancelable","dispatchEvent","format","setImmediate","data","_buffer","Buffer","alloc","lengthComputable","isNaN","size","total","loaded","length","Uint8Array","buffer","toString","dataUrl","contentType","parse","type","fallbackEncoding","getBOMEncoding","parameters","get","decoded","decode","set","escape","prototype","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst MIMEType = require(\"whatwg-mimetype\");\nconst querystring = require(\"querystring\");\nconst DOMException = require(\"domexception\");\nconst EventTargetImpl = require(\"../events/EventTarget-impl\").implementation;\nconst ProgressEvent = require(\"../generated/ProgressEvent\");\nconst { setupForSimpleEventAccessors } = require(\"../helpers/create-event-accessor\");\n\nconst READY_STATES = Object.freeze({\n  EMPTY: 0,\n  LOADING: 1,\n  DONE: 2\n});\n\nconst events = [\"loadstart\", \"progress\", \"load\", \"abort\", \"error\", \"loadend\"];\n\nclass FileReaderImpl extends EventTargetImpl {\n  constructor(args, privateData) {\n    super([], privateData);\n\n    this.error = null;\n    this.readyState = READY_STATES.EMPTY;\n    this.result = null;\n\n    this._ownerDocument = privateData.window.document;\n    this._terminated = false;\n  }\n\n  readAsArrayBuffer(file) {\n    this._readFile(file, \"buffer\");\n  }\n  readAsBinaryString(file) {\n    this._readFile(file, \"binaryString\");\n  }\n  readAsDataURL(file) {\n    this._readFile(file, \"dataURL\");\n  }\n  readAsText(file, encoding) {\n    this._readFile(file, \"text\", whatwgEncoding.labelToName(encoding) || \"UTF-8\");\n  }\n\n  abort() {\n    if (this.readyState === READY_STATES.EMPTY || this.readyState === READY_STATES.DONE) {\n      this.result = null;\n      return;\n    }\n\n    if (this.readyState === READY_STATES.LOADING) {\n      this.readyState = READY_STATES.DONE;\n      this.result = null;\n    }\n\n    this._terminated = true;\n    this._fireProgressEvent(\"abort\");\n    this._fireProgressEvent(\"loadend\");\n  }\n\n  _fireProgressEvent(name, props) {\n    const event = ProgressEvent.createImpl([name, Object.assign({ bubbles: false, cancelable: false }, props)], {});\n    this.dispatchEvent(event);\n  }\n\n  _readFile(file, format, encoding) {\n    if (this.readyState === READY_STATES.LOADING) {\n      throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n    }\n\n    this.readyState = READY_STATES.LOADING;\n\n    setImmediate(() => {\n      if (this._terminated) {\n        this._terminated = false;\n        return;\n      }\n\n      this._fireProgressEvent(\"loadstart\");\n\n      let data = file._buffer;\n      if (!data) {\n        data = Buffer.alloc(0);\n      }\n      this._fireProgressEvent(\"progress\", {\n        lengthComputable: !isNaN(file.size),\n        total: file.size,\n        loaded: data.length\n      });\n\n      setImmediate(() => {\n        if (this._terminated) {\n          this._terminated = false;\n          return;\n        }\n\n        switch (format) {\n          default:\n          case \"buffer\": {\n            this.result = (new Uint8Array(data)).buffer;\n            break;\n          }\n          case \"binaryString\": {\n            this.result = data.toString(\"binary\");\n            break;\n          }\n          case \"dataURL\": {\n            // Spec seems very unclear here; see https://github.com/whatwg/fetch/issues/665#issuecomment-362930079.\n            let dataUrl = \"data:\";\n            const contentType = MIMEType.parse(file.type);\n            if (contentType && contentType.type === \"text\") {\n              const fallbackEncoding = whatwgEncoding.getBOMEncoding(data) ||\n                whatwgEncoding.labelToName(contentType.parameters.get(\"charset\")) || \"UTF-8\";\n              const decoded = whatwgEncoding.decode(data, fallbackEncoding);\n\n              contentType.parameters.set(\"charset\", encoding);\n              dataUrl += contentType.toString();\n              dataUrl += \",\";\n              dataUrl += querystring.escape(decoded);\n            } else {\n              if (contentType) {\n                dataUrl += contentType.toString();\n              }\n              dataUrl += \";base64,\";\n              dataUrl += data.toString(\"base64\");\n            }\n            this.result = dataUrl;\n            break;\n          }\n          case \"text\": {\n            this.result = whatwgEncoding.decode(data, encoding);\n            break;\n          }\n        }\n        this.readyState = READY_STATES.DONE;\n        this._fireProgressEvent(\"load\");\n        this._fireProgressEvent(\"loadend\");\n      });\n    });\n  }\n}\nsetupForSimpleEventAccessors(FileReaderImpl.prototype, events);\n\nexports.implementation = FileReaderImpl;\n"]},"metadata":{},"sourceType":"script"}